syntax = "proto3";

package pb.cms;

import "usertype.proto";
import "anchortype.proto";
import "cmstype.proto";

service CmsSdk {
    // 获取运营区域列表，不分页
    rpc GetAreaList (Empty) returns (AreaListReply) {
    }

    // 登录
    rpc Login (LoginRequest) returns (Admin) {
    }

    // 获取当前管理员信息
    rpc GetAdminInfo (Empty) returns (Admin) {
    }

    // 保存管理员，id为0时创建
    rpc SaveAdmin (Admin) returns (Admin) {
    }

    // 获取管理员列表，不分页
    rpc GetAdminList (Empty) returns (AdminListReply) {
    }

    // 保存工会，id为0时创建
    rpc SaveGuild (Guild) returns (Guild) {
    }

    // 获取工会列表，不分页
    rpc GetGuildList (Empty) returns (GuildListReply) {
    }

    // 获取应用列表，不分页
    rpc GetAppList (Empty) returns (AppListReply) {
    }

    // 获取主播列表
    rpc GetAnchorList (AnchorListRequest) returns (AnchorListReply) {
    }

    // 获取用户列表
    rpc GetUserList (UserListRequest) returns (UserListReply) {
    }

    // 调整余额
    rpc AdjustBalance (AdjustBalanceRequest) returns (AdjustBalanceReply) {
    }

    // 更新用户信息，目前仅支持更新vip到期时间
    rpc UpdateUser (User) returns (User) {
    }

    // 更新主播基础信息
    rpc UpdateAnchorBasic (AnchorBasic) returns (AnchorBasic) {
    }

    // 获取主播完整资料
    rpc GetAnchorFull (AnchorFullRequest) returns (AnchorFullReply) {
    }

    // 获取主播资料列表
    rpc GetProfileList (ProfileListRequest) returns (ProfileListReply) {
    }

    // 处理主播资料审核
    rpc ProcessProfile (ProcessProfileRequest) returns (AnchorProfile) {
    }

    // 获取举报记录
    rpc GetViolationList (ViolationListRequest) returns (ViolationListReply) {
    }

    // 处理违规
    rpc ProcessViolation (ProcessViolationRequest) returns (ViolationRecord) {
    }

    // 获取通话录制视频列表
    rpc GetLiveList (LiveListRequest) returns (LiveListReply) {
    }

    // 获取支付订单列表
    rpc GetPayList (PayListRequest) returns (PayListReply) {
    }

    // 获取机器人列表
    rpc GetRobotList (RobotListRequest) returns (RobotListReply) {
    }

    // 保存机器人，禁用时把状态置为Paused，启用时把状态置为Approved，其他状态不适用
    rpc SaveRobot (AnchorProfile) returns (AnchorProfile) {
    }

    // 获取机器人自动消息列表
    rpc GetRobotMessageList (RobotMessageListRequest) returns (RobotMessageListReply) {
    }

    // 保存机器人消息，AIA消息
    rpc SaveRobotMessage (RobotMessage) returns (RobotMessage) {
    }

    // 获取自动消息列表，AIB消息
    rpc GetAutoMessageList (AutoMessageListRequest) returns (AutoMessageListReply) {
    }

    // 保存自动消息，AIB消息
    rpc SaveAutoMessage (AutoMessage) returns (AutoMessage) {
    }

    // 上传文件
    rpc UploadFile (stream AdminFileChunk) returns (FileRecord) {
    }
}

message AreaListReply {
    repeated Area areas = 1;
}

message LoginRequest {
    string email = 1;
    string password = 2;
}

message AdminListReply {
    repeated Admin admins = 1;
}

message GuildListReply {
    repeated Guild guilds = 1;
}

message AppListReply {
    repeated App apps = 1;
}

message AnchorListRequest {
    // 页号
    uint32 page_no = 1;
    // 页大小
    uint32 page_size = 2;
    // 主播id
    uint32 anchor_id = 3;
    // 区域id
    uint32 area_id = 4;
    // 工会id
    uint32 guild_id = 5;
    // 封禁状态
    BlockStatus block_status = 6;
    // 在线状态
    OnlineStatus online_status = 7;
    // 审核状态
    ReviewStatus review_status = 8;
    // 创建起始时间
    uint32 created_start = 9;
    // 创建结束时间
    uint32 created_end = 10;
    // 最小离线时间，单位为秒
    uint32 min_offline = 11;
}

message AnchorListReply {
    // 主播
    repeated AnchorBasic anchors = 1;
    // 页号
    uint32 page_no = 2;
    // 页面大小
    uint32 page_size = 3;
    // 总页数
    uint32 total_page = 4;
    // 总记录数
    uint32 total_count = 5;
}

message UserListRequest {
    // 页号
    uint32 page_no = 1;
    // 页大小
    uint32 page_size = 2;
    // 用户id
    uint32 user_id = 3;
    // 区域id
    uint32 area_id = 4;
    // 昵称
    string nickname = 5;
    // 仅查询vip
    bool vip_only = 6;
    // 仅查询充值
    bool deposit_only = 7;
    // 最低余额
    uint32 min_balance = 8;
    // 创建起始时间
    uint32 created_start = 9;
    // 创建结束时间
    uint32 created_end = 10;
}

message UserListReply {
    // 用户
    repeated User users = 1;
    // 页号
    uint32 page_no = 2;
    // 页面大小
    uint32 page_size = 3;
    // 总页数
    uint32 total_page = 4;
    // 总记录数
    uint32 total_count = 5;
}

message AdjustBalanceRequest {
    // 主播或用户
    EntityType entity_type = 1;
    // 主播或用户id
    uint32 entity_id = 2;
    // 数量，正数为增加，负数为扣除
    int32 amount = 3;
    // 是否发生系统通知
    bool send_notify = 4;
    // 描述
    string desc = 5;
}

message AdjustBalanceReply {
    // 调整后余额
    uint32 balance = 1;
}

message AnchorFullRequest {
    uint32 anchor_id = 1;
}

message AnchorFullReply {
    AnchorBasic basic = 1;
    repeated AnchorProfile profiles = 2;
}

message ProfileListRequest {
    // 页号
    uint32 page_no = 1;
    // 页大小
    uint32 page_size = 2;
    // 主播id
    uint32 anchor_id = 3;
    // 区域id
    uint32 area_id = 4;
    // 审核状态
    ReviewStatus status = 5;
}

message ProfileListReply {
    repeated AnchorProfile profiles = 1;
    // 页号
    uint32 page_no = 2;
    // 页面大小
    uint32 page_size = 3;
    // 总页数
    uint32 total_page = 4;
    // 总记录数
    uint32 total_count = 5;
}

message ProcessProfileRequest {
    uint32 profile_id = 1;
    ReviewStatus status = 2;
    // 拒绝原因
    string reason = 3;
}

message ViolationListRequest {
    // 页号
    uint32 page_no = 1;
    // 页大小
    uint32 page_size = 2;
    // 区域id
    uint32 area_id = 3;
    // 处理状态，传空时查询未处理的举报
    repeated BlockStatus deal_status = 4;
    // 举报场景
    ViolationScene Scene = 5;
    // 举报人类型
    EntityType reporter_type = 6;
    // 举报人id
    uint32 reporter_id = 7;
    // 被举报人类型
    EntityType reported_type = 8;
    // 被举报人id
    uint32 reported_id = 9;
    // 创建起始时间
    uint32 created_start = 10;
    // 创建结束时间
    uint32 created_end = 11;
}

message ViolationListReply {
    repeated ViolationRecord records = 1;
    // 页号
    uint32 page_no = 2;
    // 页面大小
    uint32 page_size = 3;
    // 总页数
    uint32 total_page = 4;
    // 总记录数
    uint32 total_count = 5;
}

message ProcessViolationRequest {
    uint32 violation_id = 1;
    // 处理状态
    BlockStatus deal_status = 2;
    // 处理信息
    string deal_message = 3;
    // 封禁时长，秒
    uint32 block_duration = 4;
}

message LiveListRequest {
    // 页号
    uint32 page_no = 1;
    // 页大小
    uint32 page_size = 2;
    // 区域id
    uint32 area_id = 3;
    // 主播id
    uint32 anchor_id = 4;
    // 审核状态
    ReviewStatus status = 5;
    // 创建起始时间
    uint32 created_start = 6;
    // 创建结束时间
    uint32 created_end = 7;
}

message LiveListReply {
    repeated FileRecord records = 1;
    // 页号
    uint32 page_no = 2;
    // 页面大小
    uint32 page_size = 3;
    // 总页数
    uint32 total_page = 4;
    // 总记录数
    uint32 total_count = 5;
}

message PayListRequest {
    // 页号
    uint32 page_no = 1;
    // 页大小
    uint32 page_size = 2;
    // 区域id
    uint32 area_id = 3;
    // 应用id
    uint32 app_id = 4;
    // 用户id
    uint32 user_id = 5;
    // 订单id
    uint64 record_id = 6;
    // 订单状态
    PayStatus status = 7;
    // 创建起始时间
    uint32 created_start = 8;
    // 创建结束时间
    uint32 created_end = 9;
}

message PayListReply {
    repeated PayRecord records = 1;
    // 页号
    uint32 page_no = 2;
    // 页面大小
    uint32 page_size = 3;
    // 总页数
    uint32 total_page = 4;
    // 总记录数
    uint32 total_count = 5;
}

message RobotListRequest {
    // 页号
    uint32 page_no = 1;
    // 页大小
    uint32 page_size = 2;
    // 区域id
    uint32 area_id = 3;
    // 是否启用
    bool enable = 4;
    // 机器人id
    uint32 robot_id = 5;
}

message RobotListReply {
    repeated AnchorProfile robots = 1;
    // 页号
    uint32 page_no = 2;
    // 页面大小
    uint32 page_size = 3;
    // 总页数
    uint32 total_page = 4;
    // 总记录数
    uint32 total_count = 5;
}

message RobotMessageListRequest {
    uint32 robot_id = 1;
}

message RobotMessageListReply {
    repeated RobotMessage messages = 1;
}

message AutoMessageListRequest {
    // 页号
    uint32 page_no = 1;
    // 页大小
    uint32 page_size = 2;
    // 区域id
    uint32 area_id = 3;
    // 是否启用
    bool enable = 4;
    // 场景动作
    ActionType action = 5;
}

message AutoMessageListReply {
    repeated AutoMessage messages = 1;
    // 页号
    uint32 page_no = 2;
    // 页面大小
    uint32 page_size = 3;
    // 总页数
    uint32 total_page = 4;
    // 总记录数
    uint32 total_count = 5;
}

message AdminFileChunk {
    // 偏移，必须连续
    uint32 offset = 1;
    // 文件名，为空时自动生成
    string filename = 2;
    // 文件类型
    FileType type = 3;
    // 文件内容，单个分片大小不要大于8MB
    bytes content = 4;
    // 区域id，必选
    uint32 area_id = 5;
}
