// source: user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var usertype_pb = require('./usertype_pb.js');
goog.object.extend(proto, usertype_pb);
goog.exportSymbol('proto.pb.user.AnchorIdsReply', null, global);
goog.exportSymbol('proto.pb.user.AnchorInfoRequest', null, global);
goog.exportSymbol('proto.pb.user.AnchorListReply', null, global);
goog.exportSymbol('proto.pb.user.AnchorListRequest', null, global);
goog.exportSymbol('proto.pb.user.AnchorListType', null, global);
goog.exportSymbol('proto.pb.user.AnchorRelationRequest', null, global);
goog.exportSymbol('proto.pb.user.AreaListReply', null, global);
goog.exportSymbol('proto.pb.user.BuyCommodityReply', null, global);
goog.exportSymbol('proto.pb.user.BuyCommodityRequest', null, global);
goog.exportSymbol('proto.pb.user.BuyVipRequest', null, global);
goog.exportSymbol('proto.pb.user.CheckinRequest', null, global);
goog.exportSymbol('proto.pb.user.ConfigReply', null, global);
goog.exportSymbol('proto.pb.user.ConfigRequest', null, global);
goog.exportSymbol('proto.pb.user.FetchCallReply', null, global);
goog.exportSymbol('proto.pb.user.FetchCallRequest', null, global);
goog.exportSymbol('proto.pb.user.GiftConfigReply', null, global);
goog.exportSymbol('proto.pb.user.GiftConfigRequest', null, global);
goog.exportSymbol('proto.pb.user.HangCallReply', null, global);
goog.exportSymbol('proto.pb.user.HangCallRequest', null, global);
goog.exportSymbol('proto.pb.user.LoginRequest', null, global);
goog.exportSymbol('proto.pb.user.MakeCallReply', null, global);
goog.exportSymbol('proto.pb.user.MakeCallRequest', null, global);
goog.exportSymbol('proto.pb.user.PayChannelReply', null, global);
goog.exportSymbol('proto.pb.user.PayChannelRequest', null, global);
goog.exportSymbol('proto.pb.user.PayListReply', null, global);
goog.exportSymbol('proto.pb.user.PayListRequest', null, global);
goog.exportSymbol('proto.pb.user.RelationOpType', null, global);
goog.exportSymbol('proto.pb.user.ReportCallRequest', null, global);
goog.exportSymbol('proto.pb.user.ReportUsageReply', null, global);
goog.exportSymbol('proto.pb.user.ReportUsageRequest', null, global);
goog.exportSymbol('proto.pb.user.ReportViolationRequest', null, global);
goog.exportSymbol('proto.pb.user.SaveMediaRequest', null, global);
goog.exportSymbol('proto.pb.user.SearchAnchorReply', null, global);
goog.exportSymbol('proto.pb.user.SearchAnchorRequest', null, global);
goog.exportSymbol('proto.pb.user.SendGiftRequest', null, global);
goog.exportSymbol('proto.pb.user.TransactionListReply', null, global);
goog.exportSymbol('proto.pb.user.TransactionListRequest', null, global);
goog.exportSymbol('proto.pb.user.UpdateCallReply', null, global);
goog.exportSymbol('proto.pb.user.UpdateCallRequest', null, global);
goog.exportSymbol('proto.pb.user.UserListReply', null, global);
goog.exportSymbol('proto.pb.user.UserListRequest', null, global);
goog.exportSymbol('proto.pb.user.UserListType', null, global);
goog.exportSymbol('proto.pb.user.VerifyPayReply', null, global);
goog.exportSymbol('proto.pb.user.VerifyPayRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.AreaListReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.AreaListReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.AreaListReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.AreaListReply.displayName = 'proto.pb.user.AreaListReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.LoginRequest.displayName = 'proto.pb.user.LoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.CheckinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.CheckinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.CheckinRequest.displayName = 'proto.pb.user.CheckinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.ConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.ConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.ConfigRequest.displayName = 'proto.pb.user.ConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.ConfigReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.ConfigReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.ConfigReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.ConfigReply.displayName = 'proto.pb.user.ConfigReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.PayChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.PayChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.PayChannelRequest.displayName = 'proto.pb.user.PayChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.PayChannelReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.PayChannelReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.PayChannelReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.PayChannelReply.displayName = 'proto.pb.user.PayChannelReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.GiftConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.GiftConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.GiftConfigRequest.displayName = 'proto.pb.user.GiftConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.GiftConfigReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.GiftConfigReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.GiftConfigReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.GiftConfigReply.displayName = 'proto.pb.user.GiftConfigReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.AnchorListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.AnchorListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.AnchorListRequest.displayName = 'proto.pb.user.AnchorListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.AnchorListReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.AnchorListReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.AnchorListReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.AnchorListReply.displayName = 'proto.pb.user.AnchorListReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.AnchorInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.AnchorInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.AnchorInfoRequest.displayName = 'proto.pb.user.AnchorInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.AnchorIdsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.AnchorIdsReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.AnchorIdsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.AnchorIdsReply.displayName = 'proto.pb.user.AnchorIdsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.AnchorRelationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.AnchorRelationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.AnchorRelationRequest.displayName = 'proto.pb.user.AnchorRelationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.UserListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.UserListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.UserListRequest.displayName = 'proto.pb.user.UserListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.UserListReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.UserListReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.UserListReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.UserListReply.displayName = 'proto.pb.user.UserListReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.TransactionListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.TransactionListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.TransactionListRequest.displayName = 'proto.pb.user.TransactionListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.TransactionListReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.TransactionListReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.TransactionListReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.TransactionListReply.displayName = 'proto.pb.user.TransactionListReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.SearchAnchorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.SearchAnchorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.SearchAnchorRequest.displayName = 'proto.pb.user.SearchAnchorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.SearchAnchorReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.SearchAnchorReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.SearchAnchorReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.SearchAnchorReply.displayName = 'proto.pb.user.SearchAnchorReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.SendGiftRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.SendGiftRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.SendGiftRequest.displayName = 'proto.pb.user.SendGiftRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.BuyVipRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.BuyVipRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.BuyVipRequest.displayName = 'proto.pb.user.BuyVipRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.ReportViolationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.ReportViolationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.ReportViolationRequest.displayName = 'proto.pb.user.ReportViolationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.ReportUsageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.ReportUsageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.ReportUsageRequest.displayName = 'proto.pb.user.ReportUsageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.ReportUsageReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.ReportUsageReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.ReportUsageReply.displayName = 'proto.pb.user.ReportUsageReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.MakeCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.MakeCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.MakeCallRequest.displayName = 'proto.pb.user.MakeCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.MakeCallReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.MakeCallReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.MakeCallReply.displayName = 'proto.pb.user.MakeCallReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.FetchCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.FetchCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.FetchCallRequest.displayName = 'proto.pb.user.FetchCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.FetchCallReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.FetchCallReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.FetchCallReply.displayName = 'proto.pb.user.FetchCallReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.HangCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.HangCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.HangCallRequest.displayName = 'proto.pb.user.HangCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.HangCallReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.HangCallReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.HangCallReply.displayName = 'proto.pb.user.HangCallReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.UpdateCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.UpdateCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.UpdateCallRequest.displayName = 'proto.pb.user.UpdateCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.UpdateCallReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.UpdateCallReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.UpdateCallReply.displayName = 'proto.pb.user.UpdateCallReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.ReportCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.ReportCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.ReportCallRequest.displayName = 'proto.pb.user.ReportCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.BuyCommodityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.BuyCommodityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.BuyCommodityRequest.displayName = 'proto.pb.user.BuyCommodityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.BuyCommodityReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.BuyCommodityReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.BuyCommodityReply.displayName = 'proto.pb.user.BuyCommodityReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.PayListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.PayListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.PayListRequest.displayName = 'proto.pb.user.PayListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.PayListReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.PayListReply.repeatedFields_, null);
};
goog.inherits(proto.pb.user.PayListReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.PayListReply.displayName = 'proto.pb.user.PayListReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.VerifyPayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.VerifyPayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.VerifyPayRequest.displayName = 'proto.pb.user.VerifyPayRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.VerifyPayReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.VerifyPayReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.VerifyPayReply.displayName = 'proto.pb.user.VerifyPayReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.user.SaveMediaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.user.SaveMediaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.user.SaveMediaRequest.displayName = 'proto.pb.user.SaveMediaRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.AreaListReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.AreaListReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.AreaListReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.AreaListReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AreaListReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    areasList: jspb.Message.toObjectList(msg.getAreasList(),
    usertype_pb.Area.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.AreaListReply}
 */
proto.pb.user.AreaListReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.AreaListReply;
  return proto.pb.user.AreaListReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.AreaListReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.AreaListReply}
 */
proto.pb.user.AreaListReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new usertype_pb.Area;
      reader.readMessage(value,usertype_pb.Area.deserializeBinaryFromReader);
      msg.addAreas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.AreaListReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.AreaListReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.AreaListReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AreaListReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAreasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      usertype_pb.Area.serializeBinaryToWriter
    );
  }
};


/**
 * repeated pb.Area areas = 1;
 * @return {!Array<!proto.pb.Area>}
 */
proto.pb.user.AreaListReply.prototype.getAreasList = function() {
  return /** @type{!Array<!proto.pb.Area>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.Area, 1));
};


/**
 * @param {!Array<!proto.pb.Area>} value
 * @return {!proto.pb.user.AreaListReply} returns this
*/
proto.pb.user.AreaListReply.prototype.setAreasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.Area=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Area}
 */
proto.pb.user.AreaListReply.prototype.addAreas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.Area, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.AreaListReply} returns this
 */
proto.pb.user.AreaListReply.prototype.clearAreasList = function() {
  return this.setAreasList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.LoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceBrand: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceModel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    osVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    osType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    country: jspb.Message.getFieldWithDefault(msg, 6, ""),
    lang: jspb.Message.getFieldWithDefault(msg, 7, ""),
    authType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    authId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    authToken: jspb.Message.getFieldWithDefault(msg, 10, ""),
    nickname: jspb.Message.getFieldWithDefault(msg, 11, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 12, 0),
    avatar: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.LoginRequest}
 */
proto.pb.user.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.LoginRequest;
  return proto.pb.user.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.LoginRequest}
 */
proto.pb.user.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceBrand(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceModel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    case 5:
      var value = /** @type {!proto.pb.OsType} */ (reader.readEnum());
      msg.setOsType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    case 8:
      var value = /** @type {!proto.pb.AuthType} */ (reader.readEnum());
      msg.setAuthType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthToken(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 12:
      var value = /** @type {!proto.pb.GenderType} */ (reader.readEnum());
      msg.setGender(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceBrand();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceModel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOsVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOsType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLang();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAuthType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getAuthId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getGender();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_brand = 2;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getDeviceBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setDeviceBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_model = 3;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getDeviceModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setDeviceModel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string os_version = 4;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setOsVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional pb.OsType os_type = 5;
 * @return {!proto.pb.OsType}
 */
proto.pb.user.LoginRequest.prototype.getOsType = function() {
  return /** @type {!proto.pb.OsType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.pb.OsType} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setOsType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string lang = 7;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setLang = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional pb.AuthType auth_type = 8;
 * @return {!proto.pb.AuthType}
 */
proto.pb.user.LoginRequest.prototype.getAuthType = function() {
  return /** @type {!proto.pb.AuthType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.pb.AuthType} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setAuthType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string auth_id = 9;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getAuthId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setAuthId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string auth_token = 10;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getAuthToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setAuthToken = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string nickname = 11;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional pb.GenderType gender = 12;
 * @return {!proto.pb.GenderType}
 */
proto.pb.user.LoginRequest.prototype.getGender = function() {
  return /** @type {!proto.pb.GenderType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.pb.GenderType} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setGender = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional string avatar = 13;
 * @return {string}
 */
proto.pb.user.LoginRequest.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.LoginRequest} returns this
 */
proto.pb.user.LoginRequest.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.CheckinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.CheckinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.CheckinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.CheckinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    continuousDays: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.CheckinRequest}
 */
proto.pb.user.CheckinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.CheckinRequest;
  return proto.pb.user.CheckinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.CheckinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.CheckinRequest}
 */
proto.pb.user.CheckinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContinuousDays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.CheckinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.CheckinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.CheckinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.CheckinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContinuousDays();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 continuous_days = 1;
 * @return {number}
 */
proto.pb.user.CheckinRequest.prototype.getContinuousDays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.CheckinRequest} returns this
 */
proto.pb.user.CheckinRequest.prototype.setContinuousDays = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.ConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.ConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.ConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    deviceId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    networkType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    version: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.ConfigRequest}
 */
proto.pb.user.ConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.ConfigRequest;
  return proto.pb.user.ConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.ConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.ConfigRequest}
 */
proto.pb.user.ConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 4:
      var value = /** @type {!proto.pb.NetworkType} */ (reader.readEnum());
      msg.setNetworkType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.ConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.ConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.ConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional float longitude = 1;
 * @return {number}
 */
proto.pb.user.ConfigRequest.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ConfigRequest} returns this
 */
proto.pb.user.ConfigRequest.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float latitude = 2;
 * @return {number}
 */
proto.pb.user.ConfigRequest.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ConfigRequest} returns this
 */
proto.pb.user.ConfigRequest.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string device_id = 3;
 * @return {string}
 */
proto.pb.user.ConfigRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.ConfigRequest} returns this
 */
proto.pb.user.ConfigRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional pb.NetworkType network_type = 4;
 * @return {!proto.pb.NetworkType}
 */
proto.pb.user.ConfigRequest.prototype.getNetworkType = function() {
  return /** @type {!proto.pb.NetworkType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.pb.NetworkType} value
 * @return {!proto.pb.user.ConfigRequest} returns this
 */
proto.pb.user.ConfigRequest.prototype.setNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 version = 5;
 * @return {number}
 */
proto.pb.user.ConfigRequest.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ConfigRequest} returns this
 */
proto.pb.user.ConfigRequest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.ConfigReply.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.ConfigReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.ConfigReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.ConfigReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ConfigReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    checkinConfigsList: jspb.Message.toObjectList(msg.getCheckinConfigsList(),
    usertype_pb.CheckinConfig.toObject, includeInstance),
    giftConfigsList: jspb.Message.toObjectList(msg.getGiftConfigsList(),
    usertype_pb.GiftConfig.toObject, includeInstance),
    vipConfigsList: jspb.Message.toObjectList(msg.getVipConfigsList(),
    usertype_pb.VipConfig.toObject, includeInstance),
    bannerConfigsList: jspb.Message.toObjectList(msg.getBannerConfigsList(),
    usertype_pb.BannerConfig.toObject, includeInstance),
    freeMessageCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    agoraAppId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    rcAppKey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    showUpgrade: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    forceUpgrade: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    upgradeUrl: jspb.Message.getFieldWithDefault(msg, 10, ""),
    upgradeTip: jspb.Message.getFieldWithDefault(msg, 11, ""),
    heartbeatInterval: jspb.Message.getFieldWithDefault(msg, 12, 0),
    dndPeriod: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.ConfigReply}
 */
proto.pb.user.ConfigReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.ConfigReply;
  return proto.pb.user.ConfigReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.ConfigReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.ConfigReply}
 */
proto.pb.user.ConfigReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new usertype_pb.CheckinConfig;
      reader.readMessage(value,usertype_pb.CheckinConfig.deserializeBinaryFromReader);
      msg.addCheckinConfigs(value);
      break;
    case 2:
      var value = new usertype_pb.GiftConfig;
      reader.readMessage(value,usertype_pb.GiftConfig.deserializeBinaryFromReader);
      msg.addGiftConfigs(value);
      break;
    case 3:
      var value = new usertype_pb.VipConfig;
      reader.readMessage(value,usertype_pb.VipConfig.deserializeBinaryFromReader);
      msg.addVipConfigs(value);
      break;
    case 4:
      var value = new usertype_pb.BannerConfig;
      reader.readMessage(value,usertype_pb.BannerConfig.deserializeBinaryFromReader);
      msg.addBannerConfigs(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFreeMessageCount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgoraAppId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRcAppKey(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowUpgrade(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceUpgrade(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpgradeUrl(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpgradeTip(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeartbeatInterval(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDndPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.ConfigReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.ConfigReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.ConfigReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ConfigReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCheckinConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      usertype_pb.CheckinConfig.serializeBinaryToWriter
    );
  }
  f = message.getGiftConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      usertype_pb.GiftConfig.serializeBinaryToWriter
    );
  }
  f = message.getVipConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      usertype_pb.VipConfig.serializeBinaryToWriter
    );
  }
  f = message.getBannerConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      usertype_pb.BannerConfig.serializeBinaryToWriter
    );
  }
  f = message.getFreeMessageCount();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getAgoraAppId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRcAppKey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getShowUpgrade();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getForceUpgrade();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getUpgradeUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getUpgradeTip();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getHeartbeatInterval();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getDndPeriod();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
};


/**
 * repeated pb.CheckinConfig checkin_configs = 1;
 * @return {!Array<!proto.pb.CheckinConfig>}
 */
proto.pb.user.ConfigReply.prototype.getCheckinConfigsList = function() {
  return /** @type{!Array<!proto.pb.CheckinConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.CheckinConfig, 1));
};


/**
 * @param {!Array<!proto.pb.CheckinConfig>} value
 * @return {!proto.pb.user.ConfigReply} returns this
*/
proto.pb.user.ConfigReply.prototype.setCheckinConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.CheckinConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.CheckinConfig}
 */
proto.pb.user.ConfigReply.prototype.addCheckinConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.CheckinConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.clearCheckinConfigsList = function() {
  return this.setCheckinConfigsList([]);
};


/**
 * repeated pb.GiftConfig gift_configs = 2;
 * @return {!Array<!proto.pb.GiftConfig>}
 */
proto.pb.user.ConfigReply.prototype.getGiftConfigsList = function() {
  return /** @type{!Array<!proto.pb.GiftConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.GiftConfig, 2));
};


/**
 * @param {!Array<!proto.pb.GiftConfig>} value
 * @return {!proto.pb.user.ConfigReply} returns this
*/
proto.pb.user.ConfigReply.prototype.setGiftConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.GiftConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.GiftConfig}
 */
proto.pb.user.ConfigReply.prototype.addGiftConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.GiftConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.clearGiftConfigsList = function() {
  return this.setGiftConfigsList([]);
};


/**
 * repeated pb.VipConfig vip_configs = 3;
 * @return {!Array<!proto.pb.VipConfig>}
 */
proto.pb.user.ConfigReply.prototype.getVipConfigsList = function() {
  return /** @type{!Array<!proto.pb.VipConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.VipConfig, 3));
};


/**
 * @param {!Array<!proto.pb.VipConfig>} value
 * @return {!proto.pb.user.ConfigReply} returns this
*/
proto.pb.user.ConfigReply.prototype.setVipConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pb.VipConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.VipConfig}
 */
proto.pb.user.ConfigReply.prototype.addVipConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pb.VipConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.clearVipConfigsList = function() {
  return this.setVipConfigsList([]);
};


/**
 * repeated pb.BannerConfig banner_configs = 4;
 * @return {!Array<!proto.pb.BannerConfig>}
 */
proto.pb.user.ConfigReply.prototype.getBannerConfigsList = function() {
  return /** @type{!Array<!proto.pb.BannerConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.BannerConfig, 4));
};


/**
 * @param {!Array<!proto.pb.BannerConfig>} value
 * @return {!proto.pb.user.ConfigReply} returns this
*/
proto.pb.user.ConfigReply.prototype.setBannerConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.BannerConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.BannerConfig}
 */
proto.pb.user.ConfigReply.prototype.addBannerConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.BannerConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.clearBannerConfigsList = function() {
  return this.setBannerConfigsList([]);
};


/**
 * optional uint32 free_message_count = 5;
 * @return {number}
 */
proto.pb.user.ConfigReply.prototype.getFreeMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.setFreeMessageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string agora_app_id = 6;
 * @return {string}
 */
proto.pb.user.ConfigReply.prototype.getAgoraAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.setAgoraAppId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string rc_app_key = 7;
 * @return {string}
 */
proto.pb.user.ConfigReply.prototype.getRcAppKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.setRcAppKey = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool show_upgrade = 8;
 * @return {boolean}
 */
proto.pb.user.ConfigReply.prototype.getShowUpgrade = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.setShowUpgrade = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool force_upgrade = 9;
 * @return {boolean}
 */
proto.pb.user.ConfigReply.prototype.getForceUpgrade = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.setForceUpgrade = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string upgrade_url = 10;
 * @return {string}
 */
proto.pb.user.ConfigReply.prototype.getUpgradeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.setUpgradeUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string upgrade_tip = 11;
 * @return {string}
 */
proto.pb.user.ConfigReply.prototype.getUpgradeTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.setUpgradeTip = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional uint32 heartbeat_interval = 12;
 * @return {number}
 */
proto.pb.user.ConfigReply.prototype.getHeartbeatInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.setHeartbeatInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint32 dnd_period = 13;
 * @return {number}
 */
proto.pb.user.ConfigReply.prototype.getDndPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ConfigReply} returns this
 */
proto.pb.user.ConfigReply.prototype.setDndPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.PayChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.PayChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.PayChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.PayChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 2, ""),
    getAll: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    subscription: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.PayChannelRequest}
 */
proto.pb.user.PayChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.PayChannelRequest;
  return proto.pb.user.PayChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.PayChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.PayChannelRequest}
 */
proto.pb.user.PayChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGetAll(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.PayChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.PayChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.PayChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.PayChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGetAll();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSubscription();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string country = 1;
 * @return {string}
 */
proto.pb.user.PayChannelRequest.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.PayChannelRequest} returns this
 */
proto.pb.user.PayChannelRequest.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string currency = 2;
 * @return {string}
 */
proto.pb.user.PayChannelRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.PayChannelRequest} returns this
 */
proto.pb.user.PayChannelRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool get_all = 10;
 * @return {boolean}
 */
proto.pb.user.PayChannelRequest.prototype.getGetAll = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.user.PayChannelRequest} returns this
 */
proto.pb.user.PayChannelRequest.prototype.setGetAll = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool subscription = 11;
 * @return {boolean}
 */
proto.pb.user.PayChannelRequest.prototype.getSubscription = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.user.PayChannelRequest} returns this
 */
proto.pb.user.PayChannelRequest.prototype.setSubscription = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.PayChannelReply.repeatedFields_ = [1,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.PayChannelReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.PayChannelReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.PayChannelReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.PayChannelReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    payChannelsList: jspb.Message.toObjectList(msg.getPayChannelsList(),
    usertype_pb.PayChannel.toObject, includeInstance),
    countryConfigsList: jspb.Message.toObjectList(msg.getCountryConfigsList(),
    usertype_pb.CountryConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.PayChannelReply}
 */
proto.pb.user.PayChannelReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.PayChannelReply;
  return proto.pb.user.PayChannelReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.PayChannelReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.PayChannelReply}
 */
proto.pb.user.PayChannelReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new usertype_pb.PayChannel;
      reader.readMessage(value,usertype_pb.PayChannel.deserializeBinaryFromReader);
      msg.addPayChannels(value);
      break;
    case 10:
      var value = new usertype_pb.CountryConfig;
      reader.readMessage(value,usertype_pb.CountryConfig.deserializeBinaryFromReader);
      msg.addCountryConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.PayChannelReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.PayChannelReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.PayChannelReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.PayChannelReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      usertype_pb.PayChannel.serializeBinaryToWriter
    );
  }
  f = message.getCountryConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      usertype_pb.CountryConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated pb.PayChannel pay_channels = 1;
 * @return {!Array<!proto.pb.PayChannel>}
 */
proto.pb.user.PayChannelReply.prototype.getPayChannelsList = function() {
  return /** @type{!Array<!proto.pb.PayChannel>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.PayChannel, 1));
};


/**
 * @param {!Array<!proto.pb.PayChannel>} value
 * @return {!proto.pb.user.PayChannelReply} returns this
*/
proto.pb.user.PayChannelReply.prototype.setPayChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.PayChannel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.PayChannel}
 */
proto.pb.user.PayChannelReply.prototype.addPayChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.PayChannel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.PayChannelReply} returns this
 */
proto.pb.user.PayChannelReply.prototype.clearPayChannelsList = function() {
  return this.setPayChannelsList([]);
};


/**
 * repeated pb.CountryConfig country_configs = 10;
 * @return {!Array<!proto.pb.CountryConfig>}
 */
proto.pb.user.PayChannelReply.prototype.getCountryConfigsList = function() {
  return /** @type{!Array<!proto.pb.CountryConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.CountryConfig, 10));
};


/**
 * @param {!Array<!proto.pb.CountryConfig>} value
 * @return {!proto.pb.user.PayChannelReply} returns this
*/
proto.pb.user.PayChannelReply.prototype.setCountryConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pb.CountryConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.CountryConfig}
 */
proto.pb.user.PayChannelReply.prototype.addCountryConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pb.CountryConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.PayChannelReply} returns this
 */
proto.pb.user.PayChannelReply.prototype.clearCountryConfigsList = function() {
  return this.setCountryConfigsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.GiftConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.GiftConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.GiftConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.GiftConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lang: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.GiftConfigRequest}
 */
proto.pb.user.GiftConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.GiftConfigRequest;
  return proto.pb.user.GiftConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.GiftConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.GiftConfigRequest}
 */
proto.pb.user.GiftConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.GiftConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.GiftConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.GiftConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.GiftConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLang();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string lang = 1;
 * @return {string}
 */
proto.pb.user.GiftConfigRequest.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.GiftConfigRequest} returns this
 */
proto.pb.user.GiftConfigRequest.prototype.setLang = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.GiftConfigReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.GiftConfigReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.GiftConfigReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.GiftConfigReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.GiftConfigReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    giftConfigsList: jspb.Message.toObjectList(msg.getGiftConfigsList(),
    usertype_pb.GiftConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.GiftConfigReply}
 */
proto.pb.user.GiftConfigReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.GiftConfigReply;
  return proto.pb.user.GiftConfigReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.GiftConfigReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.GiftConfigReply}
 */
proto.pb.user.GiftConfigReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new usertype_pb.GiftConfig;
      reader.readMessage(value,usertype_pb.GiftConfig.deserializeBinaryFromReader);
      msg.addGiftConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.GiftConfigReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.GiftConfigReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.GiftConfigReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.GiftConfigReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGiftConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      usertype_pb.GiftConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated pb.GiftConfig gift_configs = 1;
 * @return {!Array<!proto.pb.GiftConfig>}
 */
proto.pb.user.GiftConfigReply.prototype.getGiftConfigsList = function() {
  return /** @type{!Array<!proto.pb.GiftConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.GiftConfig, 1));
};


/**
 * @param {!Array<!proto.pb.GiftConfig>} value
 * @return {!proto.pb.user.GiftConfigReply} returns this
*/
proto.pb.user.GiftConfigReply.prototype.setGiftConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.GiftConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.GiftConfig}
 */
proto.pb.user.GiftConfigReply.prototype.addGiftConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.GiftConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.GiftConfigReply} returns this
 */
proto.pb.user.GiftConfigReply.prototype.clearGiftConfigsList = function() {
  return this.setGiftConfigsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.AnchorListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.AnchorListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.AnchorListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cursor: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.AnchorListRequest}
 */
proto.pb.user.AnchorListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.AnchorListRequest;
  return proto.pb.user.AnchorListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.AnchorListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.AnchorListRequest}
 */
proto.pb.user.AnchorListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.user.AnchorListType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.AnchorListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.AnchorListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.AnchorListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional AnchorListType type = 1;
 * @return {!proto.pb.user.AnchorListType}
 */
proto.pb.user.AnchorListRequest.prototype.getType = function() {
  return /** @type {!proto.pb.user.AnchorListType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.user.AnchorListType} value
 * @return {!proto.pb.user.AnchorListRequest} returns this
 */
proto.pb.user.AnchorListRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.pb.user.AnchorListRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.AnchorListRequest} returns this
 */
proto.pb.user.AnchorListRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string cursor = 3;
 * @return {string}
 */
proto.pb.user.AnchorListRequest.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.AnchorListRequest} returns this
 */
proto.pb.user.AnchorListRequest.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.AnchorListReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.AnchorListReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.AnchorListReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.AnchorListReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorListReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorsList: jspb.Message.toObjectList(msg.getAnchorsList(),
    usertype_pb.AnchorInfo.toObject, includeInstance),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.AnchorListReply}
 */
proto.pb.user.AnchorListReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.AnchorListReply;
  return proto.pb.user.AnchorListReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.AnchorListReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.AnchorListReply}
 */
proto.pb.user.AnchorListReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new usertype_pb.AnchorInfo;
      reader.readMessage(value,usertype_pb.AnchorInfo.deserializeBinaryFromReader);
      msg.addAnchors(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.AnchorListReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.AnchorListReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.AnchorListReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorListReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      usertype_pb.AnchorInfo.serializeBinaryToWriter
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHasMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated pb.AnchorInfo anchors = 1;
 * @return {!Array<!proto.pb.AnchorInfo>}
 */
proto.pb.user.AnchorListReply.prototype.getAnchorsList = function() {
  return /** @type{!Array<!proto.pb.AnchorInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.AnchorInfo, 1));
};


/**
 * @param {!Array<!proto.pb.AnchorInfo>} value
 * @return {!proto.pb.user.AnchorListReply} returns this
*/
proto.pb.user.AnchorListReply.prototype.setAnchorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.AnchorInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.AnchorInfo}
 */
proto.pb.user.AnchorListReply.prototype.addAnchors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.AnchorInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.AnchorListReply} returns this
 */
proto.pb.user.AnchorListReply.prototype.clearAnchorsList = function() {
  return this.setAnchorsList([]);
};


/**
 * optional string cursor = 2;
 * @return {string}
 */
proto.pb.user.AnchorListReply.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.AnchorListReply} returns this
 */
proto.pb.user.AnchorListReply.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool has_more = 3;
 * @return {boolean}
 */
proto.pb.user.AnchorListReply.prototype.getHasMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.user.AnchorListReply} returns this
 */
proto.pb.user.AnchorListReply.prototype.setHasMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.AnchorInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.AnchorInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.AnchorInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.AnchorInfoRequest}
 */
proto.pb.user.AnchorInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.AnchorInfoRequest;
  return proto.pb.user.AnchorInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.AnchorInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.AnchorInfoRequest}
 */
proto.pb.user.AnchorInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnchorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.AnchorInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.AnchorInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.AnchorInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchorId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 anchor_id = 1;
 * @return {number}
 */
proto.pb.user.AnchorInfoRequest.prototype.getAnchorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.AnchorInfoRequest} returns this
 */
proto.pb.user.AnchorInfoRequest.prototype.setAnchorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.AnchorIdsReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.AnchorIdsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.AnchorIdsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.AnchorIdsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorIdsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    followIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    blockIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.AnchorIdsReply}
 */
proto.pb.user.AnchorIdsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.AnchorIdsReply;
  return proto.pb.user.AnchorIdsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.AnchorIdsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.AnchorIdsReply}
 */
proto.pb.user.AnchorIdsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFollowIds(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBlockIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.AnchorIdsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.AnchorIdsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.AnchorIdsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorIdsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFollowIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getBlockIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * repeated uint32 follow_ids = 1;
 * @return {!Array<number>}
 */
proto.pb.user.AnchorIdsReply.prototype.getFollowIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pb.user.AnchorIdsReply} returns this
 */
proto.pb.user.AnchorIdsReply.prototype.setFollowIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pb.user.AnchorIdsReply} returns this
 */
proto.pb.user.AnchorIdsReply.prototype.addFollowIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.AnchorIdsReply} returns this
 */
proto.pb.user.AnchorIdsReply.prototype.clearFollowIdsList = function() {
  return this.setFollowIdsList([]);
};


/**
 * repeated uint32 block_ids = 2;
 * @return {!Array<number>}
 */
proto.pb.user.AnchorIdsReply.prototype.getBlockIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pb.user.AnchorIdsReply} returns this
 */
proto.pb.user.AnchorIdsReply.prototype.setBlockIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pb.user.AnchorIdsReply} returns this
 */
proto.pb.user.AnchorIdsReply.prototype.addBlockIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.AnchorIdsReply} returns this
 */
proto.pb.user.AnchorIdsReply.prototype.clearBlockIdsList = function() {
  return this.setBlockIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.AnchorRelationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.AnchorRelationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.AnchorRelationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorRelationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    anchorId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.AnchorRelationRequest}
 */
proto.pb.user.AnchorRelationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.AnchorRelationRequest;
  return proto.pb.user.AnchorRelationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.AnchorRelationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.AnchorRelationRequest}
 */
proto.pb.user.AnchorRelationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.user.RelationOpType} */ (reader.readEnum());
      msg.setOpType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnchorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.AnchorRelationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.AnchorRelationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.AnchorRelationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.AnchorRelationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAnchorId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional RelationOpType op_type = 1;
 * @return {!proto.pb.user.RelationOpType}
 */
proto.pb.user.AnchorRelationRequest.prototype.getOpType = function() {
  return /** @type {!proto.pb.user.RelationOpType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.user.RelationOpType} value
 * @return {!proto.pb.user.AnchorRelationRequest} returns this
 */
proto.pb.user.AnchorRelationRequest.prototype.setOpType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 anchor_id = 2;
 * @return {number}
 */
proto.pb.user.AnchorRelationRequest.prototype.getAnchorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.AnchorRelationRequest} returns this
 */
proto.pb.user.AnchorRelationRequest.prototype.setAnchorId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.UserListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.UserListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.UserListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.UserListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    anchorId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cursor: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.UserListRequest}
 */
proto.pb.user.UserListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.UserListRequest;
  return proto.pb.user.UserListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.UserListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.UserListRequest}
 */
proto.pb.user.UserListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.user.UserListType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnchorId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.UserListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.UserListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.UserListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.UserListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAnchorId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional UserListType type = 1;
 * @return {!proto.pb.user.UserListType}
 */
proto.pb.user.UserListRequest.prototype.getType = function() {
  return /** @type {!proto.pb.user.UserListType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.user.UserListType} value
 * @return {!proto.pb.user.UserListRequest} returns this
 */
proto.pb.user.UserListRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 anchor_id = 2;
 * @return {number}
 */
proto.pb.user.UserListRequest.prototype.getAnchorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.UserListRequest} returns this
 */
proto.pb.user.UserListRequest.prototype.setAnchorId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 count = 3;
 * @return {number}
 */
proto.pb.user.UserListRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.UserListRequest} returns this
 */
proto.pb.user.UserListRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string cursor = 4;
 * @return {string}
 */
proto.pb.user.UserListRequest.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.UserListRequest} returns this
 */
proto.pb.user.UserListRequest.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.UserListReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.UserListReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.UserListReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.UserListReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.UserListReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    usertype_pb.User.toObject, includeInstance),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.UserListReply}
 */
proto.pb.user.UserListReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.UserListReply;
  return proto.pb.user.UserListReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.UserListReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.UserListReply}
 */
proto.pb.user.UserListReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new usertype_pb.User;
      reader.readMessage(value,usertype_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.UserListReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.UserListReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.UserListReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.UserListReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      usertype_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHasMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated pb.User users = 1;
 * @return {!Array<!proto.pb.User>}
 */
proto.pb.user.UserListReply.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.pb.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.User, 1));
};


/**
 * @param {!Array<!proto.pb.User>} value
 * @return {!proto.pb.user.UserListReply} returns this
*/
proto.pb.user.UserListReply.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.User}
 */
proto.pb.user.UserListReply.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.UserListReply} returns this
 */
proto.pb.user.UserListReply.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * optional string cursor = 2;
 * @return {string}
 */
proto.pb.user.UserListReply.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.UserListReply} returns this
 */
proto.pb.user.UserListReply.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool has_more = 3;
 * @return {boolean}
 */
proto.pb.user.UserListReply.prototype.getHasMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.user.UserListReply} returns this
 */
proto.pb.user.UserListReply.prototype.setHasMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.TransactionListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.TransactionListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.TransactionListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.TransactionListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.TransactionListRequest}
 */
proto.pb.user.TransactionListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.TransactionListRequest;
  return proto.pb.user.TransactionListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.TransactionListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.TransactionListRequest}
 */
proto.pb.user.TransactionListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.TransactionListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.TransactionListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.TransactionListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.TransactionListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 count = 1;
 * @return {number}
 */
proto.pb.user.TransactionListRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.TransactionListRequest} returns this
 */
proto.pb.user.TransactionListRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string cursor = 2;
 * @return {string}
 */
proto.pb.user.TransactionListRequest.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.TransactionListRequest} returns this
 */
proto.pb.user.TransactionListRequest.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.TransactionListReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.TransactionListReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.TransactionListReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.TransactionListReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.TransactionListReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    transList: jspb.Message.toObjectList(msg.getTransList(),
    usertype_pb.Transaction.toObject, includeInstance),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.TransactionListReply}
 */
proto.pb.user.TransactionListReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.TransactionListReply;
  return proto.pb.user.TransactionListReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.TransactionListReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.TransactionListReply}
 */
proto.pb.user.TransactionListReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new usertype_pb.Transaction;
      reader.readMessage(value,usertype_pb.Transaction.deserializeBinaryFromReader);
      msg.addTrans(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.TransactionListReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.TransactionListReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.TransactionListReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.TransactionListReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      usertype_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHasMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated pb.Transaction trans = 1;
 * @return {!Array<!proto.pb.Transaction>}
 */
proto.pb.user.TransactionListReply.prototype.getTransList = function() {
  return /** @type{!Array<!proto.pb.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.Transaction, 1));
};


/**
 * @param {!Array<!proto.pb.Transaction>} value
 * @return {!proto.pb.user.TransactionListReply} returns this
*/
proto.pb.user.TransactionListReply.prototype.setTransList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Transaction}
 */
proto.pb.user.TransactionListReply.prototype.addTrans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.TransactionListReply} returns this
 */
proto.pb.user.TransactionListReply.prototype.clearTransList = function() {
  return this.setTransList([]);
};


/**
 * optional string cursor = 2;
 * @return {string}
 */
proto.pb.user.TransactionListReply.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.TransactionListReply} returns this
 */
proto.pb.user.TransactionListReply.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool has_more = 3;
 * @return {boolean}
 */
proto.pb.user.TransactionListReply.prototype.getHasMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.user.TransactionListReply} returns this
 */
proto.pb.user.TransactionListReply.prototype.setHasMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.SearchAnchorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.SearchAnchorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.SearchAnchorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.SearchAnchorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyword: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.SearchAnchorRequest}
 */
proto.pb.user.SearchAnchorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.SearchAnchorRequest;
  return proto.pb.user.SearchAnchorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.SearchAnchorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.SearchAnchorRequest}
 */
proto.pb.user.SearchAnchorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.SearchAnchorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.SearchAnchorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.SearchAnchorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.SearchAnchorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string keyword = 1;
 * @return {string}
 */
proto.pb.user.SearchAnchorRequest.prototype.getKeyword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.SearchAnchorRequest} returns this
 */
proto.pb.user.SearchAnchorRequest.prototype.setKeyword = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.SearchAnchorReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.SearchAnchorReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.SearchAnchorReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.SearchAnchorReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.SearchAnchorReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorsList: jspb.Message.toObjectList(msg.getAnchorsList(),
    usertype_pb.AnchorInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.SearchAnchorReply}
 */
proto.pb.user.SearchAnchorReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.SearchAnchorReply;
  return proto.pb.user.SearchAnchorReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.SearchAnchorReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.SearchAnchorReply}
 */
proto.pb.user.SearchAnchorReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new usertype_pb.AnchorInfo;
      reader.readMessage(value,usertype_pb.AnchorInfo.deserializeBinaryFromReader);
      msg.addAnchors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.SearchAnchorReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.SearchAnchorReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.SearchAnchorReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.SearchAnchorReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      usertype_pb.AnchorInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated pb.AnchorInfo anchors = 1;
 * @return {!Array<!proto.pb.AnchorInfo>}
 */
proto.pb.user.SearchAnchorReply.prototype.getAnchorsList = function() {
  return /** @type{!Array<!proto.pb.AnchorInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.AnchorInfo, 1));
};


/**
 * @param {!Array<!proto.pb.AnchorInfo>} value
 * @return {!proto.pb.user.SearchAnchorReply} returns this
*/
proto.pb.user.SearchAnchorReply.prototype.setAnchorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.AnchorInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.AnchorInfo}
 */
proto.pb.user.SearchAnchorReply.prototype.addAnchors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.AnchorInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.SearchAnchorReply} returns this
 */
proto.pb.user.SearchAnchorReply.prototype.clearAnchorsList = function() {
  return this.setAnchorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.SendGiftRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.SendGiftRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.SendGiftRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.SendGiftRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    giftId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    anchorId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    callId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.SendGiftRequest}
 */
proto.pb.user.SendGiftRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.SendGiftRequest;
  return proto.pb.user.SendGiftRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.SendGiftRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.SendGiftRequest}
 */
proto.pb.user.SendGiftRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGiftId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnchorId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.SendGiftRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.SendGiftRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.SendGiftRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.SendGiftRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGiftId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAnchorId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCallId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint32 gift_id = 1;
 * @return {number}
 */
proto.pb.user.SendGiftRequest.prototype.getGiftId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.SendGiftRequest} returns this
 */
proto.pb.user.SendGiftRequest.prototype.setGiftId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 quantity = 2;
 * @return {number}
 */
proto.pb.user.SendGiftRequest.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.SendGiftRequest} returns this
 */
proto.pb.user.SendGiftRequest.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 anchor_id = 3;
 * @return {number}
 */
proto.pb.user.SendGiftRequest.prototype.getAnchorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.SendGiftRequest} returns this
 */
proto.pb.user.SendGiftRequest.prototype.setAnchorId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 call_id = 4;
 * @return {number}
 */
proto.pb.user.SendGiftRequest.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.SendGiftRequest} returns this
 */
proto.pb.user.SendGiftRequest.prototype.setCallId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.BuyVipRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.BuyVipRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.BuyVipRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.BuyVipRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    vipId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.BuyVipRequest}
 */
proto.pb.user.BuyVipRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.BuyVipRequest;
  return proto.pb.user.BuyVipRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.BuyVipRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.BuyVipRequest}
 */
proto.pb.user.BuyVipRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.BuyVipRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.BuyVipRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.BuyVipRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.BuyVipRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVipId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 vip_id = 1;
 * @return {number}
 */
proto.pb.user.BuyVipRequest.prototype.getVipId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.BuyVipRequest} returns this
 */
proto.pb.user.BuyVipRequest.prototype.setVipId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.ReportViolationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.ReportViolationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.ReportViolationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ReportViolationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.ReportViolationRequest}
 */
proto.pb.user.ReportViolationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.ReportViolationRequest;
  return proto.pb.user.ReportViolationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.ReportViolationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.ReportViolationRequest}
 */
proto.pb.user.ReportViolationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnchorId(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.ViolationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.ReportViolationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.ReportViolationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.ReportViolationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ReportViolationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchorId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 anchor_id = 1;
 * @return {number}
 */
proto.pb.user.ReportViolationRequest.prototype.getAnchorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ReportViolationRequest} returns this
 */
proto.pb.user.ReportViolationRequest.prototype.setAnchorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional pb.ViolationType type = 2;
 * @return {!proto.pb.ViolationType}
 */
proto.pb.user.ReportViolationRequest.prototype.getType = function() {
  return /** @type {!proto.pb.ViolationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.ViolationType} value
 * @return {!proto.pb.user.ReportViolationRequest} returns this
 */
proto.pb.user.ReportViolationRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.pb.user.ReportViolationRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.ReportViolationRequest} returns this
 */
proto.pb.user.ReportViolationRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.ReportUsageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.ReportUsageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.ReportUsageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ReportUsageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageCount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.ReportUsageRequest}
 */
proto.pb.user.ReportUsageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.ReportUsageRequest;
  return proto.pb.user.ReportUsageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.ReportUsageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.ReportUsageRequest}
 */
proto.pb.user.ReportUsageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessageCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.ReportUsageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.ReportUsageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.ReportUsageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ReportUsageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 message_count = 1;
 * @return {number}
 */
proto.pb.user.ReportUsageRequest.prototype.getMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ReportUsageRequest} returns this
 */
proto.pb.user.ReportUsageRequest.prototype.setMessageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.ReportUsageReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.ReportUsageReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.ReportUsageReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ReportUsageReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageQuota: jspb.Message.getFieldWithDefault(msg, 1, 0),
    messageUsed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.ReportUsageReply}
 */
proto.pb.user.ReportUsageReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.ReportUsageReply;
  return proto.pb.user.ReportUsageReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.ReportUsageReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.ReportUsageReply}
 */
proto.pb.user.ReportUsageReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessageQuota(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessageUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.ReportUsageReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.ReportUsageReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.ReportUsageReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ReportUsageReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageQuota();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMessageUsed();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 message_quota = 1;
 * @return {number}
 */
proto.pb.user.ReportUsageReply.prototype.getMessageQuota = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ReportUsageReply} returns this
 */
proto.pb.user.ReportUsageReply.prototype.setMessageQuota = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 message_used = 2;
 * @return {number}
 */
proto.pb.user.ReportUsageReply.prototype.getMessageUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ReportUsageReply} returns this
 */
proto.pb.user.ReportUsageReply.prototype.setMessageUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.MakeCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.MakeCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.MakeCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.MakeCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    callType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.MakeCallRequest}
 */
proto.pb.user.MakeCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.MakeCallRequest;
  return proto.pb.user.MakeCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.MakeCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.MakeCallRequest}
 */
proto.pb.user.MakeCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnchorId(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.CallType} */ (reader.readEnum());
      msg.setCallType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.MakeCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.MakeCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.MakeCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.MakeCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchorId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCallType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 anchor_id = 1;
 * @return {number}
 */
proto.pb.user.MakeCallRequest.prototype.getAnchorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.MakeCallRequest} returns this
 */
proto.pb.user.MakeCallRequest.prototype.setAnchorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional pb.CallType call_type = 2;
 * @return {!proto.pb.CallType}
 */
proto.pb.user.MakeCallRequest.prototype.getCallType = function() {
  return /** @type {!proto.pb.CallType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.CallType} value
 * @return {!proto.pb.user.MakeCallRequest} returns this
 */
proto.pb.user.MakeCallRequest.prototype.setCallType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.MakeCallReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.MakeCallReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.MakeCallReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.MakeCallReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, 0),
    callerToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    calleeToken: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.MakeCallReply}
 */
proto.pb.user.MakeCallReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.MakeCallReply;
  return proto.pb.user.MakeCallReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.MakeCallReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.MakeCallReply}
 */
proto.pb.user.MakeCallReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallerToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalleeToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.MakeCallReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.MakeCallReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.MakeCallReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.MakeCallReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCallerToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCalleeToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 call_id = 1;
 * @return {number}
 */
proto.pb.user.MakeCallReply.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.MakeCallReply} returns this
 */
proto.pb.user.MakeCallReply.prototype.setCallId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 price = 2;
 * @return {number}
 */
proto.pb.user.MakeCallReply.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.MakeCallReply} returns this
 */
proto.pb.user.MakeCallReply.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string caller_token = 3;
 * @return {string}
 */
proto.pb.user.MakeCallReply.prototype.getCallerToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.MakeCallReply} returns this
 */
proto.pb.user.MakeCallReply.prototype.setCallerToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string callee_token = 4;
 * @return {string}
 */
proto.pb.user.MakeCallReply.prototype.getCalleeToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.MakeCallReply} returns this
 */
proto.pb.user.MakeCallReply.prototype.setCalleeToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.FetchCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.FetchCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.FetchCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.FetchCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.FetchCallRequest}
 */
proto.pb.user.FetchCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.FetchCallRequest;
  return proto.pb.user.FetchCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.FetchCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.FetchCallRequest}
 */
proto.pb.user.FetchCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.FetchCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.FetchCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.FetchCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.FetchCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 call_id = 1;
 * @return {number}
 */
proto.pb.user.FetchCallRequest.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.FetchCallRequest} returns this
 */
proto.pb.user.FetchCallRequest.prototype.setCallId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.FetchCallReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.FetchCallReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.FetchCallReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.FetchCallReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    rtcToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.FetchCallReply}
 */
proto.pb.user.FetchCallReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.FetchCallReply;
  return proto.pb.user.FetchCallReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.FetchCallReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.FetchCallReply}
 */
proto.pb.user.FetchCallReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRtcToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.FetchCallReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.FetchCallReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.FetchCallReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.FetchCallReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRtcToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string rtc_token = 1;
 * @return {string}
 */
proto.pb.user.FetchCallReply.prototype.getRtcToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.FetchCallReply} returns this
 */
proto.pb.user.FetchCallReply.prototype.setRtcToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.HangCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.HangCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.HangCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.HangCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hangType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    callDuration: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.HangCallRequest}
 */
proto.pb.user.HangCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.HangCallRequest;
  return proto.pb.user.HangCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.HangCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.HangCallRequest}
 */
proto.pb.user.HangCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.HangType} */ (reader.readEnum());
      msg.setHangType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCallDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.HangCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.HangCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.HangCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.HangCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHangType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCallDuration();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint64 call_id = 1;
 * @return {number}
 */
proto.pb.user.HangCallRequest.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.HangCallRequest} returns this
 */
proto.pb.user.HangCallRequest.prototype.setCallId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional pb.HangType hang_type = 2;
 * @return {!proto.pb.HangType}
 */
proto.pb.user.HangCallRequest.prototype.getHangType = function() {
  return /** @type {!proto.pb.HangType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.HangType} value
 * @return {!proto.pb.user.HangCallRequest} returns this
 */
proto.pb.user.HangCallRequest.prototype.setHangType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 call_duration = 3;
 * @return {number}
 */
proto.pb.user.HangCallRequest.prototype.getCallDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.HangCallRequest} returns this
 */
proto.pb.user.HangCallRequest.prototype.setCallDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.HangCallReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.HangCallReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.HangCallReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.HangCallReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    callExpense: jspb.Message.getFieldWithDefault(msg, 2, 0),
    callDuration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    giftExpense: jspb.Message.getFieldWithDefault(msg, 4, 0),
    giftCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    balance: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.HangCallReply}
 */
proto.pb.user.HangCallReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.HangCallReply;
  return proto.pb.user.HangCallReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.HangCallReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.HangCallReply}
 */
proto.pb.user.HangCallReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCallExpense(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCallDuration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGiftExpense(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGiftCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.HangCallReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.HangCallReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.HangCallReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.HangCallReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCallExpense();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCallDuration();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGiftExpense();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getGiftCount();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint64 call_id = 1;
 * @return {number}
 */
proto.pb.user.HangCallReply.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.HangCallReply} returns this
 */
proto.pb.user.HangCallReply.prototype.setCallId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 call_expense = 2;
 * @return {number}
 */
proto.pb.user.HangCallReply.prototype.getCallExpense = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.HangCallReply} returns this
 */
proto.pb.user.HangCallReply.prototype.setCallExpense = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 call_duration = 3;
 * @return {number}
 */
proto.pb.user.HangCallReply.prototype.getCallDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.HangCallReply} returns this
 */
proto.pb.user.HangCallReply.prototype.setCallDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 gift_expense = 4;
 * @return {number}
 */
proto.pb.user.HangCallReply.prototype.getGiftExpense = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.HangCallReply} returns this
 */
proto.pb.user.HangCallReply.prototype.setGiftExpense = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 gift_count = 5;
 * @return {number}
 */
proto.pb.user.HangCallReply.prototype.getGiftCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.HangCallReply} returns this
 */
proto.pb.user.HangCallReply.prototype.setGiftCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 balance = 6;
 * @return {number}
 */
proto.pb.user.HangCallReply.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.HangCallReply} returns this
 */
proto.pb.user.HangCallReply.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.UpdateCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.UpdateCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.UpdateCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.UpdateCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connectedAt: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.UpdateCallRequest}
 */
proto.pb.user.UpdateCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.UpdateCallRequest;
  return proto.pb.user.UpdateCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.UpdateCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.UpdateCallRequest}
 */
proto.pb.user.UpdateCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConnectedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.UpdateCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.UpdateCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.UpdateCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.UpdateCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getConnectedAt();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 call_id = 1;
 * @return {number}
 */
proto.pb.user.UpdateCallRequest.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.UpdateCallRequest} returns this
 */
proto.pb.user.UpdateCallRequest.prototype.setCallId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 connected_at = 2;
 * @return {number}
 */
proto.pb.user.UpdateCallRequest.prototype.getConnectedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.UpdateCallRequest} returns this
 */
proto.pb.user.UpdateCallRequest.prototype.setConnectedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.UpdateCallReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.UpdateCallReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.UpdateCallReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.UpdateCallReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currentDuration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    remainDuration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    disconnectAt: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.UpdateCallReply}
 */
proto.pb.user.UpdateCallReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.UpdateCallReply;
  return proto.pb.user.UpdateCallReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.UpdateCallReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.UpdateCallReply}
 */
proto.pb.user.UpdateCallReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBalance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentDuration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemainDuration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDisconnectAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.UpdateCallReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.UpdateCallReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.UpdateCallReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.UpdateCallReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCurrentDuration();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRemainDuration();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDisconnectAt();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 balance = 1;
 * @return {number}
 */
proto.pb.user.UpdateCallReply.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.UpdateCallReply} returns this
 */
proto.pb.user.UpdateCallReply.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 current_duration = 2;
 * @return {number}
 */
proto.pb.user.UpdateCallReply.prototype.getCurrentDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.UpdateCallReply} returns this
 */
proto.pb.user.UpdateCallReply.prototype.setCurrentDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 remain_duration = 3;
 * @return {number}
 */
proto.pb.user.UpdateCallReply.prototype.getRemainDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.UpdateCallReply} returns this
 */
proto.pb.user.UpdateCallReply.prototype.setRemainDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 disconnect_at = 4;
 * @return {number}
 */
proto.pb.user.UpdateCallReply.prototype.getDisconnectAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.UpdateCallReply} returns this
 */
proto.pb.user.UpdateCallReply.prototype.setDisconnectAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.ReportCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.ReportCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.ReportCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ReportCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    score: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.ReportCallRequest}
 */
proto.pb.user.ReportCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.ReportCallRequest;
  return proto.pb.user.ReportCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.ReportCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.ReportCallRequest}
 */
proto.pb.user.ReportCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.ReportCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.ReportCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.ReportCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.ReportCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 call_id = 1;
 * @return {number}
 */
proto.pb.user.ReportCallRequest.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ReportCallRequest} returns this
 */
proto.pb.user.ReportCallRequest.prototype.setCallId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.pb.user.ReportCallRequest.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.ReportCallRequest} returns this
 */
proto.pb.user.ReportCallRequest.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.BuyCommodityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.BuyCommodityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.BuyCommodityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.BuyCommodityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payChannel: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commodityId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 4, ""),
    anchorId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.BuyCommodityRequest}
 */
proto.pb.user.BuyCommodityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.BuyCommodityRequest;
  return proto.pb.user.BuyCommodityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.BuyCommodityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.BuyCommodityRequest}
 */
proto.pb.user.BuyCommodityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.PayType} */ (reader.readEnum());
      msg.setPayType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayChannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommodityId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnchorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.BuyCommodityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.BuyCommodityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.BuyCommodityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.BuyCommodityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPayChannel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommodityId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAnchorId();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional pb.PayType pay_type = 1;
 * @return {!proto.pb.PayType}
 */
proto.pb.user.BuyCommodityRequest.prototype.getPayType = function() {
  return /** @type {!proto.pb.PayType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.PayType} value
 * @return {!proto.pb.user.BuyCommodityRequest} returns this
 */
proto.pb.user.BuyCommodityRequest.prototype.setPayType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string pay_channel = 2;
 * @return {string}
 */
proto.pb.user.BuyCommodityRequest.prototype.getPayChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.BuyCommodityRequest} returns this
 */
proto.pb.user.BuyCommodityRequest.prototype.setPayChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 commodity_id = 3;
 * @return {number}
 */
proto.pb.user.BuyCommodityRequest.prototype.getCommodityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.BuyCommodityRequest} returns this
 */
proto.pb.user.BuyCommodityRequest.prototype.setCommodityId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string currency = 4;
 * @return {string}
 */
proto.pb.user.BuyCommodityRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.BuyCommodityRequest} returns this
 */
proto.pb.user.BuyCommodityRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 anchor_id = 5;
 * @return {number}
 */
proto.pb.user.BuyCommodityRequest.prototype.getAnchorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.BuyCommodityRequest} returns this
 */
proto.pb.user.BuyCommodityRequest.prototype.setAnchorId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.BuyCommodityReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.BuyCommodityReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.BuyCommodityReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.BuyCommodityReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    payUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    payPrice: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 5, ""),
    commodityId: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.BuyCommodityReply}
 */
proto.pb.user.BuyCommodityReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.BuyCommodityReply;
  return proto.pb.user.BuyCommodityReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.BuyCommodityReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.BuyCommodityReply}
 */
proto.pb.user.BuyCommodityReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecordId(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.PayType} */ (reader.readEnum());
      msg.setPayType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayUrl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPayPrice(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommodityId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.BuyCommodityReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.BuyCommodityReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.BuyCommodityReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.BuyCommodityReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPayType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPayUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPayPrice();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCommodityId();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint64 record_id = 1;
 * @return {number}
 */
proto.pb.user.BuyCommodityReply.prototype.getRecordId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.BuyCommodityReply} returns this
 */
proto.pb.user.BuyCommodityReply.prototype.setRecordId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional pb.PayType pay_type = 2;
 * @return {!proto.pb.PayType}
 */
proto.pb.user.BuyCommodityReply.prototype.getPayType = function() {
  return /** @type {!proto.pb.PayType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.PayType} value
 * @return {!proto.pb.user.BuyCommodityReply} returns this
 */
proto.pb.user.BuyCommodityReply.prototype.setPayType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string pay_url = 3;
 * @return {string}
 */
proto.pb.user.BuyCommodityReply.prototype.getPayUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.BuyCommodityReply} returns this
 */
proto.pb.user.BuyCommodityReply.prototype.setPayUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 pay_price = 4;
 * @return {number}
 */
proto.pb.user.BuyCommodityReply.prototype.getPayPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.BuyCommodityReply} returns this
 */
proto.pb.user.BuyCommodityReply.prototype.setPayPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string currency = 5;
 * @return {string}
 */
proto.pb.user.BuyCommodityReply.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.BuyCommodityReply} returns this
 */
proto.pb.user.BuyCommodityReply.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 commodity_id = 6;
 * @return {number}
 */
proto.pb.user.BuyCommodityReply.prototype.getCommodityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.BuyCommodityReply} returns this
 */
proto.pb.user.BuyCommodityReply.prototype.setCommodityId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.PayListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.PayListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.PayListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.PayListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.PayListRequest}
 */
proto.pb.user.PayListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.PayListRequest;
  return proto.pb.user.PayListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.PayListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.PayListRequest}
 */
proto.pb.user.PayListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.PayListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.PayListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.PayListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.PayListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 count = 1;
 * @return {number}
 */
proto.pb.user.PayListRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.PayListRequest} returns this
 */
proto.pb.user.PayListRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string cursor = 2;
 * @return {string}
 */
proto.pb.user.PayListRequest.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.PayListRequest} returns this
 */
proto.pb.user.PayListRequest.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.user.PayListReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.PayListReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.PayListReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.PayListReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.PayListReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    usertype_pb.PayRecord.toObject, includeInstance),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.PayListReply}
 */
proto.pb.user.PayListReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.PayListReply;
  return proto.pb.user.PayListReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.PayListReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.PayListReply}
 */
proto.pb.user.PayListReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new usertype_pb.PayRecord;
      reader.readMessage(value,usertype_pb.PayRecord.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.PayListReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.PayListReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.PayListReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.PayListReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      usertype_pb.PayRecord.serializeBinaryToWriter
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHasMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated pb.PayRecord orders = 1;
 * @return {!Array<!proto.pb.PayRecord>}
 */
proto.pb.user.PayListReply.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.pb.PayRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, usertype_pb.PayRecord, 1));
};


/**
 * @param {!Array<!proto.pb.PayRecord>} value
 * @return {!proto.pb.user.PayListReply} returns this
*/
proto.pb.user.PayListReply.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.PayRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.PayRecord}
 */
proto.pb.user.PayListReply.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.PayRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.user.PayListReply} returns this
 */
proto.pb.user.PayListReply.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};


/**
 * optional string cursor = 2;
 * @return {string}
 */
proto.pb.user.PayListReply.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.PayListReply} returns this
 */
proto.pb.user.PayListReply.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool has_more = 3;
 * @return {boolean}
 */
proto.pb.user.PayListReply.prototype.getHasMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.user.PayListReply} returns this
 */
proto.pb.user.PayListReply.prototype.setHasMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.VerifyPayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.VerifyPayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.VerifyPayRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.VerifyPayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sku: jspb.Message.getFieldWithDefault(msg, 3, ""),
    data: jspb.Message.getFieldWithDefault(msg, 4, ""),
    anchorId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.VerifyPayRequest}
 */
proto.pb.user.VerifyPayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.VerifyPayRequest;
  return proto.pb.user.VerifyPayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.VerifyPayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.VerifyPayRequest}
 */
proto.pb.user.VerifyPayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecordId(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.PayType} */ (reader.readEnum());
      msg.setPayType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSku(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnchorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.VerifyPayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.VerifyPayRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.VerifyPayRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.VerifyPayRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPayType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSku();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAnchorId();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint64 record_id = 1;
 * @return {number}
 */
proto.pb.user.VerifyPayRequest.prototype.getRecordId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.VerifyPayRequest} returns this
 */
proto.pb.user.VerifyPayRequest.prototype.setRecordId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional pb.PayType pay_type = 2;
 * @return {!proto.pb.PayType}
 */
proto.pb.user.VerifyPayRequest.prototype.getPayType = function() {
  return /** @type {!proto.pb.PayType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.PayType} value
 * @return {!proto.pb.user.VerifyPayRequest} returns this
 */
proto.pb.user.VerifyPayRequest.prototype.setPayType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string sku = 3;
 * @return {string}
 */
proto.pb.user.VerifyPayRequest.prototype.getSku = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.VerifyPayRequest} returns this
 */
proto.pb.user.VerifyPayRequest.prototype.setSku = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string data = 4;
 * @return {string}
 */
proto.pb.user.VerifyPayRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.VerifyPayRequest} returns this
 */
proto.pb.user.VerifyPayRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 anchor_id = 5;
 * @return {number}
 */
proto.pb.user.VerifyPayRequest.prototype.getAnchorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.user.VerifyPayRequest} returns this
 */
proto.pb.user.VerifyPayRequest.prototype.setAnchorId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.VerifyPayReply.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.VerifyPayReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.VerifyPayReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.VerifyPayReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    record: (f = msg.getRecord()) && usertype_pb.PayRecord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.VerifyPayReply}
 */
proto.pb.user.VerifyPayReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.VerifyPayReply;
  return proto.pb.user.VerifyPayReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.VerifyPayReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.VerifyPayReply}
 */
proto.pb.user.VerifyPayReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new usertype_pb.PayRecord;
      reader.readMessage(value,usertype_pb.PayRecord.deserializeBinaryFromReader);
      msg.setRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.VerifyPayReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.VerifyPayReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.VerifyPayReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.VerifyPayReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRecord();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      usertype_pb.PayRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.pb.user.VerifyPayReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.user.VerifyPayReply} returns this
 */
proto.pb.user.VerifyPayReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional pb.PayRecord record = 2;
 * @return {?proto.pb.PayRecord}
 */
proto.pb.user.VerifyPayReply.prototype.getRecord = function() {
  return /** @type{?proto.pb.PayRecord} */ (
    jspb.Message.getWrapperField(this, usertype_pb.PayRecord, 2));
};


/**
 * @param {?proto.pb.PayRecord|undefined} value
 * @return {!proto.pb.user.VerifyPayReply} returns this
*/
proto.pb.user.VerifyPayReply.prototype.setRecord = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.user.VerifyPayReply} returns this
 */
proto.pb.user.VerifyPayReply.prototype.clearRecord = function() {
  return this.setRecord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.user.VerifyPayReply.prototype.hasRecord = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.user.SaveMediaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.user.SaveMediaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.user.SaveMediaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.SaveMediaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    thumb: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.user.SaveMediaRequest}
 */
proto.pb.user.SaveMediaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.user.SaveMediaRequest;
  return proto.pb.user.SaveMediaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.user.SaveMediaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.user.SaveMediaRequest}
 */
proto.pb.user.SaveMediaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.FileType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.user.SaveMediaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.user.SaveMediaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.user.SaveMediaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.user.SaveMediaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getThumb();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.pb.user.SaveMediaRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.SaveMediaRequest} returns this
 */
proto.pb.user.SaveMediaRequest.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional pb.FileType type = 2;
 * @return {!proto.pb.FileType}
 */
proto.pb.user.SaveMediaRequest.prototype.getType = function() {
  return /** @type {!proto.pb.FileType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.FileType} value
 * @return {!proto.pb.user.SaveMediaRequest} returns this
 */
proto.pb.user.SaveMediaRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string thumb = 3;
 * @return {string}
 */
proto.pb.user.SaveMediaRequest.prototype.getThumb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.user.SaveMediaRequest} returns this
 */
proto.pb.user.SaveMediaRequest.prototype.setThumb = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.pb.user.AnchorListType = {
  ANCHORLISTRECOMMEND: 0,
  ANCHORLISTONLINE: 1,
  ANCHORLISTFOLLOW: 2,
  ANCHORLISTFANS: 3,
  ANCHORLISTMATCH: 4,
  ANCHORLISTHOT: 5
};

/**
 * @enum {number}
 */
proto.pb.user.RelationOpType = {
  RELATIONFOLLOW: 0,
  RELATIONUNFOLLOW: 1,
  RELATIONBLOCK: 2,
  RELATIONUNBLOCK: 3
};

/**
 * @enum {number}
 */
proto.pb.user.UserListType = {
  USERLISTANCHORFANS: 0,
  USERLISTEXPENSERANK: 1
};

goog.object.extend(exports, proto.pb.user);
