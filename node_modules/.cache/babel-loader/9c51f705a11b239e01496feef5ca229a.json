{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/eslint-loader/index.js??ref--13-0!/home/mengy/develop/iwork/kafo/vue-admin/src/proto/js/user_pb.js","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/proto/js/user_pb.js","mtime":1631850766824},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/mengy/develop/iwork/kafo/vue-admin/src/proto/js/user_pb.js"],"names":["jspb","require","goog","global","Function","usertype_pb","object","extend","proto","exportSymbol","pb","user","AreaListReply","opt_data","Message","initialize","repeatedFields_","inherits","DEBUG","COMPILED","displayName","LoginRequest","BlockInfo","BindAuthRequest","UnbindAuthRequest","AttributionRequest","AttributionReply","CheckinRequest","ConfigRequest","ConfigReply","PayChannelRequest","PayChannelReply","GiftConfigRequest","GiftConfigReply","AnchorListRequest","AnchorListReply","AnchorInfoRequest","AnchorIdsReply","AnchorRelationRequest","UserListRequest","UserListReply","TransactionListRequest","TransactionListReply","SearchAnchorRequest","SearchAnchorReply","SendGiftRequest","BuyVipRequest","ReportViolationRequest","ReportUsageRequest","ReportUsageReply","MakeCallRequest","MakeCallReply","FetchCallRequest","FetchCallReply","HangCallRequest","HangCallReply","UpdateCallRequest","UpdateCallReply","ReportCallRequest","BuyCommodityRequest","BuyCommodityReply","PayListRequest","PayListReply","VerifyPayRequest","VerifyPayReply","SaveMediaRequest","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","areasList","toObjectList","getAreasList","Area","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readMessage","addAreas","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","length","writeRepeatedMessage","getRepeatedWrapperField","setAreasList","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","clearAreasList","deviceId","getFieldWithDefault","deviceBrand","deviceModel","osVersion","osType","country","lang","authType","authId","authToken","nickname","gender","avatar","readString","setDeviceId","setDeviceBrand","setDeviceModel","setOsVersion","readEnum","setOsType","setCountry","setLang","setAuthType","setAuthId","setAuthToken","setNickname","setGender","setAvatar","getDeviceId","writeString","getDeviceBrand","getDeviceModel","getOsVersion","getOsType","writeEnum","getCountry","getLang","getAuthType","getAuthId","getAuthToken","getNickname","getGender","getAvatar","setProto3StringField","setProto3EnumField","status","reason","blockAt","blockDuration","setStatus","setReason","readUint32","setBlockAt","setBlockDuration","getStatus","getReason","getBlockAt","writeUint32","getBlockDuration","setProto3IntField","trackerToken","trackerName","network","campaign","adgroup","creative","clickLabel","adid","costType","costAmount","getFloatingPointFieldWithDefault","costCurrency","setTrackerToken","setTrackerName","setNetwork","setCampaign","setAdgroup","setCreative","setClickLabel","setAdid","setCostType","readFloat","setCostAmount","setCostCurrency","getTrackerToken","getTrackerName","getNetwork","getCampaign","getAdgroup","getCreative","getClickLabel","getAdid","getCostType","getCostAmount","writeFloat","getCostCurrency","setProto3FloatField","installId","setInstallId","getInstallId","continuousDays","setContinuousDays","getContinuousDays","longitude","latitude","networkType","version","setLongitude","setLatitude","setNetworkType","setVersion","getLongitude","getLatitude","getNetworkType","getVersion","checkinConfigsList","getCheckinConfigsList","CheckinConfig","giftConfigsList","getGiftConfigsList","GiftConfig","vipConfigsList","getVipConfigsList","VipConfig","bannerConfigsList","getBannerConfigsList","BannerConfig","freeMessageCount","agoraAppId","rcAppKey","showUpgrade","getBooleanFieldWithDefault","forceUpgrade","upgradeUrl","upgradeTip","heartbeatInterval","dndPeriod","addCheckinConfigs","addGiftConfigs","addVipConfigs","addBannerConfigs","setFreeMessageCount","setAgoraAppId","setRcAppKey","readBool","setShowUpgrade","setForceUpgrade","setUpgradeUrl","setUpgradeTip","setHeartbeatInterval","setDndPeriod","getFreeMessageCount","getAgoraAppId","getRcAppKey","getShowUpgrade","writeBool","getForceUpgrade","getUpgradeUrl","getUpgradeTip","getHeartbeatInterval","getDndPeriod","setCheckinConfigsList","clearCheckinConfigsList","setGiftConfigsList","clearGiftConfigsList","setVipConfigsList","clearVipConfigsList","setBannerConfigsList","clearBannerConfigsList","setProto3BooleanField","currency","getAll","subscription","setCurrency","setGetAll","setSubscription","getCurrency","getGetAll","getSubscription","payChannelsList","getPayChannelsList","PayChannel","countryConfigsList","getCountryConfigsList","CountryConfig","addPayChannels","addCountryConfigs","setPayChannelsList","clearPayChannelsList","setCountryConfigsList","clearCountryConfigsList","type","count","cursor","setType","setCount","setCursor","getType","getCount","getCursor","anchorsList","getAnchorsList","AnchorInfo","hasMore","addAnchors","setHasMore","getHasMore","setAnchorsList","clearAnchorsList","anchorId","setAnchorId","getAnchorId","followIdsList","getRepeatedField","blockIdsList","values","isDelimited","readPackedUint32","i","addFollowIds","addBlockIds","getFollowIdsList","writePackedUint32","getBlockIdsList","setFollowIdsList","setField","addToRepeatedField","clearFollowIdsList","setBlockIdsList","clearBlockIdsList","opType","setOpType","getOpType","usersList","getUsersList","User","addUsers","setUsersList","clearUsersList","transList","getTransList","Transaction","addTrans","setTransList","clearTransList","keyword","setKeyword","getKeyword","giftId","quantity","callId","setGiftId","setQuantity","readUint64","setCallId","getGiftId","getQuantity","getCallId","writeUint64","vipId","setVipId","getVipId","scene","setMessage","setScene","getMessage","getScene","messageCount","setMessageCount","getMessageCount","messageQuota","messageUsed","setMessageQuota","setMessageUsed","getMessageQuota","getMessageUsed","callType","setCallType","getCallType","price","callerToken","calleeToken","setPrice","setCallerToken","setCalleeToken","getPrice","getCallerToken","getCalleeToken","rtcToken","setRtcToken","getRtcToken","hangType","callDuration","setHangType","setCallDuration","getHangType","getCallDuration","callExpense","giftExpense","giftCount","balance","setCallExpense","setGiftExpense","setGiftCount","setBalance","getCallExpense","getGiftExpense","getGiftCount","getBalance","connectedAt","setConnectedAt","getConnectedAt","currentDuration","remainDuration","disconnectAt","setCurrentDuration","setRemainDuration","setDisconnectAt","getCurrentDuration","getRemainDuration","getDisconnectAt","score","setScore","getScore","payType","payChannel","commodityId","setPayType","setPayChannel","setCommodityId","getPayType","getPayChannel","getCommodityId","recordId","payUrl","payPrice","setRecordId","setPayUrl","setPayPrice","getRecordId","getPayUrl","getPayPrice","ordersList","getOrdersList","PayRecord","addOrders","setOrdersList","clearOrdersList","sku","data","setSku","setData","getSku","getData","success","record","getRecord","setSuccess","setRecord","getSuccess","writeMessage","getWrapperField","setWrapperField","clearRecord","hasRecord","getField","path","thumb","setPath","setThumb","getPath","getThumb","AnchorListType","ANCHORLISTRECOMMEND","ANCHORLISTONLINE","ANCHORLISTFOLLOW","ANCHORLISTFANS","ANCHORLISTMATCH","ANCHORLISTHOT","RelationOpType","RELATIONFOLLOW","RELATIONUNFOLLOW","RELATIONBLOCK","RELATIONUNBLOCK","UserListType","USERLISTANCHORFANS","USERLISTEXPENSERANK","exports"],"mappings":"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","sourcesContent":["// source: user.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar usertype_pb = require('./usertype_pb.js');\ngoog.object.extend(proto, usertype_pb);\ngoog.exportSymbol('proto.pb.user.AnchorIdsReply', null, global);\ngoog.exportSymbol('proto.pb.user.AnchorInfoRequest', null, global);\ngoog.exportSymbol('proto.pb.user.AnchorListReply', null, global);\ngoog.exportSymbol('proto.pb.user.AnchorListRequest', null, global);\ngoog.exportSymbol('proto.pb.user.AnchorListType', null, global);\ngoog.exportSymbol('proto.pb.user.AnchorRelationRequest', null, global);\ngoog.exportSymbol('proto.pb.user.AreaListReply', null, global);\ngoog.exportSymbol('proto.pb.user.AttributionReply', null, global);\ngoog.exportSymbol('proto.pb.user.AttributionRequest', null, global);\ngoog.exportSymbol('proto.pb.user.BindAuthRequest', null, global);\ngoog.exportSymbol('proto.pb.user.BlockInfo', null, global);\ngoog.exportSymbol('proto.pb.user.BuyCommodityReply', null, global);\ngoog.exportSymbol('proto.pb.user.BuyCommodityRequest', null, global);\ngoog.exportSymbol('proto.pb.user.BuyVipRequest', null, global);\ngoog.exportSymbol('proto.pb.user.CheckinRequest', null, global);\ngoog.exportSymbol('proto.pb.user.ConfigReply', null, global);\ngoog.exportSymbol('proto.pb.user.ConfigRequest', null, global);\ngoog.exportSymbol('proto.pb.user.FetchCallReply', null, global);\ngoog.exportSymbol('proto.pb.user.FetchCallRequest', null, global);\ngoog.exportSymbol('proto.pb.user.GiftConfigReply', null, global);\ngoog.exportSymbol('proto.pb.user.GiftConfigRequest', null, global);\ngoog.exportSymbol('proto.pb.user.HangCallReply', null, global);\ngoog.exportSymbol('proto.pb.user.HangCallRequest', null, global);\ngoog.exportSymbol('proto.pb.user.LoginRequest', null, global);\ngoog.exportSymbol('proto.pb.user.MakeCallReply', null, global);\ngoog.exportSymbol('proto.pb.user.MakeCallRequest', null, global);\ngoog.exportSymbol('proto.pb.user.PayChannelReply', null, global);\ngoog.exportSymbol('proto.pb.user.PayChannelRequest', null, global);\ngoog.exportSymbol('proto.pb.user.PayListReply', null, global);\ngoog.exportSymbol('proto.pb.user.PayListRequest', null, global);\ngoog.exportSymbol('proto.pb.user.RelationOpType', null, global);\ngoog.exportSymbol('proto.pb.user.ReportCallRequest', null, global);\ngoog.exportSymbol('proto.pb.user.ReportUsageReply', null, global);\ngoog.exportSymbol('proto.pb.user.ReportUsageRequest', null, global);\ngoog.exportSymbol('proto.pb.user.ReportViolationRequest', null, global);\ngoog.exportSymbol('proto.pb.user.SaveMediaRequest', null, global);\ngoog.exportSymbol('proto.pb.user.SearchAnchorReply', null, global);\ngoog.exportSymbol('proto.pb.user.SearchAnchorRequest', null, global);\ngoog.exportSymbol('proto.pb.user.SendGiftRequest', null, global);\ngoog.exportSymbol('proto.pb.user.TransactionListReply', null, global);\ngoog.exportSymbol('proto.pb.user.TransactionListRequest', null, global);\ngoog.exportSymbol('proto.pb.user.UnbindAuthRequest', null, global);\ngoog.exportSymbol('proto.pb.user.UpdateCallReply', null, global);\ngoog.exportSymbol('proto.pb.user.UpdateCallRequest', null, global);\ngoog.exportSymbol('proto.pb.user.UserListReply', null, global);\ngoog.exportSymbol('proto.pb.user.UserListRequest', null, global);\ngoog.exportSymbol('proto.pb.user.UserListType', null, global);\ngoog.exportSymbol('proto.pb.user.VerifyPayReply', null, global);\ngoog.exportSymbol('proto.pb.user.VerifyPayRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.AreaListReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.AreaListReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.AreaListReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.AreaListReply.displayName = 'proto.pb.user.AreaListReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.LoginRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.LoginRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.LoginRequest.displayName = 'proto.pb.user.LoginRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.BlockInfo = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.BlockInfo, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.BlockInfo.displayName = 'proto.pb.user.BlockInfo';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.BindAuthRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.BindAuthRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.BindAuthRequest.displayName = 'proto.pb.user.BindAuthRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.UnbindAuthRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.UnbindAuthRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.UnbindAuthRequest.displayName = 'proto.pb.user.UnbindAuthRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.AttributionRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.AttributionRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.AttributionRequest.displayName = 'proto.pb.user.AttributionRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.AttributionReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.AttributionReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.AttributionReply.displayName = 'proto.pb.user.AttributionReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.CheckinRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.CheckinRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.CheckinRequest.displayName = 'proto.pb.user.CheckinRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.ConfigRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.ConfigRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.ConfigRequest.displayName = 'proto.pb.user.ConfigRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.ConfigReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.ConfigReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.ConfigReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.ConfigReply.displayName = 'proto.pb.user.ConfigReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.PayChannelRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.PayChannelRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.PayChannelRequest.displayName = 'proto.pb.user.PayChannelRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.PayChannelReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.PayChannelReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.PayChannelReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.PayChannelReply.displayName = 'proto.pb.user.PayChannelReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.GiftConfigRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.GiftConfigRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.GiftConfigRequest.displayName = 'proto.pb.user.GiftConfigRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.GiftConfigReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.GiftConfigReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.GiftConfigReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.GiftConfigReply.displayName = 'proto.pb.user.GiftConfigReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.AnchorListRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.AnchorListRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.AnchorListRequest.displayName = 'proto.pb.user.AnchorListRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.AnchorListReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.AnchorListReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.AnchorListReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.AnchorListReply.displayName = 'proto.pb.user.AnchorListReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.AnchorInfoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.AnchorInfoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.AnchorInfoRequest.displayName = 'proto.pb.user.AnchorInfoRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.AnchorIdsReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.AnchorIdsReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.AnchorIdsReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.AnchorIdsReply.displayName = 'proto.pb.user.AnchorIdsReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.AnchorRelationRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.AnchorRelationRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.AnchorRelationRequest.displayName = 'proto.pb.user.AnchorRelationRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.UserListRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.UserListRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.UserListRequest.displayName = 'proto.pb.user.UserListRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.UserListReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.UserListReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.UserListReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.UserListReply.displayName = 'proto.pb.user.UserListReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.TransactionListRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.TransactionListRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.TransactionListRequest.displayName = 'proto.pb.user.TransactionListRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.TransactionListReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.TransactionListReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.TransactionListReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.TransactionListReply.displayName = 'proto.pb.user.TransactionListReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.SearchAnchorRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.SearchAnchorRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.SearchAnchorRequest.displayName = 'proto.pb.user.SearchAnchorRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.SearchAnchorReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.SearchAnchorReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.SearchAnchorReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.SearchAnchorReply.displayName = 'proto.pb.user.SearchAnchorReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.SendGiftRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.SendGiftRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.SendGiftRequest.displayName = 'proto.pb.user.SendGiftRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.BuyVipRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.BuyVipRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.BuyVipRequest.displayName = 'proto.pb.user.BuyVipRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.ReportViolationRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.ReportViolationRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.ReportViolationRequest.displayName = 'proto.pb.user.ReportViolationRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.ReportUsageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.ReportUsageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.ReportUsageRequest.displayName = 'proto.pb.user.ReportUsageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.ReportUsageReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.ReportUsageReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.ReportUsageReply.displayName = 'proto.pb.user.ReportUsageReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.MakeCallRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.MakeCallRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.MakeCallRequest.displayName = 'proto.pb.user.MakeCallRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.MakeCallReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.MakeCallReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.MakeCallReply.displayName = 'proto.pb.user.MakeCallReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.FetchCallRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.FetchCallRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.FetchCallRequest.displayName = 'proto.pb.user.FetchCallRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.FetchCallReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.FetchCallReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.FetchCallReply.displayName = 'proto.pb.user.FetchCallReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.HangCallRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.HangCallRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.HangCallRequest.displayName = 'proto.pb.user.HangCallRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.HangCallReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.HangCallReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.HangCallReply.displayName = 'proto.pb.user.HangCallReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.UpdateCallRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.UpdateCallRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.UpdateCallRequest.displayName = 'proto.pb.user.UpdateCallRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.UpdateCallReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.UpdateCallReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.UpdateCallReply.displayName = 'proto.pb.user.UpdateCallReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.ReportCallRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.ReportCallRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.ReportCallRequest.displayName = 'proto.pb.user.ReportCallRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.BuyCommodityRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.BuyCommodityRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.BuyCommodityRequest.displayName = 'proto.pb.user.BuyCommodityRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.BuyCommodityReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.BuyCommodityReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.BuyCommodityReply.displayName = 'proto.pb.user.BuyCommodityReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.PayListRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.PayListRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.PayListRequest.displayName = 'proto.pb.user.PayListRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.PayListReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.user.PayListReply.repeatedFields_, null);\n};\ngoog.inherits(proto.pb.user.PayListReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.PayListReply.displayName = 'proto.pb.user.PayListReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.VerifyPayRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.VerifyPayRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.VerifyPayRequest.displayName = 'proto.pb.user.VerifyPayRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.VerifyPayReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.VerifyPayReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.VerifyPayReply.displayName = 'proto.pb.user.VerifyPayReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pb.user.SaveMediaRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pb.user.SaveMediaRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.user.SaveMediaRequest.displayName = 'proto.pb.user.SaveMediaRequest';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.AreaListReply.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.AreaListReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.AreaListReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.AreaListReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AreaListReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    areasList: jspb.Message.toObjectList(msg.getAreasList(),\n    usertype_pb.Area.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.AreaListReply}\n */\nproto.pb.user.AreaListReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.AreaListReply;\n  return proto.pb.user.AreaListReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.AreaListReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.AreaListReply}\n */\nproto.pb.user.AreaListReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new usertype_pb.Area;\n      reader.readMessage(value,usertype_pb.Area.deserializeBinaryFromReader);\n      msg.addAreas(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.AreaListReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.AreaListReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.AreaListReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AreaListReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAreasList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      usertype_pb.Area.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated pb.Area areas = 1;\n * @return {!Array<!proto.pb.Area>}\n */\nproto.pb.user.AreaListReply.prototype.getAreasList = function() {\n  return /** @type{!Array<!proto.pb.Area>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.Area, 1));\n};\n\n\n/**\n * @param {!Array<!proto.pb.Area>} value\n * @return {!proto.pb.user.AreaListReply} returns this\n*/\nproto.pb.user.AreaListReply.prototype.setAreasList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.pb.Area=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.Area}\n */\nproto.pb.user.AreaListReply.prototype.addAreas = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.Area, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.AreaListReply} returns this\n */\nproto.pb.user.AreaListReply.prototype.clearAreasList = function() {\n  return this.setAreasList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.LoginRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.LoginRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.LoginRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.LoginRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    deviceId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    deviceBrand: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    deviceModel: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    osVersion: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n    osType: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    country: jspb.Message.getFieldWithDefault(msg, 6, \"\"),\n    lang: jspb.Message.getFieldWithDefault(msg, 7, \"\"),\n    authType: jspb.Message.getFieldWithDefault(msg, 8, 0),\n    authId: jspb.Message.getFieldWithDefault(msg, 9, \"\"),\n    authToken: jspb.Message.getFieldWithDefault(msg, 10, \"\"),\n    nickname: jspb.Message.getFieldWithDefault(msg, 11, \"\"),\n    gender: jspb.Message.getFieldWithDefault(msg, 12, 0),\n    avatar: jspb.Message.getFieldWithDefault(msg, 13, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.LoginRequest}\n */\nproto.pb.user.LoginRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.LoginRequest;\n  return proto.pb.user.LoginRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.LoginRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.LoginRequest}\n */\nproto.pb.user.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDeviceId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDeviceBrand(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDeviceModel(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setOsVersion(value);\n      break;\n    case 5:\n      var value = /** @type {!proto.pb.OsType} */ (reader.readEnum());\n      msg.setOsType(value);\n      break;\n    case 6:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCountry(value);\n      break;\n    case 7:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setLang(value);\n      break;\n    case 8:\n      var value = /** @type {!proto.pb.AuthType} */ (reader.readEnum());\n      msg.setAuthType(value);\n      break;\n    case 9:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAuthId(value);\n      break;\n    case 10:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAuthToken(value);\n      break;\n    case 11:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setNickname(value);\n      break;\n    case 12:\n      var value = /** @type {!proto.pb.GenderType} */ (reader.readEnum());\n      msg.setGender(value);\n      break;\n    case 13:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAvatar(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.LoginRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.LoginRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.LoginRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.LoginRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDeviceId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getDeviceBrand();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getDeviceModel();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getOsVersion();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f = message.getOsType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      5,\n      f\n    );\n  }\n  f = message.getCountry();\n  if (f.length > 0) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f = message.getLang();\n  if (f.length > 0) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f = message.getAuthType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      8,\n      f\n    );\n  }\n  f = message.getAuthId();\n  if (f.length > 0) {\n    writer.writeString(\n      9,\n      f\n    );\n  }\n  f = message.getAuthToken();\n  if (f.length > 0) {\n    writer.writeString(\n      10,\n      f\n    );\n  }\n  f = message.getNickname();\n  if (f.length > 0) {\n    writer.writeString(\n      11,\n      f\n    );\n  }\n  f = message.getGender();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      12,\n      f\n    );\n  }\n  f = message.getAvatar();\n  if (f.length > 0) {\n    writer.writeString(\n      13,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string device_id = 1;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getDeviceId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setDeviceId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string device_brand = 2;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getDeviceBrand = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setDeviceBrand = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string device_model = 3;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getDeviceModel = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setDeviceModel = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string os_version = 4;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getOsVersion = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setOsVersion = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n/**\n * optional pb.OsType os_type = 5;\n * @return {!proto.pb.OsType}\n */\nproto.pb.user.LoginRequest.prototype.getOsType = function() {\n  return /** @type {!proto.pb.OsType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {!proto.pb.OsType} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setOsType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 5, value);\n};\n\n\n/**\n * optional string country = 6;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getCountry = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setCountry = function(value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n\n\n/**\n * optional string lang = 7;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getLang = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setLang = function(value) {\n  return jspb.Message.setProto3StringField(this, 7, value);\n};\n\n\n/**\n * optional pb.AuthType auth_type = 8;\n * @return {!proto.pb.AuthType}\n */\nproto.pb.user.LoginRequest.prototype.getAuthType = function() {\n  return /** @type {!proto.pb.AuthType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/**\n * @param {!proto.pb.AuthType} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setAuthType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 8, value);\n};\n\n\n/**\n * optional string auth_id = 9;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getAuthId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setAuthId = function(value) {\n  return jspb.Message.setProto3StringField(this, 9, value);\n};\n\n\n/**\n * optional string auth_token = 10;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getAuthToken = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setAuthToken = function(value) {\n  return jspb.Message.setProto3StringField(this, 10, value);\n};\n\n\n/**\n * optional string nickname = 11;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getNickname = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setNickname = function(value) {\n  return jspb.Message.setProto3StringField(this, 11, value);\n};\n\n\n/**\n * optional pb.GenderType gender = 12;\n * @return {!proto.pb.GenderType}\n */\nproto.pb.user.LoginRequest.prototype.getGender = function() {\n  return /** @type {!proto.pb.GenderType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));\n};\n\n\n/**\n * @param {!proto.pb.GenderType} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setGender = function(value) {\n  return jspb.Message.setProto3EnumField(this, 12, value);\n};\n\n\n/**\n * optional string avatar = 13;\n * @return {string}\n */\nproto.pb.user.LoginRequest.prototype.getAvatar = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.LoginRequest} returns this\n */\nproto.pb.user.LoginRequest.prototype.setAvatar = function(value) {\n  return jspb.Message.setProto3StringField(this, 13, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.BlockInfo.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.BlockInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.BlockInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BlockInfo.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    status: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    reason: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    blockAt: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    blockDuration: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.BlockInfo}\n */\nproto.pb.user.BlockInfo.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.BlockInfo;\n  return proto.pb.user.BlockInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.BlockInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.BlockInfo}\n */\nproto.pb.user.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.pb.BlockStatus} */ (reader.readEnum());\n      msg.setStatus(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setReason(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setBlockAt(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setBlockDuration(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.BlockInfo.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.BlockInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.BlockInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BlockInfo.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getStatus();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getReason();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getBlockAt();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getBlockDuration();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional pb.BlockStatus status = 1;\n * @return {!proto.pb.BlockStatus}\n */\nproto.pb.user.BlockInfo.prototype.getStatus = function() {\n  return /** @type {!proto.pb.BlockStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.pb.BlockStatus} value\n * @return {!proto.pb.user.BlockInfo} returns this\n */\nproto.pb.user.BlockInfo.prototype.setStatus = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional string reason = 2;\n * @return {string}\n */\nproto.pb.user.BlockInfo.prototype.getReason = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.BlockInfo} returns this\n */\nproto.pb.user.BlockInfo.prototype.setReason = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional uint32 block_at = 3;\n * @return {number}\n */\nproto.pb.user.BlockInfo.prototype.getBlockAt = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.BlockInfo} returns this\n */\nproto.pb.user.BlockInfo.prototype.setBlockAt = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 block_duration = 4;\n * @return {number}\n */\nproto.pb.user.BlockInfo.prototype.getBlockDuration = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.BlockInfo} returns this\n */\nproto.pb.user.BlockInfo.prototype.setBlockDuration = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.BindAuthRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.BindAuthRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.BindAuthRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BindAuthRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    authType: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    authId: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    authToken: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.BindAuthRequest}\n */\nproto.pb.user.BindAuthRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.BindAuthRequest;\n  return proto.pb.user.BindAuthRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.BindAuthRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.BindAuthRequest}\n */\nproto.pb.user.BindAuthRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.pb.AuthType} */ (reader.readEnum());\n      msg.setAuthType(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAuthId(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAuthToken(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.BindAuthRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.BindAuthRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.BindAuthRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BindAuthRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAuthType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getAuthId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getAuthToken();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional pb.AuthType auth_type = 1;\n * @return {!proto.pb.AuthType}\n */\nproto.pb.user.BindAuthRequest.prototype.getAuthType = function() {\n  return /** @type {!proto.pb.AuthType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.pb.AuthType} value\n * @return {!proto.pb.user.BindAuthRequest} returns this\n */\nproto.pb.user.BindAuthRequest.prototype.setAuthType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional string auth_id = 2;\n * @return {string}\n */\nproto.pb.user.BindAuthRequest.prototype.getAuthId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.BindAuthRequest} returns this\n */\nproto.pb.user.BindAuthRequest.prototype.setAuthId = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string auth_token = 3;\n * @return {string}\n */\nproto.pb.user.BindAuthRequest.prototype.getAuthToken = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.BindAuthRequest} returns this\n */\nproto.pb.user.BindAuthRequest.prototype.setAuthToken = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.UnbindAuthRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.UnbindAuthRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.UnbindAuthRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UnbindAuthRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    authType: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    authId: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.UnbindAuthRequest}\n */\nproto.pb.user.UnbindAuthRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.UnbindAuthRequest;\n  return proto.pb.user.UnbindAuthRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.UnbindAuthRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.UnbindAuthRequest}\n */\nproto.pb.user.UnbindAuthRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.pb.AuthType} */ (reader.readEnum());\n      msg.setAuthType(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAuthId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.UnbindAuthRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.UnbindAuthRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.UnbindAuthRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UnbindAuthRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAuthType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getAuthId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional pb.AuthType auth_type = 1;\n * @return {!proto.pb.AuthType}\n */\nproto.pb.user.UnbindAuthRequest.prototype.getAuthType = function() {\n  return /** @type {!proto.pb.AuthType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.pb.AuthType} value\n * @return {!proto.pb.user.UnbindAuthRequest} returns this\n */\nproto.pb.user.UnbindAuthRequest.prototype.setAuthType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional string auth_id = 2;\n * @return {string}\n */\nproto.pb.user.UnbindAuthRequest.prototype.getAuthId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.UnbindAuthRequest} returns this\n */\nproto.pb.user.UnbindAuthRequest.prototype.setAuthId = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.AttributionRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.AttributionRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.AttributionRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AttributionRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    deviceId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    trackerToken: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    trackerName: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    network: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n    campaign: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\n    adgroup: jspb.Message.getFieldWithDefault(msg, 6, \"\"),\n    creative: jspb.Message.getFieldWithDefault(msg, 7, \"\"),\n    clickLabel: jspb.Message.getFieldWithDefault(msg, 8, \"\"),\n    adid: jspb.Message.getFieldWithDefault(msg, 9, \"\"),\n    costType: jspb.Message.getFieldWithDefault(msg, 10, \"\"),\n    costAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),\n    costCurrency: jspb.Message.getFieldWithDefault(msg, 12, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.AttributionRequest}\n */\nproto.pb.user.AttributionRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.AttributionRequest;\n  return proto.pb.user.AttributionRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.AttributionRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.AttributionRequest}\n */\nproto.pb.user.AttributionRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDeviceId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setTrackerToken(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setTrackerName(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setNetwork(value);\n      break;\n    case 5:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCampaign(value);\n      break;\n    case 6:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAdgroup(value);\n      break;\n    case 7:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCreative(value);\n      break;\n    case 8:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setClickLabel(value);\n      break;\n    case 9:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAdid(value);\n      break;\n    case 10:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCostType(value);\n      break;\n    case 11:\n      var value = /** @type {number} */ (reader.readFloat());\n      msg.setCostAmount(value);\n      break;\n    case 12:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCostCurrency(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.AttributionRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.AttributionRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.AttributionRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AttributionRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDeviceId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getTrackerToken();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getTrackerName();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getNetwork();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f = message.getCampaign();\n  if (f.length > 0) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f = message.getAdgroup();\n  if (f.length > 0) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f = message.getCreative();\n  if (f.length > 0) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f = message.getClickLabel();\n  if (f.length > 0) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n  f = message.getAdid();\n  if (f.length > 0) {\n    writer.writeString(\n      9,\n      f\n    );\n  }\n  f = message.getCostType();\n  if (f.length > 0) {\n    writer.writeString(\n      10,\n      f\n    );\n  }\n  f = message.getCostAmount();\n  if (f !== 0.0) {\n    writer.writeFloat(\n      11,\n      f\n    );\n  }\n  f = message.getCostCurrency();\n  if (f.length > 0) {\n    writer.writeString(\n      12,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string device_id = 1;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getDeviceId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setDeviceId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string tracker_token = 2;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getTrackerToken = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setTrackerToken = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string tracker_name = 3;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getTrackerName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setTrackerName = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string network = 4;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getNetwork = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setNetwork = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n/**\n * optional string campaign = 5;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getCampaign = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setCampaign = function(value) {\n  return jspb.Message.setProto3StringField(this, 5, value);\n};\n\n\n/**\n * optional string adgroup = 6;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getAdgroup = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setAdgroup = function(value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n\n\n/**\n * optional string creative = 7;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getCreative = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setCreative = function(value) {\n  return jspb.Message.setProto3StringField(this, 7, value);\n};\n\n\n/**\n * optional string click_label = 8;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getClickLabel = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setClickLabel = function(value) {\n  return jspb.Message.setProto3StringField(this, 8, value);\n};\n\n\n/**\n * optional string adid = 9;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getAdid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setAdid = function(value) {\n  return jspb.Message.setProto3StringField(this, 9, value);\n};\n\n\n/**\n * optional string cost_type = 10;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getCostType = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setCostType = function(value) {\n  return jspb.Message.setProto3StringField(this, 10, value);\n};\n\n\n/**\n * optional float cost_amount = 11;\n * @return {number}\n */\nproto.pb.user.AttributionRequest.prototype.getCostAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setCostAmount = function(value) {\n  return jspb.Message.setProto3FloatField(this, 11, value);\n};\n\n\n/**\n * optional string cost_currency = 12;\n * @return {string}\n */\nproto.pb.user.AttributionRequest.prototype.getCostCurrency = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AttributionRequest} returns this\n */\nproto.pb.user.AttributionRequest.prototype.setCostCurrency = function(value) {\n  return jspb.Message.setProto3StringField(this, 12, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.AttributionReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.AttributionReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.AttributionReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AttributionReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    installId: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.AttributionReply}\n */\nproto.pb.user.AttributionReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.AttributionReply;\n  return proto.pb.user.AttributionReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.AttributionReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.AttributionReply}\n */\nproto.pb.user.AttributionReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setInstallId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.AttributionReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.AttributionReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.AttributionReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AttributionReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getInstallId();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 install_id = 1;\n * @return {number}\n */\nproto.pb.user.AttributionReply.prototype.getInstallId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.AttributionReply} returns this\n */\nproto.pb.user.AttributionReply.prototype.setInstallId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.CheckinRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.CheckinRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.CheckinRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.CheckinRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    continuousDays: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.CheckinRequest}\n */\nproto.pb.user.CheckinRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.CheckinRequest;\n  return proto.pb.user.CheckinRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.CheckinRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.CheckinRequest}\n */\nproto.pb.user.CheckinRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setContinuousDays(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.CheckinRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.CheckinRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.CheckinRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.CheckinRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getContinuousDays();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 continuous_days = 1;\n * @return {number}\n */\nproto.pb.user.CheckinRequest.prototype.getContinuousDays = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.CheckinRequest} returns this\n */\nproto.pb.user.CheckinRequest.prototype.setContinuousDays = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.ConfigRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.ConfigRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.ConfigRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ConfigRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),\n    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),\n    deviceId: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    networkType: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    version: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    installId: jspb.Message.getFieldWithDefault(msg, 6, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.ConfigRequest}\n */\nproto.pb.user.ConfigRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.ConfigRequest;\n  return proto.pb.user.ConfigRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.ConfigRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.ConfigRequest}\n */\nproto.pb.user.ConfigRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readFloat());\n      msg.setLongitude(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readFloat());\n      msg.setLatitude(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDeviceId(value);\n      break;\n    case 4:\n      var value = /** @type {!proto.pb.NetworkType} */ (reader.readEnum());\n      msg.setNetworkType(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setVersion(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setInstallId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.ConfigRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.ConfigRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.ConfigRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ConfigRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getLongitude();\n  if (f !== 0.0) {\n    writer.writeFloat(\n      1,\n      f\n    );\n  }\n  f = message.getLatitude();\n  if (f !== 0.0) {\n    writer.writeFloat(\n      2,\n      f\n    );\n  }\n  f = message.getDeviceId();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getNetworkType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n  f = message.getVersion();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getInstallId();\n  if (f !== 0) {\n    writer.writeUint32(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional float longitude = 1;\n * @return {number}\n */\nproto.pb.user.ConfigRequest.prototype.getLongitude = function() {\n  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ConfigRequest} returns this\n */\nproto.pb.user.ConfigRequest.prototype.setLongitude = function(value) {\n  return jspb.Message.setProto3FloatField(this, 1, value);\n};\n\n\n/**\n * optional float latitude = 2;\n * @return {number}\n */\nproto.pb.user.ConfigRequest.prototype.getLatitude = function() {\n  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ConfigRequest} returns this\n */\nproto.pb.user.ConfigRequest.prototype.setLatitude = function(value) {\n  return jspb.Message.setProto3FloatField(this, 2, value);\n};\n\n\n/**\n * optional string device_id = 3;\n * @return {string}\n */\nproto.pb.user.ConfigRequest.prototype.getDeviceId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.ConfigRequest} returns this\n */\nproto.pb.user.ConfigRequest.prototype.setDeviceId = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional pb.NetworkType network_type = 4;\n * @return {!proto.pb.NetworkType}\n */\nproto.pb.user.ConfigRequest.prototype.getNetworkType = function() {\n  return /** @type {!proto.pb.NetworkType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {!proto.pb.NetworkType} value\n * @return {!proto.pb.user.ConfigRequest} returns this\n */\nproto.pb.user.ConfigRequest.prototype.setNetworkType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 4, value);\n};\n\n\n/**\n * optional uint32 version = 5;\n * @return {number}\n */\nproto.pb.user.ConfigRequest.prototype.getVersion = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ConfigRequest} returns this\n */\nproto.pb.user.ConfigRequest.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional uint32 install_id = 6;\n * @return {number}\n */\nproto.pb.user.ConfigRequest.prototype.getInstallId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ConfigRequest} returns this\n */\nproto.pb.user.ConfigRequest.prototype.setInstallId = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.ConfigReply.repeatedFields_ = [1,2,3,4];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.ConfigReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.ConfigReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.ConfigReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ConfigReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    checkinConfigsList: jspb.Message.toObjectList(msg.getCheckinConfigsList(),\n    usertype_pb.CheckinConfig.toObject, includeInstance),\n    giftConfigsList: jspb.Message.toObjectList(msg.getGiftConfigsList(),\n    usertype_pb.GiftConfig.toObject, includeInstance),\n    vipConfigsList: jspb.Message.toObjectList(msg.getVipConfigsList(),\n    usertype_pb.VipConfig.toObject, includeInstance),\n    bannerConfigsList: jspb.Message.toObjectList(msg.getBannerConfigsList(),\n    usertype_pb.BannerConfig.toObject, includeInstance),\n    freeMessageCount: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    agoraAppId: jspb.Message.getFieldWithDefault(msg, 6, \"\"),\n    rcAppKey: jspb.Message.getFieldWithDefault(msg, 7, \"\"),\n    showUpgrade: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),\n    forceUpgrade: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),\n    upgradeUrl: jspb.Message.getFieldWithDefault(msg, 10, \"\"),\n    upgradeTip: jspb.Message.getFieldWithDefault(msg, 11, \"\"),\n    heartbeatInterval: jspb.Message.getFieldWithDefault(msg, 12, 0),\n    dndPeriod: jspb.Message.getFieldWithDefault(msg, 13, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.ConfigReply}\n */\nproto.pb.user.ConfigReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.ConfigReply;\n  return proto.pb.user.ConfigReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.ConfigReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.ConfigReply}\n */\nproto.pb.user.ConfigReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new usertype_pb.CheckinConfig;\n      reader.readMessage(value,usertype_pb.CheckinConfig.deserializeBinaryFromReader);\n      msg.addCheckinConfigs(value);\n      break;\n    case 2:\n      var value = new usertype_pb.GiftConfig;\n      reader.readMessage(value,usertype_pb.GiftConfig.deserializeBinaryFromReader);\n      msg.addGiftConfigs(value);\n      break;\n    case 3:\n      var value = new usertype_pb.VipConfig;\n      reader.readMessage(value,usertype_pb.VipConfig.deserializeBinaryFromReader);\n      msg.addVipConfigs(value);\n      break;\n    case 4:\n      var value = new usertype_pb.BannerConfig;\n      reader.readMessage(value,usertype_pb.BannerConfig.deserializeBinaryFromReader);\n      msg.addBannerConfigs(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setFreeMessageCount(value);\n      break;\n    case 6:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAgoraAppId(value);\n      break;\n    case 7:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRcAppKey(value);\n      break;\n    case 8:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setShowUpgrade(value);\n      break;\n    case 9:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setForceUpgrade(value);\n      break;\n    case 10:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setUpgradeUrl(value);\n      break;\n    case 11:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setUpgradeTip(value);\n      break;\n    case 12:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setHeartbeatInterval(value);\n      break;\n    case 13:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setDndPeriod(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.ConfigReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.ConfigReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.ConfigReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ConfigReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCheckinConfigsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      usertype_pb.CheckinConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getGiftConfigsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      usertype_pb.GiftConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getVipConfigsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      usertype_pb.VipConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getBannerConfigsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      4,\n      f,\n      usertype_pb.BannerConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getFreeMessageCount();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getAgoraAppId();\n  if (f.length > 0) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f = message.getRcAppKey();\n  if (f.length > 0) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f = message.getShowUpgrade();\n  if (f) {\n    writer.writeBool(\n      8,\n      f\n    );\n  }\n  f = message.getForceUpgrade();\n  if (f) {\n    writer.writeBool(\n      9,\n      f\n    );\n  }\n  f = message.getUpgradeUrl();\n  if (f.length > 0) {\n    writer.writeString(\n      10,\n      f\n    );\n  }\n  f = message.getUpgradeTip();\n  if (f.length > 0) {\n    writer.writeString(\n      11,\n      f\n    );\n  }\n  f = message.getHeartbeatInterval();\n  if (f !== 0) {\n    writer.writeUint32(\n      12,\n      f\n    );\n  }\n  f = message.getDndPeriod();\n  if (f !== 0) {\n    writer.writeUint32(\n      13,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated pb.CheckinConfig checkin_configs = 1;\n * @return {!Array<!proto.pb.CheckinConfig>}\n */\nproto.pb.user.ConfigReply.prototype.getCheckinConfigsList = function() {\n  return /** @type{!Array<!proto.pb.CheckinConfig>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.CheckinConfig, 1));\n};\n\n\n/**\n * @param {!Array<!proto.pb.CheckinConfig>} value\n * @return {!proto.pb.user.ConfigReply} returns this\n*/\nproto.pb.user.ConfigReply.prototype.setCheckinConfigsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.pb.CheckinConfig=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.CheckinConfig}\n */\nproto.pb.user.ConfigReply.prototype.addCheckinConfigs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.CheckinConfig, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.clearCheckinConfigsList = function() {\n  return this.setCheckinConfigsList([]);\n};\n\n\n/**\n * repeated pb.GiftConfig gift_configs = 2;\n * @return {!Array<!proto.pb.GiftConfig>}\n */\nproto.pb.user.ConfigReply.prototype.getGiftConfigsList = function() {\n  return /** @type{!Array<!proto.pb.GiftConfig>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.GiftConfig, 2));\n};\n\n\n/**\n * @param {!Array<!proto.pb.GiftConfig>} value\n * @return {!proto.pb.user.ConfigReply} returns this\n*/\nproto.pb.user.ConfigReply.prototype.setGiftConfigsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.pb.GiftConfig=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.GiftConfig}\n */\nproto.pb.user.ConfigReply.prototype.addGiftConfigs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.GiftConfig, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.clearGiftConfigsList = function() {\n  return this.setGiftConfigsList([]);\n};\n\n\n/**\n * repeated pb.VipConfig vip_configs = 3;\n * @return {!Array<!proto.pb.VipConfig>}\n */\nproto.pb.user.ConfigReply.prototype.getVipConfigsList = function() {\n  return /** @type{!Array<!proto.pb.VipConfig>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.VipConfig, 3));\n};\n\n\n/**\n * @param {!Array<!proto.pb.VipConfig>} value\n * @return {!proto.pb.user.ConfigReply} returns this\n*/\nproto.pb.user.ConfigReply.prototype.setVipConfigsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.pb.VipConfig=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.VipConfig}\n */\nproto.pb.user.ConfigReply.prototype.addVipConfigs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pb.VipConfig, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.clearVipConfigsList = function() {\n  return this.setVipConfigsList([]);\n};\n\n\n/**\n * repeated pb.BannerConfig banner_configs = 4;\n * @return {!Array<!proto.pb.BannerConfig>}\n */\nproto.pb.user.ConfigReply.prototype.getBannerConfigsList = function() {\n  return /** @type{!Array<!proto.pb.BannerConfig>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.BannerConfig, 4));\n};\n\n\n/**\n * @param {!Array<!proto.pb.BannerConfig>} value\n * @return {!proto.pb.user.ConfigReply} returns this\n*/\nproto.pb.user.ConfigReply.prototype.setBannerConfigsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n\n\n/**\n * @param {!proto.pb.BannerConfig=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.BannerConfig}\n */\nproto.pb.user.ConfigReply.prototype.addBannerConfigs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.BannerConfig, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.clearBannerConfigsList = function() {\n  return this.setBannerConfigsList([]);\n};\n\n\n/**\n * optional uint32 free_message_count = 5;\n * @return {number}\n */\nproto.pb.user.ConfigReply.prototype.getFreeMessageCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.setFreeMessageCount = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional string agora_app_id = 6;\n * @return {string}\n */\nproto.pb.user.ConfigReply.prototype.getAgoraAppId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.setAgoraAppId = function(value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n\n\n/**\n * optional string rc_app_key = 7;\n * @return {string}\n */\nproto.pb.user.ConfigReply.prototype.getRcAppKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.setRcAppKey = function(value) {\n  return jspb.Message.setProto3StringField(this, 7, value);\n};\n\n\n/**\n * optional bool show_upgrade = 8;\n * @return {boolean}\n */\nproto.pb.user.ConfigReply.prototype.getShowUpgrade = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.setShowUpgrade = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 8, value);\n};\n\n\n/**\n * optional bool force_upgrade = 9;\n * @return {boolean}\n */\nproto.pb.user.ConfigReply.prototype.getForceUpgrade = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.setForceUpgrade = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 9, value);\n};\n\n\n/**\n * optional string upgrade_url = 10;\n * @return {string}\n */\nproto.pb.user.ConfigReply.prototype.getUpgradeUrl = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.setUpgradeUrl = function(value) {\n  return jspb.Message.setProto3StringField(this, 10, value);\n};\n\n\n/**\n * optional string upgrade_tip = 11;\n * @return {string}\n */\nproto.pb.user.ConfigReply.prototype.getUpgradeTip = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.setUpgradeTip = function(value) {\n  return jspb.Message.setProto3StringField(this, 11, value);\n};\n\n\n/**\n * optional uint32 heartbeat_interval = 12;\n * @return {number}\n */\nproto.pb.user.ConfigReply.prototype.getHeartbeatInterval = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.setHeartbeatInterval = function(value) {\n  return jspb.Message.setProto3IntField(this, 12, value);\n};\n\n\n/**\n * optional uint32 dnd_period = 13;\n * @return {number}\n */\nproto.pb.user.ConfigReply.prototype.getDndPeriod = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ConfigReply} returns this\n */\nproto.pb.user.ConfigReply.prototype.setDndPeriod = function(value) {\n  return jspb.Message.setProto3IntField(this, 13, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.PayChannelRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.PayChannelRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.PayChannelRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.PayChannelRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    country: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    currency: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    getAll: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),\n    subscription: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.PayChannelRequest}\n */\nproto.pb.user.PayChannelRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.PayChannelRequest;\n  return proto.pb.user.PayChannelRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.PayChannelRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.PayChannelRequest}\n */\nproto.pb.user.PayChannelRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCountry(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCurrency(value);\n      break;\n    case 10:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setGetAll(value);\n      break;\n    case 11:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setSubscription(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.PayChannelRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.PayChannelRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.PayChannelRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.PayChannelRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCountry();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCurrency();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getGetAll();\n  if (f) {\n    writer.writeBool(\n      10,\n      f\n    );\n  }\n  f = message.getSubscription();\n  if (f) {\n    writer.writeBool(\n      11,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string country = 1;\n * @return {string}\n */\nproto.pb.user.PayChannelRequest.prototype.getCountry = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.PayChannelRequest} returns this\n */\nproto.pb.user.PayChannelRequest.prototype.setCountry = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string currency = 2;\n * @return {string}\n */\nproto.pb.user.PayChannelRequest.prototype.getCurrency = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.PayChannelRequest} returns this\n */\nproto.pb.user.PayChannelRequest.prototype.setCurrency = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bool get_all = 10;\n * @return {boolean}\n */\nproto.pb.user.PayChannelRequest.prototype.getGetAll = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.pb.user.PayChannelRequest} returns this\n */\nproto.pb.user.PayChannelRequest.prototype.setGetAll = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 10, value);\n};\n\n\n/**\n * optional bool subscription = 11;\n * @return {boolean}\n */\nproto.pb.user.PayChannelRequest.prototype.getSubscription = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.pb.user.PayChannelRequest} returns this\n */\nproto.pb.user.PayChannelRequest.prototype.setSubscription = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 11, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.PayChannelReply.repeatedFields_ = [1,10];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.PayChannelReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.PayChannelReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.PayChannelReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.PayChannelReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    payChannelsList: jspb.Message.toObjectList(msg.getPayChannelsList(),\n    usertype_pb.PayChannel.toObject, includeInstance),\n    countryConfigsList: jspb.Message.toObjectList(msg.getCountryConfigsList(),\n    usertype_pb.CountryConfig.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.PayChannelReply}\n */\nproto.pb.user.PayChannelReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.PayChannelReply;\n  return proto.pb.user.PayChannelReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.PayChannelReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.PayChannelReply}\n */\nproto.pb.user.PayChannelReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new usertype_pb.PayChannel;\n      reader.readMessage(value,usertype_pb.PayChannel.deserializeBinaryFromReader);\n      msg.addPayChannels(value);\n      break;\n    case 10:\n      var value = new usertype_pb.CountryConfig;\n      reader.readMessage(value,usertype_pb.CountryConfig.deserializeBinaryFromReader);\n      msg.addCountryConfigs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.PayChannelReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.PayChannelReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.PayChannelReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.PayChannelReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPayChannelsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      usertype_pb.PayChannel.serializeBinaryToWriter\n    );\n  }\n  f = message.getCountryConfigsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      10,\n      f,\n      usertype_pb.CountryConfig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated pb.PayChannel pay_channels = 1;\n * @return {!Array<!proto.pb.PayChannel>}\n */\nproto.pb.user.PayChannelReply.prototype.getPayChannelsList = function() {\n  return /** @type{!Array<!proto.pb.PayChannel>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.PayChannel, 1));\n};\n\n\n/**\n * @param {!Array<!proto.pb.PayChannel>} value\n * @return {!proto.pb.user.PayChannelReply} returns this\n*/\nproto.pb.user.PayChannelReply.prototype.setPayChannelsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.pb.PayChannel=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.PayChannel}\n */\nproto.pb.user.PayChannelReply.prototype.addPayChannels = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.PayChannel, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.PayChannelReply} returns this\n */\nproto.pb.user.PayChannelReply.prototype.clearPayChannelsList = function() {\n  return this.setPayChannelsList([]);\n};\n\n\n/**\n * repeated pb.CountryConfig country_configs = 10;\n * @return {!Array<!proto.pb.CountryConfig>}\n */\nproto.pb.user.PayChannelReply.prototype.getCountryConfigsList = function() {\n  return /** @type{!Array<!proto.pb.CountryConfig>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.CountryConfig, 10));\n};\n\n\n/**\n * @param {!Array<!proto.pb.CountryConfig>} value\n * @return {!proto.pb.user.PayChannelReply} returns this\n*/\nproto.pb.user.PayChannelReply.prototype.setCountryConfigsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 10, value);\n};\n\n\n/**\n * @param {!proto.pb.CountryConfig=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.CountryConfig}\n */\nproto.pb.user.PayChannelReply.prototype.addCountryConfigs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pb.CountryConfig, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.PayChannelReply} returns this\n */\nproto.pb.user.PayChannelReply.prototype.clearCountryConfigsList = function() {\n  return this.setCountryConfigsList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.GiftConfigRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.GiftConfigRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.GiftConfigRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.GiftConfigRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    lang: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.GiftConfigRequest}\n */\nproto.pb.user.GiftConfigRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.GiftConfigRequest;\n  return proto.pb.user.GiftConfigRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.GiftConfigRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.GiftConfigRequest}\n */\nproto.pb.user.GiftConfigRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setLang(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.GiftConfigRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.GiftConfigRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.GiftConfigRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.GiftConfigRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getLang();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string lang = 1;\n * @return {string}\n */\nproto.pb.user.GiftConfigRequest.prototype.getLang = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.GiftConfigRequest} returns this\n */\nproto.pb.user.GiftConfigRequest.prototype.setLang = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.GiftConfigReply.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.GiftConfigReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.GiftConfigReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.GiftConfigReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.GiftConfigReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    giftConfigsList: jspb.Message.toObjectList(msg.getGiftConfigsList(),\n    usertype_pb.GiftConfig.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.GiftConfigReply}\n */\nproto.pb.user.GiftConfigReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.GiftConfigReply;\n  return proto.pb.user.GiftConfigReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.GiftConfigReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.GiftConfigReply}\n */\nproto.pb.user.GiftConfigReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new usertype_pb.GiftConfig;\n      reader.readMessage(value,usertype_pb.GiftConfig.deserializeBinaryFromReader);\n      msg.addGiftConfigs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.GiftConfigReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.GiftConfigReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.GiftConfigReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.GiftConfigReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGiftConfigsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      usertype_pb.GiftConfig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated pb.GiftConfig gift_configs = 1;\n * @return {!Array<!proto.pb.GiftConfig>}\n */\nproto.pb.user.GiftConfigReply.prototype.getGiftConfigsList = function() {\n  return /** @type{!Array<!proto.pb.GiftConfig>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.GiftConfig, 1));\n};\n\n\n/**\n * @param {!Array<!proto.pb.GiftConfig>} value\n * @return {!proto.pb.user.GiftConfigReply} returns this\n*/\nproto.pb.user.GiftConfigReply.prototype.setGiftConfigsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.pb.GiftConfig=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.GiftConfig}\n */\nproto.pb.user.GiftConfigReply.prototype.addGiftConfigs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.GiftConfig, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.GiftConfigReply} returns this\n */\nproto.pb.user.GiftConfigReply.prototype.clearGiftConfigsList = function() {\n  return this.setGiftConfigsList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.AnchorListRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.AnchorListRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.AnchorListRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorListRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    count: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    cursor: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.AnchorListRequest}\n */\nproto.pb.user.AnchorListRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.AnchorListRequest;\n  return proto.pb.user.AnchorListRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.AnchorListRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.AnchorListRequest}\n */\nproto.pb.user.AnchorListRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.pb.user.AnchorListType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCount(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCursor(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.AnchorListRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.AnchorListRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.AnchorListRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorListRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getCount();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getCursor();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional AnchorListType type = 1;\n * @return {!proto.pb.user.AnchorListType}\n */\nproto.pb.user.AnchorListRequest.prototype.getType = function() {\n  return /** @type {!proto.pb.user.AnchorListType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.pb.user.AnchorListType} value\n * @return {!proto.pb.user.AnchorListRequest} returns this\n */\nproto.pb.user.AnchorListRequest.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional uint32 count = 2;\n * @return {number}\n */\nproto.pb.user.AnchorListRequest.prototype.getCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.AnchorListRequest} returns this\n */\nproto.pb.user.AnchorListRequest.prototype.setCount = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional string cursor = 3;\n * @return {string}\n */\nproto.pb.user.AnchorListRequest.prototype.getCursor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AnchorListRequest} returns this\n */\nproto.pb.user.AnchorListRequest.prototype.setCursor = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.AnchorListReply.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.AnchorListReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.AnchorListReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.AnchorListReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorListReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    anchorsList: jspb.Message.toObjectList(msg.getAnchorsList(),\n    usertype_pb.AnchorInfo.toObject, includeInstance),\n    cursor: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.AnchorListReply}\n */\nproto.pb.user.AnchorListReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.AnchorListReply;\n  return proto.pb.user.AnchorListReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.AnchorListReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.AnchorListReply}\n */\nproto.pb.user.AnchorListReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new usertype_pb.AnchorInfo;\n      reader.readMessage(value,usertype_pb.AnchorInfo.deserializeBinaryFromReader);\n      msg.addAnchors(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCursor(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setHasMore(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.AnchorListReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.AnchorListReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.AnchorListReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorListReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAnchorsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      usertype_pb.AnchorInfo.serializeBinaryToWriter\n    );\n  }\n  f = message.getCursor();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getHasMore();\n  if (f) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated pb.AnchorInfo anchors = 1;\n * @return {!Array<!proto.pb.AnchorInfo>}\n */\nproto.pb.user.AnchorListReply.prototype.getAnchorsList = function() {\n  return /** @type{!Array<!proto.pb.AnchorInfo>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.AnchorInfo, 1));\n};\n\n\n/**\n * @param {!Array<!proto.pb.AnchorInfo>} value\n * @return {!proto.pb.user.AnchorListReply} returns this\n*/\nproto.pb.user.AnchorListReply.prototype.setAnchorsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.pb.AnchorInfo=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.AnchorInfo}\n */\nproto.pb.user.AnchorListReply.prototype.addAnchors = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.AnchorInfo, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.AnchorListReply} returns this\n */\nproto.pb.user.AnchorListReply.prototype.clearAnchorsList = function() {\n  return this.setAnchorsList([]);\n};\n\n\n/**\n * optional string cursor = 2;\n * @return {string}\n */\nproto.pb.user.AnchorListReply.prototype.getCursor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.AnchorListReply} returns this\n */\nproto.pb.user.AnchorListReply.prototype.setCursor = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bool has_more = 3;\n * @return {boolean}\n */\nproto.pb.user.AnchorListReply.prototype.getHasMore = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.pb.user.AnchorListReply} returns this\n */\nproto.pb.user.AnchorListReply.prototype.setHasMore = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.AnchorInfoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.AnchorInfoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.AnchorInfoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorInfoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    anchorId: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.AnchorInfoRequest}\n */\nproto.pb.user.AnchorInfoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.AnchorInfoRequest;\n  return proto.pb.user.AnchorInfoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.AnchorInfoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.AnchorInfoRequest}\n */\nproto.pb.user.AnchorInfoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setAnchorId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.AnchorInfoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.AnchorInfoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.AnchorInfoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorInfoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAnchorId();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 anchor_id = 1;\n * @return {number}\n */\nproto.pb.user.AnchorInfoRequest.prototype.getAnchorId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.AnchorInfoRequest} returns this\n */\nproto.pb.user.AnchorInfoRequest.prototype.setAnchorId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.AnchorIdsReply.repeatedFields_ = [1,2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.AnchorIdsReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.AnchorIdsReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.AnchorIdsReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorIdsReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    followIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    blockIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.AnchorIdsReply}\n */\nproto.pb.user.AnchorIdsReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.AnchorIdsReply;\n  return proto.pb.user.AnchorIdsReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.AnchorIdsReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.AnchorIdsReply}\n */\nproto.pb.user.AnchorIdsReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addFollowIds(values[i]);\n      }\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addBlockIds(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.AnchorIdsReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.AnchorIdsReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.AnchorIdsReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorIdsReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFollowIdsList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getBlockIdsList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 follow_ids = 1;\n * @return {!Array<number>}\n */\nproto.pb.user.AnchorIdsReply.prototype.getFollowIdsList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.pb.user.AnchorIdsReply} returns this\n */\nproto.pb.user.AnchorIdsReply.prototype.setFollowIdsList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.pb.user.AnchorIdsReply} returns this\n */\nproto.pb.user.AnchorIdsReply.prototype.addFollowIds = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.AnchorIdsReply} returns this\n */\nproto.pb.user.AnchorIdsReply.prototype.clearFollowIdsList = function() {\n  return this.setFollowIdsList([]);\n};\n\n\n/**\n * repeated uint32 block_ids = 2;\n * @return {!Array<number>}\n */\nproto.pb.user.AnchorIdsReply.prototype.getBlockIdsList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.pb.user.AnchorIdsReply} returns this\n */\nproto.pb.user.AnchorIdsReply.prototype.setBlockIdsList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.pb.user.AnchorIdsReply} returns this\n */\nproto.pb.user.AnchorIdsReply.prototype.addBlockIds = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.AnchorIdsReply} returns this\n */\nproto.pb.user.AnchorIdsReply.prototype.clearBlockIdsList = function() {\n  return this.setBlockIdsList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.AnchorRelationRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.AnchorRelationRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.AnchorRelationRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorRelationRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    opType: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    anchorId: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.AnchorRelationRequest}\n */\nproto.pb.user.AnchorRelationRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.AnchorRelationRequest;\n  return proto.pb.user.AnchorRelationRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.AnchorRelationRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.AnchorRelationRequest}\n */\nproto.pb.user.AnchorRelationRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.pb.user.RelationOpType} */ (reader.readEnum());\n      msg.setOpType(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setAnchorId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.AnchorRelationRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.AnchorRelationRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.AnchorRelationRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.AnchorRelationRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOpType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getAnchorId();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional RelationOpType op_type = 1;\n * @return {!proto.pb.user.RelationOpType}\n */\nproto.pb.user.AnchorRelationRequest.prototype.getOpType = function() {\n  return /** @type {!proto.pb.user.RelationOpType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.pb.user.RelationOpType} value\n * @return {!proto.pb.user.AnchorRelationRequest} returns this\n */\nproto.pb.user.AnchorRelationRequest.prototype.setOpType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional uint32 anchor_id = 2;\n * @return {number}\n */\nproto.pb.user.AnchorRelationRequest.prototype.getAnchorId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.AnchorRelationRequest} returns this\n */\nproto.pb.user.AnchorRelationRequest.prototype.setAnchorId = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.UserListRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.UserListRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.UserListRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UserListRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    anchorId: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    count: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    cursor: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.UserListRequest}\n */\nproto.pb.user.UserListRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.UserListRequest;\n  return proto.pb.user.UserListRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.UserListRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.UserListRequest}\n */\nproto.pb.user.UserListRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.pb.user.UserListType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setAnchorId(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCount(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCursor(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.UserListRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.UserListRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.UserListRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UserListRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getAnchorId();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getCount();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getCursor();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional UserListType type = 1;\n * @return {!proto.pb.user.UserListType}\n */\nproto.pb.user.UserListRequest.prototype.getType = function() {\n  return /** @type {!proto.pb.user.UserListType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.pb.user.UserListType} value\n * @return {!proto.pb.user.UserListRequest} returns this\n */\nproto.pb.user.UserListRequest.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional uint32 anchor_id = 2;\n * @return {number}\n */\nproto.pb.user.UserListRequest.prototype.getAnchorId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.UserListRequest} returns this\n */\nproto.pb.user.UserListRequest.prototype.setAnchorId = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 count = 3;\n * @return {number}\n */\nproto.pb.user.UserListRequest.prototype.getCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.UserListRequest} returns this\n */\nproto.pb.user.UserListRequest.prototype.setCount = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional string cursor = 4;\n * @return {string}\n */\nproto.pb.user.UserListRequest.prototype.getCursor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.UserListRequest} returns this\n */\nproto.pb.user.UserListRequest.prototype.setCursor = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.UserListReply.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.UserListReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.UserListReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.UserListReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UserListReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    usersList: jspb.Message.toObjectList(msg.getUsersList(),\n    usertype_pb.User.toObject, includeInstance),\n    cursor: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.UserListReply}\n */\nproto.pb.user.UserListReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.UserListReply;\n  return proto.pb.user.UserListReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.UserListReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.UserListReply}\n */\nproto.pb.user.UserListReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new usertype_pb.User;\n      reader.readMessage(value,usertype_pb.User.deserializeBinaryFromReader);\n      msg.addUsers(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCursor(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setHasMore(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.UserListReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.UserListReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.UserListReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UserListReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getUsersList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      usertype_pb.User.serializeBinaryToWriter\n    );\n  }\n  f = message.getCursor();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getHasMore();\n  if (f) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated pb.User users = 1;\n * @return {!Array<!proto.pb.User>}\n */\nproto.pb.user.UserListReply.prototype.getUsersList = function() {\n  return /** @type{!Array<!proto.pb.User>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.User, 1));\n};\n\n\n/**\n * @param {!Array<!proto.pb.User>} value\n * @return {!proto.pb.user.UserListReply} returns this\n*/\nproto.pb.user.UserListReply.prototype.setUsersList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.pb.User=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.User}\n */\nproto.pb.user.UserListReply.prototype.addUsers = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.User, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.UserListReply} returns this\n */\nproto.pb.user.UserListReply.prototype.clearUsersList = function() {\n  return this.setUsersList([]);\n};\n\n\n/**\n * optional string cursor = 2;\n * @return {string}\n */\nproto.pb.user.UserListReply.prototype.getCursor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.UserListReply} returns this\n */\nproto.pb.user.UserListReply.prototype.setCursor = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bool has_more = 3;\n * @return {boolean}\n */\nproto.pb.user.UserListReply.prototype.getHasMore = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.pb.user.UserListReply} returns this\n */\nproto.pb.user.UserListReply.prototype.setHasMore = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.TransactionListRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.TransactionListRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.TransactionListRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.TransactionListRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    count: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    cursor: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.TransactionListRequest}\n */\nproto.pb.user.TransactionListRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.TransactionListRequest;\n  return proto.pb.user.TransactionListRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.TransactionListRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.TransactionListRequest}\n */\nproto.pb.user.TransactionListRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCount(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCursor(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.TransactionListRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.TransactionListRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.TransactionListRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.TransactionListRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCount();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getCursor();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 count = 1;\n * @return {number}\n */\nproto.pb.user.TransactionListRequest.prototype.getCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.TransactionListRequest} returns this\n */\nproto.pb.user.TransactionListRequest.prototype.setCount = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional string cursor = 2;\n * @return {string}\n */\nproto.pb.user.TransactionListRequest.prototype.getCursor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.TransactionListRequest} returns this\n */\nproto.pb.user.TransactionListRequest.prototype.setCursor = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.TransactionListReply.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.TransactionListReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.TransactionListReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.TransactionListReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.TransactionListReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    transList: jspb.Message.toObjectList(msg.getTransList(),\n    usertype_pb.Transaction.toObject, includeInstance),\n    cursor: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.TransactionListReply}\n */\nproto.pb.user.TransactionListReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.TransactionListReply;\n  return proto.pb.user.TransactionListReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.TransactionListReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.TransactionListReply}\n */\nproto.pb.user.TransactionListReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new usertype_pb.Transaction;\n      reader.readMessage(value,usertype_pb.Transaction.deserializeBinaryFromReader);\n      msg.addTrans(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCursor(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setHasMore(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.TransactionListReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.TransactionListReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.TransactionListReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.TransactionListReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTransList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      usertype_pb.Transaction.serializeBinaryToWriter\n    );\n  }\n  f = message.getCursor();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getHasMore();\n  if (f) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated pb.Transaction trans = 1;\n * @return {!Array<!proto.pb.Transaction>}\n */\nproto.pb.user.TransactionListReply.prototype.getTransList = function() {\n  return /** @type{!Array<!proto.pb.Transaction>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.Transaction, 1));\n};\n\n\n/**\n * @param {!Array<!proto.pb.Transaction>} value\n * @return {!proto.pb.user.TransactionListReply} returns this\n*/\nproto.pb.user.TransactionListReply.prototype.setTransList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.pb.Transaction=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.Transaction}\n */\nproto.pb.user.TransactionListReply.prototype.addTrans = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.Transaction, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.TransactionListReply} returns this\n */\nproto.pb.user.TransactionListReply.prototype.clearTransList = function() {\n  return this.setTransList([]);\n};\n\n\n/**\n * optional string cursor = 2;\n * @return {string}\n */\nproto.pb.user.TransactionListReply.prototype.getCursor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.TransactionListReply} returns this\n */\nproto.pb.user.TransactionListReply.prototype.setCursor = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bool has_more = 3;\n * @return {boolean}\n */\nproto.pb.user.TransactionListReply.prototype.getHasMore = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.pb.user.TransactionListReply} returns this\n */\nproto.pb.user.TransactionListReply.prototype.setHasMore = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.SearchAnchorRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.SearchAnchorRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.SearchAnchorRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.SearchAnchorRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keyword: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.SearchAnchorRequest}\n */\nproto.pb.user.SearchAnchorRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.SearchAnchorRequest;\n  return proto.pb.user.SearchAnchorRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.SearchAnchorRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.SearchAnchorRequest}\n */\nproto.pb.user.SearchAnchorRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setKeyword(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.SearchAnchorRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.SearchAnchorRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.SearchAnchorRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.SearchAnchorRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeyword();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string keyword = 1;\n * @return {string}\n */\nproto.pb.user.SearchAnchorRequest.prototype.getKeyword = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.SearchAnchorRequest} returns this\n */\nproto.pb.user.SearchAnchorRequest.prototype.setKeyword = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.SearchAnchorReply.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.SearchAnchorReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.SearchAnchorReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.SearchAnchorReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.SearchAnchorReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    anchorsList: jspb.Message.toObjectList(msg.getAnchorsList(),\n    usertype_pb.AnchorInfo.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.SearchAnchorReply}\n */\nproto.pb.user.SearchAnchorReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.SearchAnchorReply;\n  return proto.pb.user.SearchAnchorReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.SearchAnchorReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.SearchAnchorReply}\n */\nproto.pb.user.SearchAnchorReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new usertype_pb.AnchorInfo;\n      reader.readMessage(value,usertype_pb.AnchorInfo.deserializeBinaryFromReader);\n      msg.addAnchors(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.SearchAnchorReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.SearchAnchorReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.SearchAnchorReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.SearchAnchorReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAnchorsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      usertype_pb.AnchorInfo.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated pb.AnchorInfo anchors = 1;\n * @return {!Array<!proto.pb.AnchorInfo>}\n */\nproto.pb.user.SearchAnchorReply.prototype.getAnchorsList = function() {\n  return /** @type{!Array<!proto.pb.AnchorInfo>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.AnchorInfo, 1));\n};\n\n\n/**\n * @param {!Array<!proto.pb.AnchorInfo>} value\n * @return {!proto.pb.user.SearchAnchorReply} returns this\n*/\nproto.pb.user.SearchAnchorReply.prototype.setAnchorsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.pb.AnchorInfo=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.AnchorInfo}\n */\nproto.pb.user.SearchAnchorReply.prototype.addAnchors = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.AnchorInfo, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.SearchAnchorReply} returns this\n */\nproto.pb.user.SearchAnchorReply.prototype.clearAnchorsList = function() {\n  return this.setAnchorsList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.SendGiftRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.SendGiftRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.SendGiftRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.SendGiftRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    giftId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    anchorId: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    callId: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.SendGiftRequest}\n */\nproto.pb.user.SendGiftRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.SendGiftRequest;\n  return proto.pb.user.SendGiftRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.SendGiftRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.SendGiftRequest}\n */\nproto.pb.user.SendGiftRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setGiftId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setQuantity(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setAnchorId(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setCallId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.SendGiftRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.SendGiftRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.SendGiftRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.SendGiftRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGiftId();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getQuantity();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getAnchorId();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getCallId();\n  if (f !== 0) {\n    writer.writeUint64(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 gift_id = 1;\n * @return {number}\n */\nproto.pb.user.SendGiftRequest.prototype.getGiftId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.SendGiftRequest} returns this\n */\nproto.pb.user.SendGiftRequest.prototype.setGiftId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 quantity = 2;\n * @return {number}\n */\nproto.pb.user.SendGiftRequest.prototype.getQuantity = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.SendGiftRequest} returns this\n */\nproto.pb.user.SendGiftRequest.prototype.setQuantity = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 anchor_id = 3;\n * @return {number}\n */\nproto.pb.user.SendGiftRequest.prototype.getAnchorId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.SendGiftRequest} returns this\n */\nproto.pb.user.SendGiftRequest.prototype.setAnchorId = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint64 call_id = 4;\n * @return {number}\n */\nproto.pb.user.SendGiftRequest.prototype.getCallId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.SendGiftRequest} returns this\n */\nproto.pb.user.SendGiftRequest.prototype.setCallId = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.BuyVipRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.BuyVipRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.BuyVipRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BuyVipRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    vipId: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.BuyVipRequest}\n */\nproto.pb.user.BuyVipRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.BuyVipRequest;\n  return proto.pb.user.BuyVipRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.BuyVipRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.BuyVipRequest}\n */\nproto.pb.user.BuyVipRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setVipId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.BuyVipRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.BuyVipRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.BuyVipRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BuyVipRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getVipId();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 vip_id = 1;\n * @return {number}\n */\nproto.pb.user.BuyVipRequest.prototype.getVipId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.BuyVipRequest} returns this\n */\nproto.pb.user.BuyVipRequest.prototype.setVipId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.ReportViolationRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.ReportViolationRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.ReportViolationRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ReportViolationRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    anchorId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    type: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    message: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    scene: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.ReportViolationRequest}\n */\nproto.pb.user.ReportViolationRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.ReportViolationRequest;\n  return proto.pb.user.ReportViolationRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.ReportViolationRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.ReportViolationRequest}\n */\nproto.pb.user.ReportViolationRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setAnchorId(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.pb.ViolationType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    case 4:\n      var value = /** @type {!proto.pb.ViolationScene} */ (reader.readEnum());\n      msg.setScene(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.ReportViolationRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.ReportViolationRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.ReportViolationRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ReportViolationRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAnchorId();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getScene();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 anchor_id = 1;\n * @return {number}\n */\nproto.pb.user.ReportViolationRequest.prototype.getAnchorId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ReportViolationRequest} returns this\n */\nproto.pb.user.ReportViolationRequest.prototype.setAnchorId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional pb.ViolationType type = 2;\n * @return {!proto.pb.ViolationType}\n */\nproto.pb.user.ReportViolationRequest.prototype.getType = function() {\n  return /** @type {!proto.pb.ViolationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.pb.ViolationType} value\n * @return {!proto.pb.user.ReportViolationRequest} returns this\n */\nproto.pb.user.ReportViolationRequest.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional string message = 3;\n * @return {string}\n */\nproto.pb.user.ReportViolationRequest.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.ReportViolationRequest} returns this\n */\nproto.pb.user.ReportViolationRequest.prototype.setMessage = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional pb.ViolationScene scene = 4;\n * @return {!proto.pb.ViolationScene}\n */\nproto.pb.user.ReportViolationRequest.prototype.getScene = function() {\n  return /** @type {!proto.pb.ViolationScene} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {!proto.pb.ViolationScene} value\n * @return {!proto.pb.user.ReportViolationRequest} returns this\n */\nproto.pb.user.ReportViolationRequest.prototype.setScene = function(value) {\n  return jspb.Message.setProto3EnumField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.ReportUsageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.ReportUsageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.ReportUsageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ReportUsageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    messageCount: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.ReportUsageRequest}\n */\nproto.pb.user.ReportUsageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.ReportUsageRequest;\n  return proto.pb.user.ReportUsageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.ReportUsageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.ReportUsageRequest}\n */\nproto.pb.user.ReportUsageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setMessageCount(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.ReportUsageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.ReportUsageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.ReportUsageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ReportUsageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessageCount();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 message_count = 1;\n * @return {number}\n */\nproto.pb.user.ReportUsageRequest.prototype.getMessageCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ReportUsageRequest} returns this\n */\nproto.pb.user.ReportUsageRequest.prototype.setMessageCount = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.ReportUsageReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.ReportUsageReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.ReportUsageReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ReportUsageReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    messageQuota: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    messageUsed: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.ReportUsageReply}\n */\nproto.pb.user.ReportUsageReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.ReportUsageReply;\n  return proto.pb.user.ReportUsageReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.ReportUsageReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.ReportUsageReply}\n */\nproto.pb.user.ReportUsageReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setMessageQuota(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setMessageUsed(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.ReportUsageReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.ReportUsageReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.ReportUsageReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ReportUsageReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessageQuota();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getMessageUsed();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 message_quota = 1;\n * @return {number}\n */\nproto.pb.user.ReportUsageReply.prototype.getMessageQuota = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ReportUsageReply} returns this\n */\nproto.pb.user.ReportUsageReply.prototype.setMessageQuota = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 message_used = 2;\n * @return {number}\n */\nproto.pb.user.ReportUsageReply.prototype.getMessageUsed = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ReportUsageReply} returns this\n */\nproto.pb.user.ReportUsageReply.prototype.setMessageUsed = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.MakeCallRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.MakeCallRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.MakeCallRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.MakeCallRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    anchorId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    callType: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.MakeCallRequest}\n */\nproto.pb.user.MakeCallRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.MakeCallRequest;\n  return proto.pb.user.MakeCallRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.MakeCallRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.MakeCallRequest}\n */\nproto.pb.user.MakeCallRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setAnchorId(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.pb.CallType} */ (reader.readEnum());\n      msg.setCallType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.MakeCallRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.MakeCallRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.MakeCallRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.MakeCallRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAnchorId();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getCallType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 anchor_id = 1;\n * @return {number}\n */\nproto.pb.user.MakeCallRequest.prototype.getAnchorId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.MakeCallRequest} returns this\n */\nproto.pb.user.MakeCallRequest.prototype.setAnchorId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional pb.CallType call_type = 2;\n * @return {!proto.pb.CallType}\n */\nproto.pb.user.MakeCallRequest.prototype.getCallType = function() {\n  return /** @type {!proto.pb.CallType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.pb.CallType} value\n * @return {!proto.pb.user.MakeCallRequest} returns this\n */\nproto.pb.user.MakeCallRequest.prototype.setCallType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.MakeCallReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.MakeCallReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.MakeCallReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.MakeCallReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    price: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    callerToken: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    calleeToken: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.MakeCallReply}\n */\nproto.pb.user.MakeCallReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.MakeCallReply;\n  return proto.pb.user.MakeCallReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.MakeCallReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.MakeCallReply}\n */\nproto.pb.user.MakeCallReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setCallId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrice(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallerToken(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCalleeToken(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.MakeCallReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.MakeCallReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.MakeCallReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.MakeCallReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCallId();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getPrice();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getCallerToken();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getCalleeToken();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 call_id = 1;\n * @return {number}\n */\nproto.pb.user.MakeCallReply.prototype.getCallId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.MakeCallReply} returns this\n */\nproto.pb.user.MakeCallReply.prototype.setCallId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 price = 2;\n * @return {number}\n */\nproto.pb.user.MakeCallReply.prototype.getPrice = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.MakeCallReply} returns this\n */\nproto.pb.user.MakeCallReply.prototype.setPrice = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional string caller_token = 3;\n * @return {string}\n */\nproto.pb.user.MakeCallReply.prototype.getCallerToken = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.MakeCallReply} returns this\n */\nproto.pb.user.MakeCallReply.prototype.setCallerToken = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string callee_token = 4;\n * @return {string}\n */\nproto.pb.user.MakeCallReply.prototype.getCalleeToken = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.MakeCallReply} returns this\n */\nproto.pb.user.MakeCallReply.prototype.setCalleeToken = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.FetchCallRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.FetchCallRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.FetchCallRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.FetchCallRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    callId: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.FetchCallRequest}\n */\nproto.pb.user.FetchCallRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.FetchCallRequest;\n  return proto.pb.user.FetchCallRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.FetchCallRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.FetchCallRequest}\n */\nproto.pb.user.FetchCallRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setCallId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.FetchCallRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.FetchCallRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.FetchCallRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.FetchCallRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCallId();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 call_id = 1;\n * @return {number}\n */\nproto.pb.user.FetchCallRequest.prototype.getCallId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.FetchCallRequest} returns this\n */\nproto.pb.user.FetchCallRequest.prototype.setCallId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.FetchCallReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.FetchCallReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.FetchCallReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.FetchCallReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    rtcToken: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.FetchCallReply}\n */\nproto.pb.user.FetchCallReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.FetchCallReply;\n  return proto.pb.user.FetchCallReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.FetchCallReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.FetchCallReply}\n */\nproto.pb.user.FetchCallReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRtcToken(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.FetchCallReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.FetchCallReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.FetchCallReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.FetchCallReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRtcToken();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string rtc_token = 1;\n * @return {string}\n */\nproto.pb.user.FetchCallReply.prototype.getRtcToken = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.FetchCallReply} returns this\n */\nproto.pb.user.FetchCallReply.prototype.setRtcToken = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.HangCallRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.HangCallRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.HangCallRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.HangCallRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    hangType: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    callDuration: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.HangCallRequest}\n */\nproto.pb.user.HangCallRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.HangCallRequest;\n  return proto.pb.user.HangCallRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.HangCallRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.HangCallRequest}\n */\nproto.pb.user.HangCallRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setCallId(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.pb.HangType} */ (reader.readEnum());\n      msg.setHangType(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCallDuration(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.HangCallRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.HangCallRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.HangCallRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.HangCallRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCallId();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getHangType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getCallDuration();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 call_id = 1;\n * @return {number}\n */\nproto.pb.user.HangCallRequest.prototype.getCallId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.HangCallRequest} returns this\n */\nproto.pb.user.HangCallRequest.prototype.setCallId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional pb.HangType hang_type = 2;\n * @return {!proto.pb.HangType}\n */\nproto.pb.user.HangCallRequest.prototype.getHangType = function() {\n  return /** @type {!proto.pb.HangType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.pb.HangType} value\n * @return {!proto.pb.user.HangCallRequest} returns this\n */\nproto.pb.user.HangCallRequest.prototype.setHangType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional uint32 call_duration = 3;\n * @return {number}\n */\nproto.pb.user.HangCallRequest.prototype.getCallDuration = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.HangCallRequest} returns this\n */\nproto.pb.user.HangCallRequest.prototype.setCallDuration = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.HangCallReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.HangCallReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.HangCallReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.HangCallReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    callExpense: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    callDuration: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    giftExpense: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    giftCount: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    balance: jspb.Message.getFieldWithDefault(msg, 6, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.HangCallReply}\n */\nproto.pb.user.HangCallReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.HangCallReply;\n  return proto.pb.user.HangCallReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.HangCallReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.HangCallReply}\n */\nproto.pb.user.HangCallReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setCallId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCallExpense(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCallDuration(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setGiftExpense(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setGiftCount(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setBalance(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.HangCallReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.HangCallReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.HangCallReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.HangCallReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCallId();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getCallExpense();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getCallDuration();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getGiftExpense();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n  f = message.getGiftCount();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getBalance();\n  if (f !== 0) {\n    writer.writeUint32(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 call_id = 1;\n * @return {number}\n */\nproto.pb.user.HangCallReply.prototype.getCallId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.HangCallReply} returns this\n */\nproto.pb.user.HangCallReply.prototype.setCallId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 call_expense = 2;\n * @return {number}\n */\nproto.pb.user.HangCallReply.prototype.getCallExpense = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.HangCallReply} returns this\n */\nproto.pb.user.HangCallReply.prototype.setCallExpense = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 call_duration = 3;\n * @return {number}\n */\nproto.pb.user.HangCallReply.prototype.getCallDuration = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.HangCallReply} returns this\n */\nproto.pb.user.HangCallReply.prototype.setCallDuration = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 gift_expense = 4;\n * @return {number}\n */\nproto.pb.user.HangCallReply.prototype.getGiftExpense = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.HangCallReply} returns this\n */\nproto.pb.user.HangCallReply.prototype.setGiftExpense = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional uint32 gift_count = 5;\n * @return {number}\n */\nproto.pb.user.HangCallReply.prototype.getGiftCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.HangCallReply} returns this\n */\nproto.pb.user.HangCallReply.prototype.setGiftCount = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional uint32 balance = 6;\n * @return {number}\n */\nproto.pb.user.HangCallReply.prototype.getBalance = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.HangCallReply} returns this\n */\nproto.pb.user.HangCallReply.prototype.setBalance = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.UpdateCallRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.UpdateCallRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.UpdateCallRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UpdateCallRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    connectedAt: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.UpdateCallRequest}\n */\nproto.pb.user.UpdateCallRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.UpdateCallRequest;\n  return proto.pb.user.UpdateCallRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.UpdateCallRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.UpdateCallRequest}\n */\nproto.pb.user.UpdateCallRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setCallId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setConnectedAt(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.UpdateCallRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.UpdateCallRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.UpdateCallRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UpdateCallRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCallId();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getConnectedAt();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 call_id = 1;\n * @return {number}\n */\nproto.pb.user.UpdateCallRequest.prototype.getCallId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.UpdateCallRequest} returns this\n */\nproto.pb.user.UpdateCallRequest.prototype.setCallId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 connected_at = 2;\n * @return {number}\n */\nproto.pb.user.UpdateCallRequest.prototype.getConnectedAt = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.UpdateCallRequest} returns this\n */\nproto.pb.user.UpdateCallRequest.prototype.setConnectedAt = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.UpdateCallReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.UpdateCallReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.UpdateCallReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UpdateCallReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    balance: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    currentDuration: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    remainDuration: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    disconnectAt: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.UpdateCallReply}\n */\nproto.pb.user.UpdateCallReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.UpdateCallReply;\n  return proto.pb.user.UpdateCallReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.UpdateCallReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.UpdateCallReply}\n */\nproto.pb.user.UpdateCallReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setBalance(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCurrentDuration(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setRemainDuration(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setDisconnectAt(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.UpdateCallReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.UpdateCallReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.UpdateCallReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.UpdateCallReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getBalance();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getCurrentDuration();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getRemainDuration();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getDisconnectAt();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 balance = 1;\n * @return {number}\n */\nproto.pb.user.UpdateCallReply.prototype.getBalance = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.UpdateCallReply} returns this\n */\nproto.pb.user.UpdateCallReply.prototype.setBalance = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 current_duration = 2;\n * @return {number}\n */\nproto.pb.user.UpdateCallReply.prototype.getCurrentDuration = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.UpdateCallReply} returns this\n */\nproto.pb.user.UpdateCallReply.prototype.setCurrentDuration = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 remain_duration = 3;\n * @return {number}\n */\nproto.pb.user.UpdateCallReply.prototype.getRemainDuration = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.UpdateCallReply} returns this\n */\nproto.pb.user.UpdateCallReply.prototype.setRemainDuration = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 disconnect_at = 4;\n * @return {number}\n */\nproto.pb.user.UpdateCallReply.prototype.getDisconnectAt = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.UpdateCallReply} returns this\n */\nproto.pb.user.UpdateCallReply.prototype.setDisconnectAt = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.ReportCallRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.ReportCallRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.ReportCallRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ReportCallRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    score: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.ReportCallRequest}\n */\nproto.pb.user.ReportCallRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.ReportCallRequest;\n  return proto.pb.user.ReportCallRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.ReportCallRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.ReportCallRequest}\n */\nproto.pb.user.ReportCallRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setCallId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setScore(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.ReportCallRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.ReportCallRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.ReportCallRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.ReportCallRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCallId();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getScore();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 call_id = 1;\n * @return {number}\n */\nproto.pb.user.ReportCallRequest.prototype.getCallId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ReportCallRequest} returns this\n */\nproto.pb.user.ReportCallRequest.prototype.setCallId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 score = 2;\n * @return {number}\n */\nproto.pb.user.ReportCallRequest.prototype.getScore = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.ReportCallRequest} returns this\n */\nproto.pb.user.ReportCallRequest.prototype.setScore = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.BuyCommodityRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.BuyCommodityRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.BuyCommodityRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BuyCommodityRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    payType: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    payChannel: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    commodityId: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    currency: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n    anchorId: jspb.Message.getFieldWithDefault(msg, 5, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.BuyCommodityRequest}\n */\nproto.pb.user.BuyCommodityRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.BuyCommodityRequest;\n  return proto.pb.user.BuyCommodityRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.BuyCommodityRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.BuyCommodityRequest}\n */\nproto.pb.user.BuyCommodityRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.pb.PayType} */ (reader.readEnum());\n      msg.setPayType(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPayChannel(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCommodityId(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCurrency(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setAnchorId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.BuyCommodityRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.BuyCommodityRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.BuyCommodityRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BuyCommodityRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPayType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getPayChannel();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getCommodityId();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getCurrency();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f = message.getAnchorId();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional pb.PayType pay_type = 1;\n * @return {!proto.pb.PayType}\n */\nproto.pb.user.BuyCommodityRequest.prototype.getPayType = function() {\n  return /** @type {!proto.pb.PayType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.pb.PayType} value\n * @return {!proto.pb.user.BuyCommodityRequest} returns this\n */\nproto.pb.user.BuyCommodityRequest.prototype.setPayType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional string pay_channel = 2;\n * @return {string}\n */\nproto.pb.user.BuyCommodityRequest.prototype.getPayChannel = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.BuyCommodityRequest} returns this\n */\nproto.pb.user.BuyCommodityRequest.prototype.setPayChannel = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional uint32 commodity_id = 3;\n * @return {number}\n */\nproto.pb.user.BuyCommodityRequest.prototype.getCommodityId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.BuyCommodityRequest} returns this\n */\nproto.pb.user.BuyCommodityRequest.prototype.setCommodityId = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional string currency = 4;\n * @return {string}\n */\nproto.pb.user.BuyCommodityRequest.prototype.getCurrency = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.BuyCommodityRequest} returns this\n */\nproto.pb.user.BuyCommodityRequest.prototype.setCurrency = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n/**\n * optional uint32 anchor_id = 5;\n * @return {number}\n */\nproto.pb.user.BuyCommodityRequest.prototype.getAnchorId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.BuyCommodityRequest} returns this\n */\nproto.pb.user.BuyCommodityRequest.prototype.setAnchorId = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.BuyCommodityReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.BuyCommodityReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.BuyCommodityReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BuyCommodityReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    recordId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    payType: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    payUrl: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    payPrice: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    currency: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\n    commodityId: jspb.Message.getFieldWithDefault(msg, 6, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.BuyCommodityReply}\n */\nproto.pb.user.BuyCommodityReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.BuyCommodityReply;\n  return proto.pb.user.BuyCommodityReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.BuyCommodityReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.BuyCommodityReply}\n */\nproto.pb.user.BuyCommodityReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setRecordId(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.pb.PayType} */ (reader.readEnum());\n      msg.setPayType(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPayUrl(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPayPrice(value);\n      break;\n    case 5:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCurrency(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCommodityId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.BuyCommodityReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.BuyCommodityReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.BuyCommodityReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.BuyCommodityReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRecordId();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getPayType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getPayUrl();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getPayPrice();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n  f = message.getCurrency();\n  if (f.length > 0) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f = message.getCommodityId();\n  if (f !== 0) {\n    writer.writeUint32(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 record_id = 1;\n * @return {number}\n */\nproto.pb.user.BuyCommodityReply.prototype.getRecordId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.BuyCommodityReply} returns this\n */\nproto.pb.user.BuyCommodityReply.prototype.setRecordId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional pb.PayType pay_type = 2;\n * @return {!proto.pb.PayType}\n */\nproto.pb.user.BuyCommodityReply.prototype.getPayType = function() {\n  return /** @type {!proto.pb.PayType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.pb.PayType} value\n * @return {!proto.pb.user.BuyCommodityReply} returns this\n */\nproto.pb.user.BuyCommodityReply.prototype.setPayType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional string pay_url = 3;\n * @return {string}\n */\nproto.pb.user.BuyCommodityReply.prototype.getPayUrl = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.BuyCommodityReply} returns this\n */\nproto.pb.user.BuyCommodityReply.prototype.setPayUrl = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional uint32 pay_price = 4;\n * @return {number}\n */\nproto.pb.user.BuyCommodityReply.prototype.getPayPrice = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.BuyCommodityReply} returns this\n */\nproto.pb.user.BuyCommodityReply.prototype.setPayPrice = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional string currency = 5;\n * @return {string}\n */\nproto.pb.user.BuyCommodityReply.prototype.getCurrency = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.BuyCommodityReply} returns this\n */\nproto.pb.user.BuyCommodityReply.prototype.setCurrency = function(value) {\n  return jspb.Message.setProto3StringField(this, 5, value);\n};\n\n\n/**\n * optional uint32 commodity_id = 6;\n * @return {number}\n */\nproto.pb.user.BuyCommodityReply.prototype.getCommodityId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.BuyCommodityReply} returns this\n */\nproto.pb.user.BuyCommodityReply.prototype.setCommodityId = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.PayListRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.PayListRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.PayListRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.PayListRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    count: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    cursor: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.PayListRequest}\n */\nproto.pb.user.PayListRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.PayListRequest;\n  return proto.pb.user.PayListRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.PayListRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.PayListRequest}\n */\nproto.pb.user.PayListRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setCount(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCursor(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.PayListRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.PayListRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.PayListRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.PayListRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCount();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getCursor();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 count = 1;\n * @return {number}\n */\nproto.pb.user.PayListRequest.prototype.getCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.PayListRequest} returns this\n */\nproto.pb.user.PayListRequest.prototype.setCount = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional string cursor = 2;\n * @return {string}\n */\nproto.pb.user.PayListRequest.prototype.getCursor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.PayListRequest} returns this\n */\nproto.pb.user.PayListRequest.prototype.setCursor = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pb.user.PayListReply.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.PayListReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.PayListReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.PayListReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.PayListReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),\n    usertype_pb.PayRecord.toObject, includeInstance),\n    cursor: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.PayListReply}\n */\nproto.pb.user.PayListReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.PayListReply;\n  return proto.pb.user.PayListReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.PayListReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.PayListReply}\n */\nproto.pb.user.PayListReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new usertype_pb.PayRecord;\n      reader.readMessage(value,usertype_pb.PayRecord.deserializeBinaryFromReader);\n      msg.addOrders(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCursor(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setHasMore(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.PayListReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.PayListReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.PayListReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.PayListReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOrdersList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      usertype_pb.PayRecord.serializeBinaryToWriter\n    );\n  }\n  f = message.getCursor();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getHasMore();\n  if (f) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated pb.PayRecord orders = 1;\n * @return {!Array<!proto.pb.PayRecord>}\n */\nproto.pb.user.PayListReply.prototype.getOrdersList = function() {\n  return /** @type{!Array<!proto.pb.PayRecord>} */ (\n    jspb.Message.getRepeatedWrapperField(this, usertype_pb.PayRecord, 1));\n};\n\n\n/**\n * @param {!Array<!proto.pb.PayRecord>} value\n * @return {!proto.pb.user.PayListReply} returns this\n*/\nproto.pb.user.PayListReply.prototype.setOrdersList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.pb.PayRecord=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.PayRecord}\n */\nproto.pb.user.PayListReply.prototype.addOrders = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.PayRecord, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.user.PayListReply} returns this\n */\nproto.pb.user.PayListReply.prototype.clearOrdersList = function() {\n  return this.setOrdersList([]);\n};\n\n\n/**\n * optional string cursor = 2;\n * @return {string}\n */\nproto.pb.user.PayListReply.prototype.getCursor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.PayListReply} returns this\n */\nproto.pb.user.PayListReply.prototype.setCursor = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bool has_more = 3;\n * @return {boolean}\n */\nproto.pb.user.PayListReply.prototype.getHasMore = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.pb.user.PayListReply} returns this\n */\nproto.pb.user.PayListReply.prototype.setHasMore = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.VerifyPayRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.VerifyPayRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.VerifyPayRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.VerifyPayRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    recordId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    payType: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    sku: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    data: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n    anchorId: jspb.Message.getFieldWithDefault(msg, 5, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.VerifyPayRequest}\n */\nproto.pb.user.VerifyPayRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.VerifyPayRequest;\n  return proto.pb.user.VerifyPayRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.VerifyPayRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.VerifyPayRequest}\n */\nproto.pb.user.VerifyPayRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setRecordId(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.pb.PayType} */ (reader.readEnum());\n      msg.setPayType(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setSku(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setData(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setAnchorId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.VerifyPayRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.VerifyPayRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.VerifyPayRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.VerifyPayRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRecordId();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getPayType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getSku();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getData();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f = message.getAnchorId();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 record_id = 1;\n * @return {number}\n */\nproto.pb.user.VerifyPayRequest.prototype.getRecordId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.VerifyPayRequest} returns this\n */\nproto.pb.user.VerifyPayRequest.prototype.setRecordId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional pb.PayType pay_type = 2;\n * @return {!proto.pb.PayType}\n */\nproto.pb.user.VerifyPayRequest.prototype.getPayType = function() {\n  return /** @type {!proto.pb.PayType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.pb.PayType} value\n * @return {!proto.pb.user.VerifyPayRequest} returns this\n */\nproto.pb.user.VerifyPayRequest.prototype.setPayType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional string sku = 3;\n * @return {string}\n */\nproto.pb.user.VerifyPayRequest.prototype.getSku = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.VerifyPayRequest} returns this\n */\nproto.pb.user.VerifyPayRequest.prototype.setSku = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string data = 4;\n * @return {string}\n */\nproto.pb.user.VerifyPayRequest.prototype.getData = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.VerifyPayRequest} returns this\n */\nproto.pb.user.VerifyPayRequest.prototype.setData = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n/**\n * optional uint32 anchor_id = 5;\n * @return {number}\n */\nproto.pb.user.VerifyPayRequest.prototype.getAnchorId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.pb.user.VerifyPayRequest} returns this\n */\nproto.pb.user.VerifyPayRequest.prototype.setAnchorId = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.VerifyPayReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.VerifyPayReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.VerifyPayReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.VerifyPayReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),\n    record: (f = msg.getRecord()) && usertype_pb.PayRecord.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.VerifyPayReply}\n */\nproto.pb.user.VerifyPayReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.VerifyPayReply;\n  return proto.pb.user.VerifyPayReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.VerifyPayReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.VerifyPayReply}\n */\nproto.pb.user.VerifyPayReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setSuccess(value);\n      break;\n    case 2:\n      var value = new usertype_pb.PayRecord;\n      reader.readMessage(value,usertype_pb.PayRecord.deserializeBinaryFromReader);\n      msg.setRecord(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.VerifyPayReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.VerifyPayReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.VerifyPayReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.VerifyPayReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSuccess();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n  f = message.getRecord();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      usertype_pb.PayRecord.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional bool success = 1;\n * @return {boolean}\n */\nproto.pb.user.VerifyPayReply.prototype.getSuccess = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.pb.user.VerifyPayReply} returns this\n */\nproto.pb.user.VerifyPayReply.prototype.setSuccess = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n/**\n * optional pb.PayRecord record = 2;\n * @return {?proto.pb.PayRecord}\n */\nproto.pb.user.VerifyPayReply.prototype.getRecord = function() {\n  return /** @type{?proto.pb.PayRecord} */ (\n    jspb.Message.getWrapperField(this, usertype_pb.PayRecord, 2));\n};\n\n\n/**\n * @param {?proto.pb.PayRecord|undefined} value\n * @return {!proto.pb.user.VerifyPayReply} returns this\n*/\nproto.pb.user.VerifyPayReply.prototype.setRecord = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.pb.user.VerifyPayReply} returns this\n */\nproto.pb.user.VerifyPayReply.prototype.clearRecord = function() {\n  return this.setRecord(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.pb.user.VerifyPayReply.prototype.hasRecord = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pb.user.SaveMediaRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pb.user.SaveMediaRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pb.user.SaveMediaRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.SaveMediaRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    path: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    type: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    thumb: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.user.SaveMediaRequest}\n */\nproto.pb.user.SaveMediaRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.user.SaveMediaRequest;\n  return proto.pb.user.SaveMediaRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.user.SaveMediaRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.user.SaveMediaRequest}\n */\nproto.pb.user.SaveMediaRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPath(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.pb.FileType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setThumb(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pb.user.SaveMediaRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.user.SaveMediaRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.user.SaveMediaRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pb.user.SaveMediaRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPath();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getThumb();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string path = 1;\n * @return {string}\n */\nproto.pb.user.SaveMediaRequest.prototype.getPath = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.SaveMediaRequest} returns this\n */\nproto.pb.user.SaveMediaRequest.prototype.setPath = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional pb.FileType type = 2;\n * @return {!proto.pb.FileType}\n */\nproto.pb.user.SaveMediaRequest.prototype.getType = function() {\n  return /** @type {!proto.pb.FileType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.pb.FileType} value\n * @return {!proto.pb.user.SaveMediaRequest} returns this\n */\nproto.pb.user.SaveMediaRequest.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional string thumb = 3;\n * @return {string}\n */\nproto.pb.user.SaveMediaRequest.prototype.getThumb = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.pb.user.SaveMediaRequest} returns this\n */\nproto.pb.user.SaveMediaRequest.prototype.setThumb = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * @enum {number}\n */\nproto.pb.user.AnchorListType = {\n  ANCHORLISTRECOMMEND: 0,\n  ANCHORLISTONLINE: 1,\n  ANCHORLISTFOLLOW: 2,\n  ANCHORLISTFANS: 3,\n  ANCHORLISTMATCH: 4,\n  ANCHORLISTHOT: 5\n};\n\n/**\n * @enum {number}\n */\nproto.pb.user.RelationOpType = {\n  RELATIONFOLLOW: 0,\n  RELATIONUNFOLLOW: 1,\n  RELATIONBLOCK: 2,\n  RELATIONUNBLOCK: 3\n};\n\n/**\n * @enum {number}\n */\nproto.pb.user.UserListType = {\n  USERLISTANCHORFANS: 0,\n  USERLISTEXPENSERANK: 1\n};\n\ngoog.object.extend(exports, proto.pb.user);\n"]}]}