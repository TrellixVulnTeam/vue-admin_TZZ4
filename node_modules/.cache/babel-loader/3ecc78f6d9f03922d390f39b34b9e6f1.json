{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/thread-loader/dist/cjs.js!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/src/api/services/anchor.js","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/api/services/anchor.js","mtime":1635305858998},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL21lbmd5L2RldmVsb3AvaXdvcmsva2Fmby92dWUtYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9ob21lL21lbmd5L2RldmVsb3AvaXdvcmsva2Fmby92dWUtYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9tZW5neS9kZXZlbG9wL2l3b3JrL2thZm8vdnVlLWFkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IHsgc2V0VG9rZW4sIGdldFRva2VuIH0gZnJvbSAnQC91dGlscy9jb29raWUnOwppbXBvcnQgeyBlcnJvciB9IGZyb20gJ0AvdXRpbHMvZXJyb3InOwoKdmFyIF9kZWZhdWx0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBfZGVmYXVsdChkZXBzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX2RlZmF1bHQpOwoKICAgIHRoaXMucHJvdG8gPSBkZXBzLnByb3RvOwogICAgdGhpcy5jbGllbnQgPSBuZXcgZGVwcy5wcm90by5DbXNDbGllbnQocHJvY2Vzcy5lbnYuVlVFX0FQUF9HUlBDX1BST1hZX1VSSSwgbnVsbCwgbnVsbCk7CiAgfSAvLyDmn6Xor6LkuLvmkq3liJfooagKCgogIF9jcmVhdGVDbGFzcyhfZGVmYXVsdCwgW3sKICAgIGtleTogImdldEFuY2hvckxpc3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRBbmNob3JMaXN0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHBhcmFtLCBjYWxsYmFjaykgewogICAgICAgIHZhciByZXEsIG1ldGFkYXRhOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJlcSA9IG5ldyB0aGlzLnByb3RvLkFuY2hvckxpc3RSZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICByZXEuc2V0UGFnZU5vKHBhcmFtLnBhZ2UuY3VycmVudFBhZ2UpOwogICAgICAgICAgICAgICAgcmVxLnNldFBhZ2VTaXplKHBhcmFtLnBhZ2UucGFnZVNpemUpOwogICAgICAgICAgICAgICAgcmVxLnNldEFuY2hvcklkKHBhcmFtLmFuY2hvcklkKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRBcmVhSWQocGFyYW0uYXJlYUlkKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRBcHBJZChwYXJhbS5hcHBJZCk7CiAgICAgICAgICAgICAgICByZXEuc2V0R3VpbGRJZChwYXJhbS5ndWlsZElkKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRCbG9ja1N0YXR1cyhwYXJhbS5ibG9ja1N0YXR1cyk7CiAgICAgICAgICAgICAgICByZXEuc2V0T25saW5lU3RhdHVzKHBhcmFtLm9ubGluZVN0YXR1cyk7CiAgICAgICAgICAgICAgICByZXEuc2V0UmV2aWV3U3RhdHVzKHBhcmFtLnJldmlld1N0YXR1cyk7CiAgICAgICAgICAgICAgICByZXEuc2V0Q3JlYXRlZFN0YXJ0KHBhcmFtLmNyZWF0ZWRTdGFydFVpbnQpOwogICAgICAgICAgICAgICAgcmVxLnNldENyZWF0ZWRFbmQocGFyYW0uY3JlYXRlZEVuZFVpbnQpOwogICAgICAgICAgICAgICAgbWV0YWRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICd0b2tlbic6IGdldFRva2VuKCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5nZXRBbmNob3JMaXN0KHJlcSwgbWV0YWRhdGEsIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHsKICAgICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlcnJvcihlcnIpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRBbmNob3JMaXN0KF94LCBfeDIpIHsKICAgICAgICByZXR1cm4gX2dldEFuY2hvckxpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldEFuY2hvckxpc3Q7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJnZXRBbmNob3JGdWxsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0QW5jaG9yRnVsbCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocGFyYW0sIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIHJlcSwgbWV0YWRhdGE7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJlcSA9IG5ldyB0aGlzLnByb3RvLkFuY2hvckZ1bGxSZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICByZXEuc2V0QW5jaG9ySWQocGFyYW0uaWQpOwogICAgICAgICAgICAgICAgbWV0YWRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICd0b2tlbic6IGdldFRva2VuKCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5nZXRBbmNob3JGdWxsKHJlcSwgbWV0YWRhdGEsIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHsKICAgICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlcnJvcihlcnIpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0QW5jaG9yRnVsbChfeDMsIF94NCkgewogICAgICAgIHJldHVybiBfZ2V0QW5jaG9yRnVsbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0QW5jaG9yRnVsbDsKICAgIH0oKSAvLyDmm7TmlrDkuLvmkq3ln7rnoYDkv6Hmga8KCiAgfSwgewogICAga2V5OiAidXBkYXRlQW5jaG9yQmFzaWMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF91cGRhdGVBbmNob3JCYXNpYyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMocGFyYW0sIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIHJlcSwgbWV0YWRhdGE7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJlcSA9IHBhcmFtLnN0cnVjdDsKICAgICAgICAgICAgICAgIHJlcS5zZXRJZChwYXJhbS5pZCk7CiAgICAgICAgICAgICAgICByZXEuc2V0R3VpbGRJZChwYXJhbS5ndWlsZElkKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRBcmVhSWQocGFyYW0uYXJlYUlkKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRMZXZlbChwYXJhbS5sZXZlbCk7CiAgICAgICAgICAgICAgICByZXEuc2V0Tm90ZShwYXJhbS5ub3RlKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRSZXZpZXdTdGF0dXMocGFyYW0ucmV2aWV3U3RhdHVzKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRCYW5rTmFtZShwYXJhbS5iYW5rTmFtZSk7CiAgICAgICAgICAgICAgICByZXEuc2V0QWNjb3VudE5hbWUocGFyYW0uYWNjb3VudE5hbWUpOwogICAgICAgICAgICAgICAgcmVxLnNldEJhbmtBY2NvdW50KHBhcmFtLmJhbmtBY2NvdW50KTsKICAgICAgICAgICAgICAgIG1ldGFkYXRhID0gewogICAgICAgICAgICAgICAgICAndG9rZW4nOiBnZXRUb2tlbigpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdGhpcy5jbGllbnQudXBkYXRlQW5jaG9yQmFzaWMocmVxLCBtZXRhZGF0YSwgZnVuY3Rpb24gKGVyciwgcmVzcCkgewogICAgICAgICAgICAgICAgICBpZiAoIWVycikgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3ApOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVycm9yKGVycik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gdXBkYXRlQW5jaG9yQmFzaWMoX3g1LCBfeDYpIHsKICAgICAgICByZXR1cm4gX3VwZGF0ZUFuY2hvckJhc2ljLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB1cGRhdGVBbmNob3JCYXNpYzsKICAgIH0oKSAvLyDorqTor4HkuLvmkq0KCiAgfSwgewogICAga2V5OiAiYXV0aG9yaXplQW5jaG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfYXV0aG9yaXplQW5jaG9yID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChwYXJhbSwgY2FsbGJhY2spIHsKICAgICAgICB2YXIgcmVxLCBtZXRhZGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmVxID0gcGFyYW0uc3RydWN0OwoKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVxID09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICAgIHJlcSA9IG5ldyB0aGlzLnByb3RvLkF1dGhvcml6ZUFuY2hvclJlcXVlc3QoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXEuc2V0QW5jaG9ySWQocGFyYW0uYW5jaG9ySWQpOwogICAgICAgICAgICAgICAgcmVxLnNldEFyZWFJZChwYXJhbS5hcmVhSWQpOwogICAgICAgICAgICAgICAgcmVxLnNldEd1aWxkSWQocGFyYW0uZ3VpbGRJZCk7CiAgICAgICAgICAgICAgICBtZXRhZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgJ3Rva2VuJzogZ2V0VG9rZW4oKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50LmF1dGhvcml6ZUFuY2hvcihyZXEsIG1ldGFkYXRhLCBmdW5jdGlvbiAoZXJyLCByZXNwKSB7CiAgICAgICAgICAgICAgICAgIGlmICghZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3IoZXJyKTsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBhdXRob3JpemVBbmNob3IoX3g3LCBfeDgpIHsKICAgICAgICByZXR1cm4gX2F1dGhvcml6ZUFuY2hvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYXV0aG9yaXplQW5jaG9yOwogICAgfSgpIC8vIOWwgeemgQoKICB9LCB7CiAgICBrZXk6ICJibG9jayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2Jsb2NrID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShwYXJhbSwgY2FsbGJhY2spIHsKICAgICAgICB2YXIgcmVxLCBtZXRhZGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmVxID0gbmV3IHRoaXMucHJvdG8uQmxvY2tSZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICByZXEuc2V0RW50aXR5VHlwZShwYXJhbS5lbnRpdHlUeXBlKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRFbnRpdHlJZChwYXJhbS5lbnRpdHlJZCk7CiAgICAgICAgICAgICAgICByZXEuc2V0QmxvY2tTdGF0dXMocGFyYW0uYmxvY2tTdGF0dXMpOwogICAgICAgICAgICAgICAgcmVxLnNldER1cmF0aW9uKHBhcmFtLmR1cmF0aW9uKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRSZWFzb24ocGFyYW0ucmVhc29uKTsKICAgICAgICAgICAgICAgIG1ldGFkYXRhID0gewogICAgICAgICAgICAgICAgICAndG9rZW4nOiBnZXRUb2tlbigpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdGhpcy5jbGllbnQuYmxvY2socmVxLCBtZXRhZGF0YSwgZnVuY3Rpb24gKGVyciwgcmVzcCkgewogICAgICAgICAgICAgICAgICBpZiAoIWVycikgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVycm9yKGVycik7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYmxvY2soX3g5LCBfeDEwKSB7CiAgICAgICAgcmV0dXJuIF9ibG9jay5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYmxvY2s7CiAgICB9KCkgLy8g6Kej5bCBCgogIH0sIHsKICAgIGtleTogInVuYmxvY2siLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF91bmJsb2NrID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNihwYXJhbSwgY2FsbGJhY2spIHsKICAgICAgICB2YXIgcmVxLCBtZXRhZGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmVxID0gbmV3IHRoaXMucHJvdG8uVW5ibG9ja1JlcXVlc3QoKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRFbnRpdHlUeXBlKHBhcmFtLmVudGl0eVR5cGUpOwogICAgICAgICAgICAgICAgcmVxLnNldEVudGl0eUlkKHBhcmFtLmVudGl0eUlkKTsKICAgICAgICAgICAgICAgIG1ldGFkYXRhID0gewogICAgICAgICAgICAgICAgICAndG9rZW4nOiBnZXRUb2tlbigpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdGhpcy5jbGllbnQudW5ibG9jayhyZXEsIG1ldGFkYXRhLCBmdW5jdGlvbiAoZXJyLCByZXNwKSB7CiAgICAgICAgICAgICAgICAgIGlmICghZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3IoZXJyKTsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiB1bmJsb2NrKF94MTEsIF94MTIpIHsKICAgICAgICByZXR1cm4gX3VuYmxvY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHVuYmxvY2s7CiAgICB9KCkgLy8g6LSm5oi36L+B56e7CgogIH0sIHsKICAgIGtleTogIm1pZ3JhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9taWdyYXRlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNyhwYXJhbSwgY2FsbGJhY2spIHsKICAgICAgICB2YXIgcmVxLCBtZXRhZGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmVxID0gbmV3IHRoaXMucHJvdG8uTWlncmF0ZVJlcXVlc3QoKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRFbnRpdHlUeXBlKHBhcmFtLmVudGl0eVR5cGUpOwogICAgICAgICAgICAgICAgcmVxLnNldFNyY0lkKHBhcmFtLnNyY0lkKTsKICAgICAgICAgICAgICAgIHJlcS5zZXREc3RJZChwYXJhbS5kc3RJZCk7CiAgICAgICAgICAgICAgICBtZXRhZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgJ3Rva2VuJzogZ2V0VG9rZW4oKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50Lm1pZ3JhdGUocmVxLCBtZXRhZGF0YSwgZnVuY3Rpb24gKGVyciwgcmVzcCkgewogICAgICAgICAgICAgICAgICBpZiAoIWVycikgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVycm9yKGVycik7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU3LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gbWlncmF0ZShfeDEzLCBfeDE0KSB7CiAgICAgICAgcmV0dXJuIF9taWdyYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBtaWdyYXRlOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gX2RlZmF1bHQ7Cn0oKTsKCmV4cG9ydCB7IF9kZWZhdWx0IGFzIGRlZmF1bHQgfTs="},null]}