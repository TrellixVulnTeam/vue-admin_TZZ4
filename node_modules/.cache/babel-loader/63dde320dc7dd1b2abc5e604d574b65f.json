{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/develop/iwork/kafo/vue-admin/src/components/e-desc/e-desc.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/components/e-desc/e-desc.vue","mtime":1630907075855},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRURlc2MnLAogIC8vIOmAmui/h3Byb3ZpZGXmj5Dkvpvnu5nlrZDnu4Tku7YKICBwcm92aWRlOiBmdW5jdGlvbiBwcm92aWRlKCkgewogICAgcmV0dXJuIHsKICAgICAgbGFiZWxXaWR0aDogdGhpcy5sYWJlbFdpZHRoLAogICAgICBjb2x1bW46IHRoaXMuY29sdW1uLAogICAgICBzaXplOiB0aGlzLnNpemUKICAgIH07CiAgfSwKICBwcm9wczogewogICAgLy8g5qCH6aKYCiAgICB0aXRsZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9LAogICAgLy8g6L656LedCiAgICBtYXJnaW46IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnMCcKICAgIH0sCiAgICAvLyBsYWJlbOWuveW6pgogICAgbGFiZWxXaWR0aDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcxMjBweCcKICAgIH0sCiAgICBjb2x1bW46IHsKICAgICAgLy8g5q+P6KGM5pi+56S655qE6aG555uu5Liq5pWwCiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sCiAgICAgIGRlZmF1bHQ6IDMKICAgIH0sCiAgICBzaXplOiB7CiAgICAgIC8vIOWkp+WwjwogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgLy8g55uR5ZCs5o+S5qe95Y+Y5YyWCiAgICAgIG9ic2VydmU6IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuY29tcHV0ZWRTcGFuKQogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuY29tcHV0ZWRTcGFuKCk7CgogICAgICBfdGhpcy5vYnNlcnZlLm9ic2VydmUoX3RoaXMuJHJlZnMuZWxSb3cuJGVsLCB7CiAgICAgICAgY2hpbGRMaXN0OiB0cnVlCiAgICAgIH0pOwogICAgfSk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBjb21wdXRlZFNwYW46IGZ1bmN0aW9uIGNvbXB1dGVkU3BhbigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAvLyDnrZvpgInlh7rlrZDnu4Tku7ZlLWRlc2MtaXRlbQogICAgICB2YXIgZGF0YVNvdXJjZSA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7CiAgICAgIHZhciBkYXRhTGlzdCA9IFtdOwogICAgICBkYXRhU291cmNlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICBpZiAoaXRlbS5jb21wb25lbnRPcHRpb25zICYmIGl0ZW0uY29tcG9uZW50T3B0aW9ucy50YWcgPT09ICdlLWRlc2MtaXRlbScpIHsKICAgICAgICAgIGRhdGFMaXN0LnB1c2goaXRlbS5jb21wb25lbnRJbnN0YW5jZSk7CiAgICAgICAgfQogICAgICB9KTsgLy8g5Ymp5L2Zc3BhbgoKICAgICAgdmFyIGxlZnRTcGFuID0gdGhpcy5jb2x1bW47CiAgICAgIHZhciBsZW4gPSBkYXRhTGlzdC5sZW5ndGg7CiAgICAgIGRhdGFMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgLy8g5aSE55CGY29sdW1u5LiOc3BhbuS5i+mXtOeahOWFs+ezuwogICAgICAgIC8vIOWJqeS9meeahOWIl+aVsOWwj+S6juiuvue9rueahHNwYW7mlbAKICAgICAgICB2YXIgaGFzTGVmdCA9IGxlZnRTcGFuIDw9IChpdGVtLnNwYW4gfHwgMSk7IC8vIOW9k+WJjeWIl+eahOS4i+S4gOWIl+Wkp+S6juS6huWJqeS9mXNwYW4KCiAgICAgICAgdmFyIG5leHRDb2x1bW5TcGFuID0gaW5kZXggPCBsZW4gLSAxICYmIGRhdGFMaXN0W2luZGV4ICsgMV0uc3BhbiA+PSBsZWZ0U3BhbjsgLy8g5piv5pyA5ZCO5LiA6KGM55qE5pyA5ZCO5LiA5YiXCgogICAgICAgIHZhciBpc0xhc3QgPSBpbmRleCA9PT0gbGVuIC0gMTsKCiAgICAgICAgaWYgKGhhc0xlZnQgfHwgbmV4dENvbHVtblNwYW4gfHwgaXNMYXN0KSB7CiAgICAgICAgICAvLyDmu6HotrPku6XkuIrmnaHku7bvvIzpnIDopoHoh6rliqjooaXlhahzcGFu77yM6YG/5YWN5pyA5ZCO5LiA5YiX5Ye6546w5q6L57y655qE5oOF5Ya1CiAgICAgICAgICBpdGVtLnNlbGZTcGFuID0gbGVmdFNwYW47CiAgICAgICAgICBsZWZ0U3BhbiA9IF90aGlzMi5jb2x1bW47CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGxlZnRTcGFuIC09IGl0ZW0uc3BhbiB8fCAxOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgfQp9Ow=="},{"version":3,"sources":["e-desc.vue"],"names":[],"mappings":";;;;;;;;;;;;AAWA,eAAA;AACA,EAAA,IAAA,EAAA,OADA;AAEA;AACA,EAAA,OAHA,qBAGA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,KAAA,UADA;AAEA,MAAA,MAAA,EAAA,KAAA,MAFA;AAGA,MAAA,IAAA,EAAA,KAAA;AAHA,KAAA;AAKA,GATA;AAUA,EAAA,KAAA,EAAA;AACA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAFA;AAMA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAPA;AAWA;AACA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAZA;AAgBA,IAAA,MAAA,EAAA;AACA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KAhBA;AAqBA,IAAA,IAAA,EAAA;AACA;AACA,MAAA,IAAA,EAAA,MAFA;AAGA,MAAA,OAAA,EAAA;AAHA;AArBA,GAVA;AAqCA,EAAA,IArCA,kBAqCA;AACA,WAAA;AACA;AACA,MAAA,OAAA,EAAA,IAAA,gBAAA,CAAA,KAAA,YAAA;AAFA,KAAA;AAIA,GA1CA;AA2CA,EAAA,OA3CA,qBA2CA;AAAA;;AACA,SAAA,SAAA,CAAA,YAAA;AACA,MAAA,KAAA,CAAA,YAAA;;AACA,MAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAAA;AACA,KAHA;AAIA,GAhDA;AAiDA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,0BACA;AAAA;;AACA;AACA,UAAA,UAAA,GAAA,KAAA,MAAA,CAAA,OAAA;AACA,UAAA,QAAA,GAAA,EAAA;AACA,MAAA,UAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,IAAA,CAAA,gBAAA,IAAA,IAAA,CAAA,gBAAA,CAAA,GAAA,KAAA,aAAA,EAAA;AACA,UAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,iBAAA;AACA;AACA,OAJA,EAJA,CASA;;AACA,UAAA,QAAA,GAAA,KAAA,MAAA;AACA,UAAA,GAAA,GAAA,QAAA,CAAA,MAAA;AACA,MAAA,QAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA,KAAA,EAAA;AACA;AACA;AACA,YAAA,OAAA,GAAA,QAAA,KAAA,IAAA,CAAA,IAAA,IAAA,CAAA,CAAA,CAHA,CAIA;;AACA,YAAA,cAAA,GAAA,KAAA,GAAA,GAAA,GAAA,CAAA,IAAA,QAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,IAAA,IAAA,QAAA,CALA,CAMA;;AACA,YAAA,MAAA,GAAA,KAAA,KAAA,GAAA,GAAA,CAAA;;AACA,YAAA,OAAA,IAAA,cAAA,IAAA,MAAA,EAAA;AACA;AACA,UAAA,IAAA,CAAA,QAAA,GAAA,QAAA;AACA,UAAA,QAAA,GAAA,MAAA,CAAA,MAAA;AACA,SAJA,MAIA;AACA,UAAA,QAAA,IAAA,IAAA,CAAA,IAAA,IAAA,CAAA;AACA;AACA,OAfA;AAgBA;AA7BA,GAjDA;AAgFA,EAAA,aAhFA,2BAgFA;AACA,SAAA,QAAA,CAAA,UAAA;AACA;AAlFA,CAAA","sourcesContent":["<template>\n    <div class=\"desc\" :style=\"{margin}\">\n        <!-- 标题 -->\n        <h1 v-if=\"title\" class=\"desc-title\" v-html=\"title\"></h1>\n        <el-row class=\"desc-row\" ref='elRow'>\n            <slot/>\n        </el-row>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'EDesc',\n    // 通过provide提供给子组件\n    provide () {\n        return {\n            labelWidth: this.labelWidth,\n            column: this.column,\n            size: this.size\n        }\n    },\n    props: {\n        // 标题\n        title: {\n            type: String,\n            default: ''\n        },\n        // 边距\n        margin: {\n            type: String,\n            default: '0'\n        },\n        // label宽度\n        labelWidth: {\n            type: String,\n            default: '120px'\n        },\n        column: {\n            // 每行显示的项目个数\n            type: [Number, String],\n            default: 3\n        },\n        size: {\n            // 大小\n            type: String,\n            default: ''\n        }\n    },\n    data () {\n        return {\n            // 监听插槽变化\n            observe: new MutationObserver(this.computedSpan)\n        }\n    },\n    mounted () {\n        this.$nextTick(() => {\n            this.computedSpan()\n            this.observe.observe(this.$refs.elRow.$el, { childList: true })\n        })\n    },\n    methods: {\n        computedSpan () {\n            // 筛选出子组件e-desc-item\n            const dataSource = this.$slots.default\n            const dataList = []\n            dataSource.forEach(item => {\n                if (item.componentOptions && item.componentOptions.tag === 'e-desc-item') {\n                    dataList.push(item.componentInstance)\n                }\n            })\n            // 剩余span\n            let leftSpan = this.column\n            const len = dataList.length\n            dataList.forEach((item, index) => {\n                // 处理column与span之间的关系\n                // 剩余的列数小于设置的span数\n                const hasLeft = leftSpan <= (item.span || 1)\n                // 当前列的下一列大于了剩余span\n                const nextColumnSpan = (index < (len - 1)) && (dataList[index + 1].span >= leftSpan)\n                // 是最后一行的最后一列\n                const isLast = index === (len - 1)\n                if (hasLeft || nextColumnSpan || isLast) {\n                    // 满足以上条件，需要自动补全span，避免最后一列出现残缺的情况\n                    item.selfSpan = leftSpan\n                    leftSpan = this.column\n                } else {\n                    leftSpan -= item.span || 1\n                }\n            })\n        }\n    },\n    beforeDestroy () {\n        this.observer.disconnect()\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.desc{\n    .desc-title {\n        margin-bottom: 10px;\n        color: #333;\n        font-weight: 700;\n        font-size: 16px;\n        line-height: 1.5715;\n    }\n    .desc-row{\n        display: flex;\n        flex-wrap: wrap;\n        border-radius: 2px;\n        border: 1px solid #EBEEF5;\n        border-bottom: 0;\n        border-right: 0;\n        width: 100%;\n    }\n}\n</style>\n"],"sourceRoot":"src/components/e-desc"}]}