{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/src/proto/js/cms_pb.js","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/proto/js/cms_pb.js","mtime":1632479127594},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gc291cmNlOiBjbXMucHJvdG8KLyoqCiAqIEBmaWxlb3ZlcnZpZXcKICogQGVuaGFuY2VhYmxlCiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuCiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3IKICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS4KICogQHB1YmxpYwogKi8gLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhCi8qIGVzbGludC1kaXNhYmxlICovIC8vIEB0cy1ub2NoZWNrCnZhciBqc3BiPXJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO3ZhciBnb29nPWpzcGI7dmFyIGdsb2JhbD1GdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO3ZhciB1c2VydHlwZV9wYj1yZXF1aXJlKCcuL3VzZXJ0eXBlX3BiLmpzJyk7Z29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLHVzZXJ0eXBlX3BiKTt2YXIgYW5jaG9ydHlwZV9wYj1yZXF1aXJlKCcuL2FuY2hvcnR5cGVfcGIuanMnKTtnb29nLm9iamVjdC5leHRlbmQocHJvdG8sYW5jaG9ydHlwZV9wYik7dmFyIGNtc3R5cGVfcGI9cmVxdWlyZSgnLi9jbXN0eXBlX3BiLmpzJyk7Z29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLGNtc3R5cGVfcGIpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVxdWVzdCcsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkFkbWluTGlzdFJlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkFwcExpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5BcHBTdGF0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkFyZWFMaXN0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdCcsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdCcsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkJsb2NrUmVxdWVzdCcsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseScsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseScsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdCcsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdCcsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXBseScsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5DcmVhdGVTZXR0bGVSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseScsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseScsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuSG9tZVN0YXRSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdCcsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuTWlncmF0ZVJlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXBseScsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVxdWVzdCcsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseScsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLlByb2Nlc3NWaW9sYXRpb25SZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHknLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdCcsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuVXNlckxpc3RSZXBseScsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5JyxudWxsLGdsb2JhbCk7Z29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcXVlc3QnLG51bGwsZ2xvYmFsKTtnb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseScsbnVsbCxnbG9iYWwpO2dvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QnLG51bGwsZ2xvYmFsKTsvKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5BcmVhTGlzdFJlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEscHJvdG8ucGIuY21zLkFyZWFMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseSxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5BcmVhTGlzdFJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseSc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5Mb2dpblJlcXVlc3QsanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuSG9tZVN0YXRSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkFwcFN0YXQ9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQXBwU3RhdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5BcHBTdGF0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQXBwU3RhdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuQXJlYVN0YXRSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEscHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHkucmVwZWF0ZWRGaWVsZHNfLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQXJlYVN0YXRSZXBseSxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQXJlYVN0YXRSZXBseSc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5LnJlcGVhdGVkRmllbGRzXyxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseSxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseT1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLHByb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseSxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseS5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLkFkbWluTGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseSc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXyxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseSxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuVXNlckxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QsanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXBseT1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkJsb2NrUmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlVuYmxvY2tSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuTWlncmF0ZVJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuTWlncmF0ZVJlcXVlc3QsanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuTWlncmF0ZVJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5NaWdyYXRlUmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkF1dGhvcml6ZUFuY2hvclJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5BdXRob3JpemVBbmNob3JSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5LnJlcGVhdGVkRmllbGRzXyxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXBseSxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Byb2ZpbGVSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLlByb2Nlc3NQcm9maWxlUmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLHByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEscHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QsanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QsanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseT1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLHByb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXyxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseS5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEscHJvdG8ucGIuY21zLlBheUxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseSc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXyxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseSxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEscHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseSc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEscHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXyxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseSc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkNyZWF0ZVNldHRsZVJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5DcmVhdGVTZXR0bGVSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuU3VibWl0U2V0dGxlUmVxdWVzdC5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5TdWJtaXRTZXR0bGVSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5TdWJtaXRTZXR0bGVSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseS5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEscHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuQXBwTGlzdFJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQXBwTGlzdFJlcXVlc3QsanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuQXBwTGlzdFJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkFwcExpc3RSZXBseT1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLHByb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQXBwTGlzdFJlcGx5LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkFwcExpc3RSZXBseS5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLkFwcExpc3RSZXBseSc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcXVlc3QsanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXBseT1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLHByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXyxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXBseS5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXF1ZXN0LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVwbHk9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcGx5LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVwbHkuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXF1ZXN0PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcXVlc3QnO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEscHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXBseSxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXBseSc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcXVlc3QsanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseT1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLHByb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXyxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseS5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVwbHknO30vKioKICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLgogKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhCiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWQKICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLgogKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbAogKiB2YWxpZC4KICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX0KICogQGNvbnN0cnVjdG9yCiAqL3Byb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVxdWVzdD1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLG51bGwsbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVxdWVzdCxqc3BiLk1lc3NhZ2UpO2lmKGdvb2cuREVCVUcmJiFDT01QSUxFRCl7LyoqCiAgICogQHB1YmxpYwogICAqIEBvdmVycmlkZQogICAqL3Byb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVxdWVzdC5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcGx5PWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEscHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseS5yZXBlYXRlZEZpZWxkc18sbnVsbCk7fTtnb29nLmluaGVyaXRzKHByb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVwbHksanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcGx5LmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcGx5Jzt9LyoqCiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci4KICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYQogKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkCiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC4KICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGwKICogdmFsaWQuCiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9CiAqIEBjb25zdHJ1Y3RvcgogKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3Q9ZnVuY3Rpb24ob3B0X2RhdGEpe2pzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsb3B0X2RhdGEsMCwtMSxudWxsLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3QsanNwYi5NZXNzYWdlKTtpZihnb29nLkRFQlVHJiYhQ09NUElMRUQpey8qKgogICAqIEBwdWJsaWMKICAgKiBAb3ZlcnJpZGUKICAgKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3QuZGlzcGxheU5hbWU9J3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdCc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXBseT1mdW5jdGlvbihvcHRfZGF0YSl7anNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxvcHRfZGF0YSwwLC0xLHByb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfLG51bGwpO307Z29vZy5pbmhlcml0cyhwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5LGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXBseS5kaXNwbGF5TmFtZT0ncHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXBseSc7fS8qKgogKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuCiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGEKICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZAogKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuCiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsCiAqIHZhbGlkLgogKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfQogKiBAY29uc3RydWN0b3IKICovcHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rPWZ1bmN0aW9uKG9wdF9kYXRhKXtqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLG9wdF9kYXRhLDAsLTEsbnVsbCxudWxsKTt9O2dvb2cuaW5oZXJpdHMocHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rLGpzcGIuTWVzc2FnZSk7aWYoZ29vZy5ERUJVRyYmIUNPTVBJTEVEKXsvKioKICAgKiBAcHVibGljCiAgICogQG92ZXJyaWRlCiAgICovcHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rLmRpc3BsYXlOYW1lPSdwcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsnO30vKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc189WzFdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5BcmVhTGlzdFJlcGx5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLkFyZWFMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFyZWFMaXN0UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseS50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2FyZWFzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRBcmVhc0xpc3QoKSx1c2VydHlwZV9wYi5BcmVhLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLkFyZWFMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFyZWFMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BcmVhTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPW5ldyB1c2VydHlwZV9wYi5BcmVhKCk7cmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHVzZXJ0eXBlX3BiLkFyZWEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTttc2cuYWRkQXJlYXModmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFyZWFMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BcmVhTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEFyZWFzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsdXNlcnR5cGVfcGIuQXJlYS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fX07LyoqCiAqIHJlcGVhdGVkIHBiLkFyZWEgYXJlYXMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkFyZWE+fQogKi9wcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseS5wcm90b3R5cGUuZ2V0QXJlYXNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHVzZXJ0eXBlX3BiLkFyZWEsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLkFyZWE+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFyZWFMaXN0UmVwbHl9IHJldHVybnMgdGhpcwoqL3Byb3RvLnBiLmNtcy5BcmVhTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRBcmVhc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5BcmVhPX0gb3B0X3ZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4CiAqIEByZXR1cm4geyFwcm90by5wYi5BcmVhfQogKi9wcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseS5wcm90b3R5cGUuYWRkQXJlYXM9ZnVuY3Rpb24ob3B0X3ZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSxvcHRfdmFsdWUscHJvdG8ucGIuQXJlYSxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFyZWFMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXJlYUxpc3RSZXBseS5wcm90b3R5cGUuY2xlYXJBcmVhc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRBcmVhc0xpc3QoW10pO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5Mb2dpblJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Mb2dpblJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtlbWFpbDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwiIikscGFzc3dvcmQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsIiIpfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5Mb2dpblJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkU3RyaW5nKCk7bXNnLnNldEVtYWlsKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkU3RyaW5nKCk7bXNnLnNldFBhc3N3b3JkKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEVtYWlsKCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlU3RyaW5nKDEsZik7fWY9bWVzc2FnZS5nZXRQYXNzd29yZCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVN0cmluZygyLGYpO319Oy8qKgogKiBvcHRpb25hbCBzdHJpbmcgZW1haWwgPSAxOwogKiBAcmV0dXJuIHtzdHJpbmd9CiAqL3Byb3RvLnBiLmNtcy5Mb2dpblJlcXVlc3QucHJvdG90eXBlLmdldEVtYWlsPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwiIik7fTsvKioKICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdC5wcm90b3R5cGUuc2V0RW1haWw9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBzdHJpbmcgcGFzc3dvcmQgPSAyOwogKiBAcmV0dXJuIHtzdHJpbmd9CiAqL3Byb3RvLnBiLmNtcy5Mb2dpblJlcXVlc3QucHJvdG90eXBlLmdldFBhc3N3b3JkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwiIik7fTsvKioKICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTG9naW5SZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkxvZ2luUmVxdWVzdC5wcm90b3R5cGUuc2V0UGFzc3dvcmQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywyLHZhbHVlKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17YXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApLHN0YXJ0QXQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCksZW5kQXQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QXJlYUlkKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFN0YXJ0QXQodmFsdWUpO2JyZWFrO2Nhc2UgMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0RW5kQXQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxLGYpO31mPW1lc3NhZ2UuZ2V0U3RhcnRBdCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEVuZEF0KCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYXJlYV9pZCA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0LnByb3RvdHlwZS5zZXRBcmVhSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgc3RhcnRfYXQgPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3QucHJvdG90eXBlLmdldFN0YXJ0QXQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcXVlc3QucHJvdG90eXBlLnNldFN0YXJ0QXQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgZW5kX2F0ID0gMzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0LnByb3RvdHlwZS5nZXRFbmRBdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVxdWVzdC5wcm90b3R5cGUuc2V0RW5kQXQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLHZhbHVlKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2luY29tZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxwYXlDb3VudDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxuZXdVc2VyOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLGFjdGl2ZVVzZXI6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDQsMCksYnVzeUFuY2hvcjpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNSwwKSxvbmxpbmVBbmNob3I6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDYsMCkscmV2aWV3QW5jaG9yOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw3LDApLHJldmlld1Byb2ZpbGU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDgsMCkscmV2aWV3VmlkZW86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDksMCksbmV3QW1vdW50OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxMCwwKSxleHBlbnNlQW1vdW50OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxMSwwKSx0b3RhbEFtb3VudDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMTIsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseX0KICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEluY29tZSh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYXlDb3VudCh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXROZXdVc2VyKHZhbHVlKTticmVhaztjYXNlIDQ6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFjdGl2ZVVzZXIodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QnVzeUFuY2hvcih2YWx1ZSk7YnJlYWs7Y2FzZSA2OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRPbmxpbmVBbmNob3IodmFsdWUpO2JyZWFrO2Nhc2UgNzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UmV2aWV3QW5jaG9yKHZhbHVlKTticmVhaztjYXNlIDg6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFJldmlld1Byb2ZpbGUodmFsdWUpO2JyZWFrO2Nhc2UgOTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UmV2aWV3VmlkZW8odmFsdWUpO2JyZWFrO2Nhc2UgMTA6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDY0KCk7bXNnLnNldE5ld0Ftb3VudCh2YWx1ZSk7YnJlYWs7Y2FzZSAxMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50NjQoKTttc2cuc2V0RXhwZW5zZUFtb3VudCh2YWx1ZSk7YnJlYWs7Y2FzZSAxMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50NjQoKTttc2cuc2V0VG90YWxBbW91bnQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEluY29tZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9Zj1tZXNzYWdlLmdldFBheUNvdW50KCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0TmV3VXNlcigpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldEFjdGl2ZVVzZXIoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDQsZik7fWY9bWVzc2FnZS5nZXRCdXN5QW5jaG9yKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig1LGYpO31mPW1lc3NhZ2UuZ2V0T25saW5lQW5jaG9yKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig2LGYpO31mPW1lc3NhZ2UuZ2V0UmV2aWV3QW5jaG9yKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig3LGYpO31mPW1lc3NhZ2UuZ2V0UmV2aWV3UHJvZmlsZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoOCxmKTt9Zj1tZXNzYWdlLmdldFJldmlld1ZpZGVvKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig5LGYpO31mPW1lc3NhZ2UuZ2V0TmV3QW1vdW50KCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQ2NCgxMCxmKTt9Zj1tZXNzYWdlLmdldEV4cGVuc2VBbW91bnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDY0KDExLGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxBbW91bnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDY0KDEyLGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgaW5jb21lID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuZ2V0SW5jb21lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkucHJvdG90eXBlLnNldEluY29tZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYXlfY291bnQgPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5LnByb3RvdHlwZS5nZXRQYXlDb3VudD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5LnByb3RvdHlwZS5zZXRQYXlDb3VudD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBuZXdfdXNlciA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkucHJvdG90eXBlLmdldE5ld1VzZXI9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuc2V0TmV3VXNlcj1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhY3RpdmVfdXNlciA9IDQ7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkucHJvdG90eXBlLmdldEFjdGl2ZVVzZXI9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuc2V0QWN0aXZlVXNlcj1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBidXN5X2FuY2hvciA9IDU7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkucHJvdG90eXBlLmdldEJ1c3lBbmNob3I9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuc2V0QnVzeUFuY2hvcj1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBvbmxpbmVfYW5jaG9yID0gNjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuZ2V0T25saW5lQW5jaG9yPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkucHJvdG90eXBlLnNldE9ubGluZUFuY2hvcj1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiByZXZpZXdfYW5jaG9yID0gNzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuZ2V0UmV2aWV3QW5jaG9yPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkucHJvdG90eXBlLnNldFJldmlld0FuY2hvcj1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDcsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiByZXZpZXdfcHJvZmlsZSA9IDg7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkucHJvdG90eXBlLmdldFJldmlld1Byb2ZpbGU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw4LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuc2V0UmV2aWV3UHJvZmlsZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDgsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiByZXZpZXdfdmlkZW8gPSA5OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5LnByb3RvdHlwZS5nZXRSZXZpZXdWaWRlbz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDksMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5LnByb3RvdHlwZS5zZXRSZXZpZXdWaWRlbz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDksdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQ2NCBuZXdfYW1vdW50ID0gMTA7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkucHJvdG90eXBlLmdldE5ld0Ftb3VudD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEwLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuc2V0TmV3QW1vdW50PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMTAsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQ2NCBleHBlbnNlX2Ftb3VudCA9IDExOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5LnByb3RvdHlwZS5nZXRFeHBlbnNlQW1vdW50PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMTEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5LnByb3RvdHlwZS5zZXRFeHBlbnNlQW1vdW50PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMTEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQ2NCB0b3RhbF9hbW91bnQgPSAxMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuT3ZlcnZpZXdSZXBseS5wcm90b3R5cGUuZ2V0VG90YWxBbW91bnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5PdmVydmlld1JlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLk92ZXJ2aWV3UmVwbHkucHJvdG90eXBlLnNldFRvdGFsQW1vdW50PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMTIsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXthcmVhSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCksc3RhcnRBdDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxlbmRBdDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuSG9tZVN0YXRSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0U3RhcnRBdCh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRFbmRBdCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBcmVhSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRTdGFydEF0KCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0RW5kQXQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDMsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuSG9tZVN0YXRSZXF1ZXN0LnByb3RvdHlwZS5nZXRBcmVhSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBzdGFydF9hdCA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdC5wcm90b3R5cGUuZ2V0U3RhcnRBdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuSG9tZVN0YXRSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVxdWVzdC5wcm90b3R5cGUuc2V0U3RhcnRBdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBlbmRfYXQgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3QucHJvdG90eXBlLmdldEVuZEF0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuSG9tZVN0YXRSZXF1ZXN0LnByb3RvdHlwZS5zZXRFbmRBdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkFwcFN0YXQucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuQXBwU3RhdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQXBwU3RhdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BcHBTdGF0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17YXBwSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCksbmV3SW5jb21lOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLHRvdGFsSW5jb21lOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLG5ld1VzZXI6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDQsMCksZ29vZ2xlSW5jb21lOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApLGFwcGxlSW5jb21lOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw2LDApLG90aGVySW5jb21lOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw3LDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFwcFN0YXR9CiAqL3Byb3RvLnBiLmNtcy5BcHBTdGF0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkFwcFN0YXQoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkFwcFN0YXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFwcFN0YXR9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBTdGF0fQogKi9wcm90by5wYi5jbXMuQXBwU3RhdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcHBJZCh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXROZXdJbmNvbWUodmFsdWUpO2JyZWFrO2Nhc2UgMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxJbmNvbWUodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0TmV3VXNlcih2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRHb29nbGVJbmNvbWUodmFsdWUpO2JyZWFrO2Nhc2UgNjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QXBwbGVJbmNvbWUodmFsdWUpO2JyZWFrO2Nhc2UgNzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0T3RoZXJJbmNvbWUodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQXBwU3RhdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQXBwU3RhdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFwcFN0YXR9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BcHBTdGF0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEFwcElkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxLGYpO31mPW1lc3NhZ2UuZ2V0TmV3SW5jb21lKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxJbmNvbWUoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDMsZik7fWY9bWVzc2FnZS5nZXROZXdVc2VyKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0R29vZ2xlSW5jb21lKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig1LGYpO31mPW1lc3NhZ2UuZ2V0QXBwbGVJbmNvbWUoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDYsZik7fWY9bWVzc2FnZS5nZXRPdGhlckluY29tZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNyxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFwcF9pZCA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFwcFN0YXQucHJvdG90eXBlLmdldEFwcElkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBTdGF0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFwcFN0YXQucHJvdG90eXBlLnNldEFwcElkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIG5ld19pbmNvbWUgPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BcHBTdGF0LnByb3RvdHlwZS5nZXROZXdJbmNvbWU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFwcFN0YXR9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXBwU3RhdC5wcm90b3R5cGUuc2V0TmV3SW5jb21lPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRvdGFsX2luY29tZSA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFwcFN0YXQucHJvdG90eXBlLmdldFRvdGFsSW5jb21lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBTdGF0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFwcFN0YXQucHJvdG90eXBlLnNldFRvdGFsSW5jb21lPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIG5ld191c2VyID0gNDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQXBwU3RhdC5wcm90b3R5cGUuZ2V0TmV3VXNlcj1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXBwU3RhdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BcHBTdGF0LnByb3RvdHlwZS5zZXROZXdVc2VyPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGdvb2dsZV9pbmNvbWUgPSA1OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BcHBTdGF0LnByb3RvdHlwZS5nZXRHb29nbGVJbmNvbWU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFwcFN0YXR9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXBwU3RhdC5wcm90b3R5cGUuc2V0R29vZ2xlSW5jb21lPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFwcGxlX2luY29tZSA9IDY7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFwcFN0YXQucHJvdG90eXBlLmdldEFwcGxlSW5jb21lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBTdGF0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFwcFN0YXQucHJvdG90eXBlLnNldEFwcGxlSW5jb21lPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIG90aGVyX2luY29tZSA9IDc7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFwcFN0YXQucHJvdG90eXBlLmdldE90aGVySW5jb21lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBTdGF0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFwcFN0YXQucHJvdG90eXBlLnNldE90aGVySW5jb21lPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNyx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseS5yZXBlYXRlZEZpZWxkc189WzEsMl07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17c3RhdHNMaXN0OmpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldFN0YXRzTGlzdCgpLHByb3RvLnBiLmNtcy5BcHBTdGF0LnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSksaG91cmx5QWN0aXZlc0xpc3Q6KGY9anNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQobXNnLDIpKT09bnVsbD91bmRlZmluZWQ6Zn07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5fQogKi9wcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseX0KICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IHByb3RvLnBiLmNtcy5BcHBTdGF0KCk7cmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLnBiLmNtcy5BcHBTdGF0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZFN0YXRzKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlcz1yZWFkZXIuaXNEZWxpbWl0ZWQoKT9yZWFkZXIucmVhZFBhY2tlZFVpbnQzMigpOltyZWFkZXIucmVhZFVpbnQzMigpXTtmb3IodmFyIGk9MDtpPHZhbHVlcy5sZW5ndGg7aSsrKXttc2cuYWRkSG91cmx5QWN0aXZlcyh2YWx1ZXNbaV0pO31icmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRTdGF0c0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLHByb3RvLnBiLmNtcy5BcHBTdGF0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9Zj1tZXNzYWdlLmdldEhvdXJseUFjdGl2ZXNMaXN0KCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlUGFja2VkVWludDMyKDIsZik7fX07LyoqCiAqIHJlcGVhdGVkIEFwcFN0YXQgc3RhdHMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLmNtcy5BcHBTdGF0Pn0KICovcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHkucHJvdG90eXBlLmdldFN0YXRzTGlzdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyxwcm90by5wYi5jbXMuQXBwU3RhdCwxKTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ucGIuY21zLkFwcFN0YXQ+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHl9IHJldHVybnMgdGhpcwoqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5LnByb3RvdHlwZS5zZXRTdGF0c0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQXBwU3RhdD19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFwcFN0YXR9CiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5LnByb3RvdHlwZS5hZGRTdGF0cz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5jbXMuQXBwU3RhdCxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseS5wcm90b3R5cGUuY2xlYXJTdGF0c0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRTdGF0c0xpc3QoW10pO307LyoqCiAqIHJlcGVhdGVkIHVpbnQzMiBob3VybHlfYWN0aXZlcyA9IDI7CiAqIEByZXR1cm4geyFBcnJheTxudW1iZXI+fQogKi9wcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseS5wcm90b3R5cGUuZ2V0SG91cmx5QWN0aXZlc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywyKTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTxudW1iZXI+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkhvbWVTdGF0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseS5wcm90b3R5cGUuc2V0SG91cmx5QWN0aXZlc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywyLHZhbHVlfHxbXSk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4CiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5LnByb3RvdHlwZS5hZGRIb3VybHlBY3RpdmVzPWZ1bmN0aW9uKHZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywyLHZhbHVlLG9wdF9pbmRleCk7fTsvKioKICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuSG9tZVN0YXRSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Ib21lU3RhdFJlcGx5LnByb3RvdHlwZS5jbGVhckhvdXJseUFjdGl2ZXNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0SG91cmx5QWN0aXZlc0xpc3QoW10pO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXthcmVhSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCksc3RhcnRBdDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxlbmRBdDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuQXJlYVN0YXRSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0U3RhcnRBdCh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRFbmRBdCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBcmVhSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRTdGFydEF0KCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0RW5kQXQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDMsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQXJlYVN0YXRSZXF1ZXN0LnByb3RvdHlwZS5nZXRBcmVhSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBzdGFydF9hdCA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdC5wcm90b3R5cGUuZ2V0U3RhcnRBdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXJlYVN0YXRSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVxdWVzdC5wcm90b3R5cGUuc2V0U3RhcnRBdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBlbmRfYXQgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3QucHJvdG90eXBlLmdldEVuZEF0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXJlYVN0YXRSZXF1ZXN0LnByb3RvdHlwZS5zZXRFbmRBdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS4KICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fQogKiBAY29uc3QKICovcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHkucmVwZWF0ZWRGaWVsZHNfPVsxXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuQXJlYVN0YXRSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcGx5LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcGx5fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtzdGF0c0xpc3Q6anNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0U3RhdHNMaXN0KCksY21zdHlwZV9wYi5BcmVhU3RhdC50b09iamVjdCxpbmNsdWRlSW5zdGFuY2UpfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BcmVhU3RhdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHkoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcGx5fQogKi9wcm90by5wYi5jbXMuQXJlYVN0YXRSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgY21zdHlwZV9wYi5BcmVhU3RhdCgpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxjbXN0eXBlX3BiLkFyZWFTdGF0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZFN0YXRzKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcGx5fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQXJlYVN0YXRSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRTdGF0c0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLGNtc3R5cGVfcGIuQXJlYVN0YXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpO319Oy8qKgogKiByZXBlYXRlZCBwYi5BcmVhU3RhdCBzdGF0cyA9IDE7CiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ucGIuQXJlYVN0YXQ+fQogKi9wcm90by5wYi5jbXMuQXJlYVN0YXRSZXBseS5wcm90b3R5cGUuZ2V0U3RhdHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLGNtc3R5cGVfcGIuQXJlYVN0YXQsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLkFyZWFTdGF0Pn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuQXJlYVN0YXRSZXBseS5wcm90b3R5cGUuc2V0U3RhdHNMaXN0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuQXJlYVN0YXQ9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLkFyZWFTdGF0fQogKi9wcm90by5wYi5jbXMuQXJlYVN0YXRSZXBseS5wcm90b3R5cGUuYWRkU3RhdHM9ZnVuY3Rpb24ob3B0X3ZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSxvcHRfdmFsdWUscHJvdG8ucGIuQXJlYVN0YXQsb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcmVhU3RhdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFyZWFTdGF0UmVwbHkucHJvdG90eXBlLmNsZWFyU3RhdHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0U3RhdHNMaXN0KFtdKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCksYXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLGxldmVsOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw0LDApLGFuY2hvcklkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApLHN0YXRBdDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNiwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldExldmVsKHZhbHVlKTticmVhaztjYXNlIDU6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFuY2hvcklkKHZhbHVlKTticmVhaztjYXNlIDY6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFN0YXRBdCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0TGV2ZWwoKTtpZihmIT09MC4wKXt3cml0ZXIud3JpdGVFbnVtKDQsZik7fWY9bWVzc2FnZS5nZXRBbmNob3JJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNSxmKTt9Zj1tZXNzYWdlLmdldFN0YXRBdCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNixmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfbm8gPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGFnZU5vPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfc2l6ZSA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcXVlc3QucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFyZWFfaWQgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXJlYUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuQW5jaG9yTGV2ZWwgbGV2ZWwgPSA0OwogKiBAcmV0dXJuIHshcHJvdG8ucGIuQW5jaG9yTGV2ZWx9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC5wcm90b3R5cGUuZ2V0TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkFuY2hvckxldmVsfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0LnByb3RvdHlwZS5zZXRMZXZlbD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcyw0LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYW5jaG9yX2lkID0gNTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcXVlc3QucHJvdG90eXBlLmdldEFuY2hvcklkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVxdWVzdC5wcm90b3R5cGUuc2V0QW5jaG9ySWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgc3RhdF9hdCA9IDY7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0LnByb3RvdHlwZS5nZXRTdGF0QXQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw2LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXF1ZXN0LnByb3RvdHlwZS5zZXRTdGF0QXQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw2LHZhbHVlKTt9Oy8qKgogKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuCiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn0KICogQGNvbnN0CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHkucmVwZWF0ZWRGaWVsZHNfPVsxXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseS50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e3N0YXRzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRTdGF0c0xpc3QoKSxjbXN0eXBlX3BiLkFuY2hvclN0YXQudG9PYmplY3QsaW5jbHVkZUluc3RhbmNlKSxwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksdG90YWxQYWdlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw0LDApLHRvdGFsQ291bnQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5fQogKi9wcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IGNtc3R5cGVfcGIuQW5jaG9yU3RhdCgpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxjbXN0eXBlX3BiLkFuY2hvclN0YXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTttc2cuYWRkU3RhdHModmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZU5vKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VTaXplKHZhbHVlKTticmVhaztjYXNlIDQ6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFRvdGFsUGFnZSh2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRUb3RhbENvdW50KHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFN0YXRzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsY21zdHlwZV9wYi5BbmNob3JTdGF0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxQYWdlKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxDb3VudCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNSxmKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuQW5jaG9yU3RhdCBzdGF0cyA9IDE7CiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ucGIuQW5jaG9yU3RhdD59CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHkucHJvdG90eXBlLmdldFN0YXRzTGlzdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyxjbXN0eXBlX3BiLkFuY2hvclN0YXQsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLkFuY2hvclN0YXQ+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseX0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseS5wcm90b3R5cGUuc2V0U3RhdHNMaXN0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuQW5jaG9yU3RhdD19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuQW5jaG9yU3RhdH0KICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseS5wcm90b3R5cGUuYWRkU3RhdHM9ZnVuY3Rpb24ob3B0X3ZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSxvcHRfdmFsdWUscHJvdG8ucGIuQW5jaG9yU3RhdCxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHkucHJvdG90eXBlLmNsZWFyU3RhdHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0U3RhdHNMaXN0KFtdKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9ubyA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseS5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5LnByb3RvdHlwZS5zZXRQYWdlTm89ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9zaXplID0gMzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseS5wcm90b3R5cGUuc2V0UGFnZVNpemU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgdG90YWxfcGFnZSA9IDQ7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseS5wcm90b3R5cGUuZ2V0VG90YWxQYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yU3RhdFJlcGx5LnByb3RvdHlwZS5zZXRUb3RhbFBhZ2U9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgdG90YWxfY291bnQgPSA1OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsQ291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvclN0YXRSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JTdGF0UmVwbHkucHJvdG90eXBlLnNldFRvdGFsQ291bnQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LHZhbHVlKTt9Oy8qKgogKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuCiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn0KICogQGNvbnN0CiAqL3Byb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc189WzFdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQWRtaW5MaXN0UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQWRtaW5MaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXthZG1pbnNMaXN0OmpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldEFkbWluc0xpc3QoKSxjbXN0eXBlX3BiLkFkbWluLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQWRtaW5MaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuQWRtaW5MaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFkbWluTGlzdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQWRtaW5MaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgY21zdHlwZV9wYi5BZG1pbigpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxjbXN0eXBlX3BiLkFkbWluLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZEFkbWlucyh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQWRtaW5MaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFkbWluTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEFkbWluc0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLGNtc3R5cGVfcGIuQWRtaW4uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpO319Oy8qKgogKiByZXBlYXRlZCBwYi5BZG1pbiBhZG1pbnMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkFkbWluPn0KICovcHJvdG8ucGIuY21zLkFkbWluTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRBZG1pbnNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLGNtc3R5cGVfcGIuQWRtaW4sMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLkFkbWluPn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BZG1pbkxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLkFkbWluTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRBZG1pbnNMaXN0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuQWRtaW49fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLkFkbWlufQogKi9wcm90by5wYi5jbXMuQWRtaW5MaXN0UmVwbHkucHJvdG90eXBlLmFkZEFkbWlucz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5BZG1pbixvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFkbWluTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFkbWluTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhckFkbWluc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRBZG1pbnNMaXN0KFtdKTt9Oy8qKgogKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuCiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn0KICogQGNvbnN0CiAqL3Byb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseS5yZXBlYXRlZEZpZWxkc189WzFdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtndWlsZHNMaXN0OmpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldEd1aWxkc0xpc3QoKSxjbXN0eXBlX3BiLkd1aWxkLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkd1aWxkTGlzdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgY21zdHlwZV9wYi5HdWlsZCgpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxjbXN0eXBlX3BiLkd1aWxkLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZEd1aWxkcyh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkd1aWxkTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEd1aWxkc0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLGNtc3R5cGVfcGIuR3VpbGQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpO319Oy8qKgogKiByZXBlYXRlZCBwYi5HdWlsZCBndWlsZHMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkd1aWxkPn0KICovcHJvdG8ucGIuY21zLkd1aWxkTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRHdWlsZHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLGNtc3R5cGVfcGIuR3VpbGQsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLkd1aWxkPn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5HdWlsZExpc3RSZXBseX0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLkd1aWxkTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRHdWlsZHNMaXN0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuR3VpbGQ9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLkd1aWxkfQogKi9wcm90by5wYi5jbXMuR3VpbGRMaXN0UmVwbHkucHJvdG90eXBlLmFkZEd1aWxkcz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5HdWlsZCxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkd1aWxkTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkd1aWxkTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhckd1aWxkc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRHdWlsZHNMaXN0KFtdKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCksYW5jaG9ySWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksYXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw0LDApLGd1aWxkSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCksYmxvY2tTdGF0dXM6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDYsMCksb25saW5lU3RhdHVzOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw3LDApLHJldmlld1N0YXR1czpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csOCwwKSxjcmVhdGVkU3RhcnQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDksMCksY3JlYXRlZEVuZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMTAsMCksbWluT2ZmbGluZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMTEsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlTm8odmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZVNpemUodmFsdWUpO2JyZWFrO2Nhc2UgMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QW5jaG9ySWQodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QXJlYUlkKHZhbHVlKTticmVhaztjYXNlIDU6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEd1aWxkSWQodmFsdWUpO2JyZWFrO2Nhc2UgNjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldEJsb2NrU3RhdHVzKHZhbHVlKTticmVhaztjYXNlIDc6dmFyIHZhbHVlPXJlYWRlci5yZWFkRW51bSgpO21zZy5zZXRPbmxpbmVTdGF0dXModmFsdWUpO2JyZWFrO2Nhc2UgODp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldFJldmlld1N0YXR1cyh2YWx1ZSk7YnJlYWs7Y2FzZSA5OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRDcmVhdGVkU3RhcnQodmFsdWUpO2JyZWFrO2Nhc2UgMTA6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldENyZWF0ZWRFbmQodmFsdWUpO2JyZWFrO2Nhc2UgMTE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldE1pbk9mZmxpbmUodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEFuY2hvcklkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0R3VpbGRJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNSxmKTt9Zj1tZXNzYWdlLmdldEJsb2NrU3RhdHVzKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg2LGYpO31mPW1lc3NhZ2UuZ2V0T25saW5lU3RhdHVzKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg3LGYpO31mPW1lc3NhZ2UuZ2V0UmV2aWV3U3RhdHVzKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg4LGYpO31mPW1lc3NhZ2UuZ2V0Q3JlYXRlZFN0YXJ0KCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig5LGYpO31mPW1lc3NhZ2UuZ2V0Q3JlYXRlZEVuZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMTAsZik7fWY9bWVzc2FnZS5nZXRNaW5PZmZsaW5lKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxMSxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfbm8gPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGFnZU5vPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfc2l6ZSA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFuY2hvcl9pZCA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBbmNob3JJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFuY2hvcklkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFyZWFfaWQgPSA0OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXJlYUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGd1aWxkX2lkID0gNTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEd1aWxkSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRHdWlsZElkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuQmxvY2tTdGF0dXMgYmxvY2tfc3RhdHVzID0gNjsKICogQHJldHVybiB7IXByb3RvLnBiLkJsb2NrU3RhdHVzfQogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEJsb2NrU3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5CbG9ja1N0YXR1c30gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QmxvY2tTdGF0dXM9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuT25saW5lU3RhdHVzIG9ubGluZV9zdGF0dXMgPSA3OwogKiBAcmV0dXJuIHshcHJvdG8ucGIuT25saW5lU3RhdHVzfQogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldE9ubGluZVN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDcsMCk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuT25saW5lU3RhdHVzfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRPbmxpbmVTdGF0dXM9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuUmV2aWV3U3RhdHVzIHJldmlld19zdGF0dXMgPSA4OwogKiBAcmV0dXJuIHshcHJvdG8ucGIuUmV2aWV3U3RhdHVzfQogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFJldmlld1N0YXR1cz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDgsMCk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuUmV2aWV3U3RhdHVzfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRSZXZpZXdTdGF0dXM9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsOCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGNyZWF0ZWRfc3RhcnQgPSA5OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q3JlYXRlZFN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsOSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0Q3JlYXRlZFN0YXJ0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGNyZWF0ZWRfZW5kID0gMTA7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRDcmVhdGVkRW5kPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMTAsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldENyZWF0ZWRFbmQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxMCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIG1pbl9vZmZsaW5lID0gMTE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRNaW5PZmZsaW5lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMTEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldE1pbk9mZmxpbmU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxMSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXz1bMV07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXthbmNob3JzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRBbmNob3JzTGlzdCgpLGFuY2hvcnR5cGVfcGIuQW5jaG9yQmFzaWMudG9PYmplY3QsaW5jbHVkZUluc3RhbmNlKSxwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksdG90YWxQYWdlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw0LDApLHRvdGFsQ291bnQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IGFuY2hvcnR5cGVfcGIuQW5jaG9yQmFzaWMoKTtyZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsYW5jaG9ydHlwZV9wYi5BbmNob3JCYXNpYy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO21zZy5hZGRBbmNob3JzKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRUb3RhbFBhZ2UodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxDb3VudCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBbmNob3JzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsYW5jaG9ydHlwZV9wYi5BbmNob3JCYXNpYy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fWY9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDIsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsUGFnZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNCxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsQ291bnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDUsZik7fX07LyoqCiAqIHJlcGVhdGVkIHBiLkFuY2hvckJhc2ljIGFuY2hvcnMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkFuY2hvckJhc2ljPn0KICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseS5wcm90b3R5cGUuZ2V0QW5jaG9yc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsYW5jaG9ydHlwZV9wYi5BbmNob3JCYXNpYywxKTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ucGIuQW5jaG9yQmFzaWM+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseS5wcm90b3R5cGUuc2V0QW5jaG9yc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5BbmNob3JCYXNpYz19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuQW5jaG9yQmFzaWN9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHkucHJvdG90eXBlLmFkZEFuY2hvcnM9ZnVuY3Rpb24ob3B0X3ZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSxvcHRfdmFsdWUscHJvdG8ucGIuQW5jaG9yQmFzaWMsb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhckFuY2hvcnNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0QW5jaG9yc0xpc3QoW10pO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX25vID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRQYWdlTm89ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHkucHJvdG90eXBlLnNldFBhZ2VObz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX3NpemUgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHkucHJvdG90eXBlLmdldFBhZ2VTaXplPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRQYWdlU2l6ZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9wYWdlID0gNDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRUb3RhbFBhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JMaXN0UmVwbHkucHJvdG90eXBlLnNldFRvdGFsUGFnZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9jb3VudCA9IDU7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseS5wcm90b3R5cGUuZ2V0VG90YWxDb3VudD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFuY2hvckxpc3RSZXBseS5wcm90b3R5cGUuc2V0VG90YWxDb3VudD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCksdXNlcklkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLGFyZWFJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNCwwKSxuaWNrbmFtZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNSwiIiksdmlwT25seTpqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQobXNnLDYsZmFsc2UpLGRlcG9zaXRPbmx5OmpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdChtc2csNyxmYWxzZSksbWluQmFsYW5jZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csOCwwKSxjcmVhdGVkU3RhcnQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDksMCksY3JlYXRlZEVuZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMTAsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZU5vKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VTaXplKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFVzZXJJZCh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRTdHJpbmcoKTttc2cuc2V0Tmlja25hbWUodmFsdWUpO2JyZWFrO2Nhc2UgNjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRCb29sKCk7bXNnLnNldFZpcE9ubHkodmFsdWUpO2JyZWFrO2Nhc2UgNzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRCb29sKCk7bXNnLnNldERlcG9zaXRPbmx5KHZhbHVlKTticmVhaztjYXNlIDg6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldE1pbkJhbGFuY2UodmFsdWUpO2JyZWFrO2Nhc2UgOTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0Q3JlYXRlZFN0YXJ0KHZhbHVlKTticmVhaztjYXNlIDEwOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRDcmVhdGVkRW5kKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0VXNlcklkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0Tmlja25hbWUoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVTdHJpbmcoNSxmKTt9Zj1tZXNzYWdlLmdldFZpcE9ubHkoKTtpZihmKXt3cml0ZXIud3JpdGVCb29sKDYsZik7fWY9bWVzc2FnZS5nZXREZXBvc2l0T25seSgpO2lmKGYpe3dyaXRlci53cml0ZUJvb2woNyxmKTt9Zj1tZXNzYWdlLmdldE1pbkJhbGFuY2UoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDgsZik7fWY9bWVzc2FnZS5nZXRDcmVhdGVkU3RhcnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDksZik7fWY9bWVzc2FnZS5nZXRDcmVhdGVkRW5kKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxMCxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfbm8gPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFBhZ2VObz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGFnZU5vPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfc2l6ZSA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZVNpemU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHVzZXJfaWQgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFVzZXJJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0VXNlcklkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFyZWFfaWQgPSA0OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEFyZWFJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXJlYUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgc3RyaW5nIG5pY2tuYW1lID0gNTsKICogQHJldHVybiB7c3RyaW5nfQogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXROaWNrbmFtZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsIiIpO307LyoqCiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldE5pY2tuYW1lPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsNSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgYm9vbCB2aXBfb25seSA9IDY7CiAqIEByZXR1cm4ge2Jvb2xlYW59CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFZpcE9ubHk9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsNixmYWxzZSk7fTsvKioKICogQHBhcmFtIHtib29sZWFufSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFZpcE9ubHk9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsNix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgYm9vbCBkZXBvc2l0X29ubHkgPSA3OwogKiBAcmV0dXJuIHtib29sZWFufQogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXREZXBvc2l0T25seT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcyw3LGZhbHNlKTt9Oy8qKgogKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0RGVwb3NpdE9ubHk9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsNyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIG1pbl9iYWxhbmNlID0gODsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRNaW5CYWxhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsOCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRNaW5CYWxhbmNlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGNyZWF0ZWRfc3RhcnQgPSA5OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldENyZWF0ZWRTdGFydD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDksMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0Q3JlYXRlZFN0YXJ0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGNyZWF0ZWRfZW5kID0gMTA7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q3JlYXRlZEVuZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEwLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldENyZWF0ZWRFbmQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxMCx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc189WzFdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXBseS50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e3VzZXJzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRVc2Vyc0xpc3QoKSx1c2VydHlwZV9wYi5Vc2VyLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSkscGFnZU5vOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLHBhZ2VTaXplOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLHRvdGFsUGFnZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNCwwKSx0b3RhbENvdW50OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHkoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgdXNlcnR5cGVfcGIuVXNlcigpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSx1c2VydHlwZV9wYi5Vc2VyLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZFVzZXJzKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRUb3RhbFBhZ2UodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxDb3VudCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0VXNlcnNMaXN0KCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKDEsZix1c2VydHlwZV9wYi5Vc2VyLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxQYWdlKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxDb3VudCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNSxmKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuVXNlciB1c2VycyA9IDE7CiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ucGIuVXNlcj59CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRVc2Vyc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsdXNlcnR5cGVfcGIuVXNlciwxKTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ucGIuVXNlcj59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHkucHJvdG90eXBlLnNldFVzZXJzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLlVzZXI9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLlVzZXJ9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LnByb3RvdHlwZS5hZGRVc2Vycz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5Vc2VyLG9wdF9pbmRleCk7fTsvKioKICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhclVzZXJzTGlzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNldFVzZXJzTGlzdChbXSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfbm8gPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRQYWdlTm89ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXBseS5wcm90b3R5cGUuc2V0UGFnZU5vPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfc2l6ZSA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHkucHJvdG90eXBlLmdldFBhZ2VTaXplPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHkucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRvdGFsX3BhZ2UgPSA0OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRUb3RhbFBhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlVzZXJMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXBseS5wcm90b3R5cGUuc2V0VG90YWxQYWdlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRvdGFsX2NvdW50ID0gNTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVXNlckxpc3RSZXBseS5wcm90b3R5cGUuZ2V0VG90YWxDb3VudD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVXNlckxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Vc2VyTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRUb3RhbENvdW50PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSx2YWx1ZSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17ZW50aXR5VHlwZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxlbnRpdHlJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxhbW91bnQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksc2VuZE5vdGlmeTpqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQobXNnLDQsZmFsc2UpLGRlc2M6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsIiIpfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldEVudGl0eVR5cGUodmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0RW50aXR5SWQodmFsdWUpO2JyZWFrO2Nhc2UgMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRJbnQzMigpO21zZy5zZXRBbW91bnQodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRCb29sKCk7bXNnLnNldFNlbmROb3RpZnkodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRTdHJpbmcoKTttc2cuc2V0RGVzYyh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEVudGl0eVR5cGUoKTtpZihmIT09MC4wKXt3cml0ZXIud3JpdGVFbnVtKDEsZik7fWY9bWVzc2FnZS5nZXRFbnRpdHlJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEFtb3VudCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVJbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0U2VuZE5vdGlmeSgpO2lmKGYpe3dyaXRlci53cml0ZUJvb2woNCxmKTt9Zj1tZXNzYWdlLmdldERlc2MoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVTdHJpbmcoNSxmKTt9fTsvKioKICogb3B0aW9uYWwgcGIuRW50aXR5VHlwZSBlbnRpdHlfdHlwZSA9IDE7CiAqIEByZXR1cm4geyFwcm90by5wYi5FbnRpdHlUeXBlfQogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QucHJvdG90eXBlLmdldEVudGl0eVR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkVudGl0eVR5cGV9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QucHJvdG90eXBlLnNldEVudGl0eVR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGVudGl0eV9pZCA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXF1ZXN0LnByb3RvdHlwZS5nZXRFbnRpdHlJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QucHJvdG90eXBlLnNldEVudGl0eUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgaW50MzIgYW1vdW50ID0gMzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QucHJvdG90eXBlLmdldEFtb3VudD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QucHJvdG90eXBlLnNldEFtb3VudD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIGJvb2wgc2VuZF9ub3RpZnkgPSA0OwogKiBAcmV0dXJuIHtib29sZWFufQogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QucHJvdG90eXBlLmdldFNlbmROb3RpZnk9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCxmYWxzZSk7fTsvKioKICogQHBhcmFtIHtib29sZWFufSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXF1ZXN0LnByb3RvdHlwZS5zZXRTZW5kTm90aWZ5PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHN0cmluZyBkZXNjID0gNTsKICogQHJldHVybiB7c3RyaW5nfQogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcXVlc3QucHJvdG90eXBlLmdldERlc2M9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LCIiKTt9Oy8qKgogKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVxdWVzdC5wcm90b3R5cGUuc2V0RGVzYz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLDUsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtiYWxhbmNlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXBseX0KICovcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVwbHkoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcGx5fQogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEJhbGFuY2UodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQWRqdXN0QmFsYW5jZVJlcGx5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0QmFsYW5jZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIGJhbGFuY2UgPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVwbHkucHJvdG90eXBlLmdldEJhbGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFkanVzdEJhbGFuY2VSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BZGp1c3RCYWxhbmNlUmVwbHkucHJvdG90eXBlLnNldEJhbGFuY2U9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17ZW50aXR5VHlwZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxlbnRpdHlJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxibG9ja1N0YXR1czpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKSxkdXJhdGlvbjpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNCwwKSxyZWFzb246anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsIiIpfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkJsb2NrUmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkJsb2NrUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkJsb2NrUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkRW51bSgpO21zZy5zZXRFbnRpdHlUeXBlKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEVudGl0eUlkKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkRW51bSgpO21zZy5zZXRCbG9ja1N0YXR1cyh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXREdXJhdGlvbih2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZFN0cmluZygpO21zZy5zZXRSZWFzb24odmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0RW50aXR5VHlwZSgpO2lmKGYhPT0wLjApe3dyaXRlci53cml0ZUVudW0oMSxmKTt9Zj1tZXNzYWdlLmdldEVudGl0eUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0QmxvY2tTdGF0dXMoKTtpZihmIT09MC4wKXt3cml0ZXIud3JpdGVFbnVtKDMsZik7fWY9bWVzc2FnZS5nZXREdXJhdGlvbigpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNCxmKTt9Zj1tZXNzYWdlLmdldFJlYXNvbigpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVN0cmluZyg1LGYpO319Oy8qKgogKiBvcHRpb25hbCBwYi5FbnRpdHlUeXBlIGVudGl0eV90eXBlID0gMTsKICogQHJldHVybiB7IXByb3RvLnBiLkVudGl0eVR5cGV9CiAqL3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3QucHJvdG90eXBlLmdldEVudGl0eVR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkVudGl0eVR5cGV9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkJsb2NrUmVxdWVzdC5wcm90b3R5cGUuc2V0RW50aXR5VHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgZW50aXR5X2lkID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0LnByb3RvdHlwZS5nZXRFbnRpdHlJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkJsb2NrUmVxdWVzdC5wcm90b3R5cGUuc2V0RW50aXR5SWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBwYi5CbG9ja1N0YXR1cyBibG9ja19zdGF0dXMgPSAzOwogKiBAcmV0dXJuIHshcHJvdG8ucGIuQmxvY2tTdGF0dXN9CiAqL3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3QucHJvdG90eXBlLmdldEJsb2NrU3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5CbG9ja1N0YXR1c30gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0LnByb3RvdHlwZS5zZXRCbG9ja1N0YXR1cz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgZHVyYXRpb24gPSA0OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3QucHJvdG90eXBlLmdldER1cmF0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQmxvY2tSZXF1ZXN0LnByb3RvdHlwZS5zZXREdXJhdGlvbj1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHN0cmluZyByZWFzb24gPSA1OwogKiBAcmV0dXJuIHtzdHJpbmd9CiAqL3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3QucHJvdG90eXBlLmdldFJlYXNvbj1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsIiIpO307LyoqCiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkJsb2NrUmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5CbG9ja1JlcXVlc3QucHJvdG90eXBlLnNldFJlYXNvbj1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLDUsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLlVuYmxvY2tSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLlVuYmxvY2tSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdC50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2VudGl0eVR5cGU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCksZW50aXR5SWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVW5ibG9ja1JlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuVW5ibG9ja1JlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlVuYmxvY2tSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVW5ibG9ja1JlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZEVudW0oKTttc2cuc2V0RW50aXR5VHlwZSh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRFbnRpdHlJZCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuVW5ibG9ja1JlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5VbmJsb2NrUmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlVuYmxvY2tSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEVudGl0eVR5cGUoKTtpZihmIT09MC4wKXt3cml0ZXIud3JpdGVFbnVtKDEsZik7fWY9bWVzc2FnZS5nZXRFbnRpdHlJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9fTsvKioKICogb3B0aW9uYWwgcGIuRW50aXR5VHlwZSBlbnRpdHlfdHlwZSA9IDE7CiAqIEByZXR1cm4geyFwcm90by5wYi5FbnRpdHlUeXBlfQogKi9wcm90by5wYi5jbXMuVW5ibG9ja1JlcXVlc3QucHJvdG90eXBlLmdldEVudGl0eVR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkVudGl0eVR5cGV9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVW5ibG9ja1JlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVW5ibG9ja1JlcXVlc3QucHJvdG90eXBlLnNldEVudGl0eVR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGVudGl0eV9pZCA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlVuYmxvY2tSZXF1ZXN0LnByb3RvdHlwZS5nZXRFbnRpdHlJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVW5ibG9ja1JlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVW5ibG9ja1JlcXVlc3QucHJvdG90eXBlLnNldEVudGl0eUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuTWlncmF0ZVJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuTWlncmF0ZVJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17ZW50aXR5VHlwZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxzcmNJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxkc3RJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5NaWdyYXRlUmVxdWVzdH0KICovcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5NaWdyYXRlUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuTWlncmF0ZVJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5NaWdyYXRlUmVxdWVzdH0KICovcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkRW51bSgpO21zZy5zZXRFbnRpdHlUeXBlKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFNyY0lkKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldERzdElkKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5NaWdyYXRlUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuTWlncmF0ZVJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0RW50aXR5VHlwZSgpO2lmKGYhPT0wLjApe3dyaXRlci53cml0ZUVudW0oMSxmKTt9Zj1tZXNzYWdlLmdldFNyY0lkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0RHN0SWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDMsZik7fX07LyoqCiAqIG9wdGlvbmFsIHBiLkVudGl0eVR5cGUgZW50aXR5X3R5cGUgPSAxOwogKiBAcmV0dXJuIHshcHJvdG8ucGIuRW50aXR5VHlwZX0KICovcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0LnByb3RvdHlwZS5nZXRFbnRpdHlUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5FbnRpdHlUeXBlfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0LnByb3RvdHlwZS5zZXRFbnRpdHlUeXBlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBzcmNfaWQgPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5NaWdyYXRlUmVxdWVzdC5wcm90b3R5cGUuZ2V0U3JjSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0LnByb3RvdHlwZS5zZXRTcmNJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBkc3RfaWQgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5NaWdyYXRlUmVxdWVzdC5wcm90b3R5cGUuZ2V0RHN0SWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLk1pZ3JhdGVSZXF1ZXN0LnByb3RvdHlwZS5zZXREc3RJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkF1dGhvcml6ZUFuY2hvclJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BdXRob3JpemVBbmNob3JSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17YW5jaG9ySWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCksYXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLGd1aWxkSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkF1dGhvcml6ZUFuY2hvclJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkF1dGhvcml6ZUFuY2hvclJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5BdXRob3JpemVBbmNob3JSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFuY2hvcklkKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFyZWFJZCh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRHdWlsZElkKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkF1dGhvcml6ZUFuY2hvclJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkF1dGhvcml6ZUFuY2hvclJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BdXRob3JpemVBbmNob3JSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBbmNob3JJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9Zj1tZXNzYWdlLmdldEFyZWFJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEd1aWxkSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDMsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhbmNob3JfaWQgPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BdXRob3JpemVBbmNob3JSZXF1ZXN0LnByb3RvdHlwZS5nZXRBbmNob3JJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BdXRob3JpemVBbmNob3JSZXF1ZXN0LnByb3RvdHlwZS5zZXRBbmNob3JJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BdXRob3JpemVBbmNob3JSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkF1dGhvcml6ZUFuY2hvclJlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBndWlsZF9pZCA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkF1dGhvcml6ZUFuY2hvclJlcXVlc3QucHJvdG90eXBlLmdldEd1aWxkSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkF1dGhvcml6ZUFuY2hvclJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXV0aG9yaXplQW5jaG9yUmVxdWVzdC5wcm90b3R5cGUuc2V0R3VpbGRJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVxdWVzdC50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2FuY2hvcklkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QW5jaG9ySWQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBbmNob3JJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFuY2hvcl9pZCA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXF1ZXN0LnByb3RvdHlwZS5nZXRBbmNob3JJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcXVlc3QucHJvdG90eXBlLnNldEFuY2hvcklkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5LnJlcGVhdGVkRmllbGRzXz1bMl07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtiYXNpYzooZj1tc2cuZ2V0QmFzaWMoKSkmJmFuY2hvcnR5cGVfcGIuQW5jaG9yQmFzaWMudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLGYpLHByb2ZpbGVzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRQcm9maWxlc0xpc3QoKSxhbmNob3J0eXBlX3BiLkFuY2hvclByb2ZpbGUudG9PYmplY3QsaW5jbHVkZUluc3RhbmNlKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXBseX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXBseX0KICovcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgYW5jaG9ydHlwZV9wYi5BbmNob3JCYXNpYygpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxhbmNob3J0eXBlX3BiLkFuY2hvckJhc2ljLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLnNldEJhc2ljKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPW5ldyBhbmNob3J0eXBlX3BiLkFuY2hvclByb2ZpbGUoKTtyZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsYW5jaG9ydHlwZV9wYi5BbmNob3JQcm9maWxlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZFByb2ZpbGVzKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkFuY2hvckZ1bGxSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEJhc2ljKCk7aWYoZiE9bnVsbCl7d3JpdGVyLndyaXRlTWVzc2FnZSgxLGYsYW5jaG9ydHlwZV9wYi5BbmNob3JCYXNpYy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fWY9bWVzc2FnZS5nZXRQcm9maWxlc0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMixmLGFuY2hvcnR5cGVfcGIuQW5jaG9yUHJvZmlsZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fX07LyoqCiAqIG9wdGlvbmFsIHBiLkFuY2hvckJhc2ljIGJhc2ljID0gMTsKICogQHJldHVybiB7P3Byb3RvLnBiLkFuY2hvckJhc2ljfQogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5LnByb3RvdHlwZS5nZXRCYXNpYz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsYW5jaG9ydHlwZV9wYi5BbmNob3JCYXNpYywxKTt9Oy8qKgogKiBAcGFyYW0gez9wcm90by5wYi5BbmNob3JCYXNpY3x1bmRlZmluZWR9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5LnByb3RvdHlwZS5zZXRCYXNpYz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5LnByb3RvdHlwZS5jbGVhckJhc2ljPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0QmFzaWModW5kZWZpbmVkKTt9Oy8qKgogKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuCiAqIEByZXR1cm4ge2Jvb2xlYW59CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHkucHJvdG90eXBlLmhhc0Jhc2ljPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDEpIT1udWxsO307LyoqCiAqIHJlcGVhdGVkIHBiLkFuY2hvclByb2ZpbGUgcHJvZmlsZXMgPSAyOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkFuY2hvclByb2ZpbGU+fQogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5LnByb3RvdHlwZS5nZXRQcm9maWxlc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsYW5jaG9ydHlwZV9wYi5BbmNob3JQcm9maWxlLDIpO307LyoqCiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5wYi5BbmNob3JQcm9maWxlPn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHl9IHJldHVybnMgdGhpcwoqL3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHkucHJvdG90eXBlLnNldFByb2ZpbGVzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkFuY2hvclByb2ZpbGU9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLkFuY2hvclByb2ZpbGV9CiAqL3Byb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHkucHJvdG90eXBlLmFkZFByb2ZpbGVzPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsb3B0X3ZhbHVlLHByb3RvLnBiLkFuY2hvclByb2ZpbGUsb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BbmNob3JGdWxsUmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQW5jaG9yRnVsbFJlcGx5LnByb3RvdHlwZS5jbGVhclByb2ZpbGVzTGlzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNldFByb2ZpbGVzTGlzdChbXSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e3BhZ2VObzpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxwYWdlU2l6ZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxhbmNob3JJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKSxhcmVhSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDQsMCksc3RhdHVzOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBbmNob3JJZCh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldFN0YXR1cyh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEFuY2hvcklkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0U3RhdHVzKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg1LGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9ubyA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRQYWdlTm89ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9zaXplID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGFnZVNpemU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYW5jaG9yX2lkID0gMzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBbmNob3JJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QW5jaG9ySWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYXJlYV9pZCA9IDQ7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBcmVhSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBwYi5SZXZpZXdTdGF0dXMgc3RhdHVzID0gNTsKICogQHJldHVybiB7IXByb3RvLnBiLlJldmlld1N0YXR1c30KICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5SZXZpZXdTdGF0dXN9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDUsdmFsdWUpO307LyoqCiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS4KICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fQogKiBAY29uc3QKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfPVsxXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtwcm9maWxlc0xpc3Q6anNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0UHJvZmlsZXNMaXN0KCksYW5jaG9ydHlwZV9wYi5BbmNob3JQcm9maWxlLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSkscGFnZU5vOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLHBhZ2VTaXplOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLHRvdGFsUGFnZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNCwwKSx0b3RhbENvdW50OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgYW5jaG9ydHlwZV9wYi5BbmNob3JQcm9maWxlKCk7cmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLGFuY2hvcnR5cGVfcGIuQW5jaG9yUHJvZmlsZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO21zZy5hZGRQcm9maWxlcyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlTm8odmFsdWUpO2JyZWFrO2Nhc2UgMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZVNpemUodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxQYWdlKHZhbHVlKTticmVhaztjYXNlIDU6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFRvdGFsQ291bnQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFByb2ZpbGVzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsYW5jaG9ydHlwZV9wYi5BbmNob3JQcm9maWxlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxQYWdlKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxDb3VudCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNSxmKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuQW5jaG9yUHJvZmlsZSBwcm9maWxlcyA9IDE7CiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ucGIuQW5jaG9yUHJvZmlsZT59CiAqL3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRQcm9maWxlc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsYW5jaG9ydHlwZV9wYi5BbmNob3JQcm9maWxlLDEpO307LyoqCiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5wYi5BbmNob3JQcm9maWxlPn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseS5wcm90b3R5cGUuc2V0UHJvZmlsZXNMaXN0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuQW5jaG9yUHJvZmlsZT19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuQW5jaG9yUHJvZmlsZX0KICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkucHJvdG90eXBlLmFkZFByb2ZpbGVzPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsb3B0X3ZhbHVlLHByb3RvLnBiLkFuY2hvclByb2ZpbGUsb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkucHJvdG90eXBlLmNsZWFyUHJvZmlsZXNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0UHJvZmlsZXNMaXN0KFtdKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9ubyA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkucHJvdG90eXBlLmdldFBhZ2VObz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRQYWdlTm89ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9zaXplID0gMzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseS5wcm90b3R5cGUuZ2V0UGFnZVNpemU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseS5wcm90b3R5cGUuc2V0UGFnZVNpemU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgdG90YWxfcGFnZSA9IDQ7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsUGFnZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUHJvZmlsZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRUb3RhbFBhZ2U9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgdG90YWxfY291bnQgPSA1OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRUb3RhbENvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Qcm9maWxlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlByb2ZpbGVMaXN0UmVwbHkucHJvdG90eXBlLnNldFRvdGFsQ291bnQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LHZhbHVlKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuUHJvY2Vzc1Byb2ZpbGVSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Byb2ZpbGVSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17cHJvZmlsZUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApLHN0YXR1czpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxyZWFzb246anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsIiIpfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlByb2Nlc3NQcm9maWxlUmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlByb2Nlc3NQcm9maWxlUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlByb2Nlc3NQcm9maWxlUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUHJvY2Vzc1Byb2ZpbGVSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUHJvY2Vzc1Byb2ZpbGVSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Byb2ZpbGVSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFByb2ZpbGVJZCh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZEVudW0oKTttc2cuc2V0U3RhdHVzKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkU3RyaW5nKCk7bXNnLnNldFJlYXNvbih2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlByb2Nlc3NQcm9maWxlUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlByb2Nlc3NQcm9maWxlUmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlByb2Nlc3NQcm9maWxlUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRQcm9maWxlSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRTdGF0dXMoKTtpZihmIT09MC4wKXt3cml0ZXIud3JpdGVFbnVtKDIsZik7fWY9bWVzc2FnZS5nZXRSZWFzb24oKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVTdHJpbmcoMyxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIHByb2ZpbGVfaWQgPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3QucHJvdG90eXBlLmdldFByb2ZpbGVJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUHJvY2Vzc1Byb2ZpbGVSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlByb2Nlc3NQcm9maWxlUmVxdWVzdC5wcm90b3R5cGUuc2V0UHJvZmlsZUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuUmV2aWV3U3RhdHVzIHN0YXR1cyA9IDI7CiAqIEByZXR1cm4geyFwcm90by5wYi5SZXZpZXdTdGF0dXN9CiAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3QucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuUmV2aWV3U3RhdHVzfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlByb2Nlc3NQcm9maWxlUmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3QucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBzdHJpbmcgcmVhc29uID0gMzsKICogQHJldHVybiB7c3RyaW5nfQogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Byb2ZpbGVSZXF1ZXN0LnByb3RvdHlwZS5nZXRSZWFzb249ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLCIiKTt9Oy8qKgogKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Qcm9jZXNzUHJvZmlsZVJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Byb2ZpbGVSZXF1ZXN0LnByb3RvdHlwZS5zZXRSZWFzb249ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuCiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn0KICogQGNvbnN0CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5yZXBlYXRlZEZpZWxkc189WzRdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCksYXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLGRlYWxTdGF0dXNMaXN0OihmPWpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZyw0KSk9PW51bGw/dW5kZWZpbmVkOmYsc2NlbmU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCkscmVwb3J0ZXJUeXBlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw2LDApLHJlcG9ydGVySWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDcsMCkscmVwb3J0ZWRUeXBlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw4LDApLHJlcG9ydGVkSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDksMCksY3JlYXRlZFN0YXJ0OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxMCwwKSxjcmVhdGVkRW5kOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxMSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWVzPXJlYWRlci5pc0RlbGltaXRlZCgpP3JlYWRlci5yZWFkUGFja2VkRW51bSgpOltyZWFkZXIucmVhZEVudW0oKV07Zm9yKHZhciBpPTA7aTx2YWx1ZXMubGVuZ3RoO2krKyl7bXNnLmFkZERlYWxTdGF0dXModmFsdWVzW2ldKTt9YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZEVudW0oKTttc2cuc2V0U2NlbmUodmFsdWUpO2JyZWFrO2Nhc2UgNjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldFJlcG9ydGVyVHlwZSh2YWx1ZSk7YnJlYWs7Y2FzZSA3OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRSZXBvcnRlcklkKHZhbHVlKTticmVhaztjYXNlIDg6dmFyIHZhbHVlPXJlYWRlci5yZWFkRW51bSgpO21zZy5zZXRSZXBvcnRlZFR5cGUodmFsdWUpO2JyZWFrO2Nhc2UgOTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UmVwb3J0ZWRJZCh2YWx1ZSk7YnJlYWs7Y2FzZSAxMDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0Q3JlYXRlZFN0YXJ0KHZhbHVlKTticmVhaztjYXNlIDExOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRDcmVhdGVkRW5kKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0UGFnZU5vKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxLGYpO31mPW1lc3NhZ2UuZ2V0UGFnZVNpemUoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDIsZik7fWY9bWVzc2FnZS5nZXRBcmVhSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDMsZik7fWY9bWVzc2FnZS5nZXREZWFsU3RhdHVzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVBhY2tlZEVudW0oNCxmKTt9Zj1tZXNzYWdlLmdldFNjZW5lKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg1LGYpO31mPW1lc3NhZ2UuZ2V0UmVwb3J0ZXJUeXBlKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg2LGYpO31mPW1lc3NhZ2UuZ2V0UmVwb3J0ZXJJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNyxmKTt9Zj1tZXNzYWdlLmdldFJlcG9ydGVkVHlwZSgpO2lmKGYhPT0wLjApe3dyaXRlci53cml0ZUVudW0oOCxmKTt9Zj1tZXNzYWdlLmdldFJlcG9ydGVkSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDksZik7fWY9bWVzc2FnZS5nZXRDcmVhdGVkU3RhcnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEwLGYpO31mPW1lc3NhZ2UuZ2V0Q3JlYXRlZEVuZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMTEsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX25vID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFBhZ2VObz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFBhZ2VObz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX3NpemUgPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZVNpemU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRQYWdlU2l6ZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEFyZWFJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIHJlcGVhdGVkIHBiLkJsb2NrU3RhdHVzIGRlYWxfc3RhdHVzID0gNDsKICogQHJldHVybiB7IUFycmF5PCFwcm90by5wYi5CbG9ja1N0YXR1cz59CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0RGVhbFN0YXR1c0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcyw0KTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ucGIuQmxvY2tTdGF0dXM+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXREZWFsU3RhdHVzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDQsdmFsdWV8fFtdKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5CbG9ja1N0YXR1c30gdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuYWRkRGVhbFN0YXR1cz1mdW5jdGlvbih2YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsNCx2YWx1ZSxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5jbGVhckRlYWxTdGF0dXNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0RGVhbFN0YXR1c0xpc3QoW10pO307LyoqCiAqIG9wdGlvbmFsIHBiLlZpb2xhdGlvblNjZW5lIFNjZW5lID0gNTsKICogQHJldHVybiB7IXByb3RvLnBiLlZpb2xhdGlvblNjZW5lfQogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFNjZW5lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5WaW9sYXRpb25TY2VuZX0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0U2NlbmU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuRW50aXR5VHlwZSByZXBvcnRlcl90eXBlID0gNjsKICogQHJldHVybiB7IXByb3RvLnBiLkVudGl0eVR5cGV9CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UmVwb3J0ZXJUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5FbnRpdHlUeXBlfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRSZXBvcnRlclR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHJlcG9ydGVyX2lkID0gNzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFJlcG9ydGVySWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRSZXBvcnRlcklkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuRW50aXR5VHlwZSByZXBvcnRlZF90eXBlID0gODsKICogQHJldHVybiB7IXByb3RvLnBiLkVudGl0eVR5cGV9CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UmVwb3J0ZWRUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsOCwwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5FbnRpdHlUeXBlfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRSZXBvcnRlZFR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsOCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHJlcG9ydGVkX2lkID0gOTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFJlcG9ydGVkSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw5LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRSZXBvcnRlZElkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGNyZWF0ZWRfc3RhcnQgPSAxMDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldENyZWF0ZWRTdGFydD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEwLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRDcmVhdGVkU3RhcnQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxMCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGNyZWF0ZWRfZW5kID0gMTE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRDcmVhdGVkRW5kPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMTEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldENyZWF0ZWRFbmQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxMSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXz1bMV07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtyZWNvcmRzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRSZWNvcmRzTGlzdCgpLHVzZXJ0eXBlX3BiLlZpb2xhdGlvblJlY29yZC50b09iamVjdCxpbmNsdWRlSW5zdGFuY2UpLHBhZ2VObzpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxwYWdlU2l6ZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKSx0b3RhbFBhZ2U6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDQsMCksdG90YWxDb3VudDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgdXNlcnR5cGVfcGIuVmlvbGF0aW9uUmVjb3JkKCk7cmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHVzZXJ0eXBlX3BiLlZpb2xhdGlvblJlY29yZC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO21zZy5hZGRSZWNvcmRzKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRUb3RhbFBhZ2UodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxDb3VudCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRSZWNvcmRzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsdXNlcnR5cGVfcGIuVmlvbGF0aW9uUmVjb3JkLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxQYWdlKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxDb3VudCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNSxmKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuVmlvbGF0aW9uUmVjb3JkIHJlY29yZHMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLlZpb2xhdGlvblJlY29yZD59CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkucHJvdG90eXBlLmdldFJlY29yZHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHVzZXJ0eXBlX3BiLlZpb2xhdGlvblJlY29yZCwxKTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ucGIuVmlvbGF0aW9uUmVjb3JkPn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHl9IHJldHVybnMgdGhpcwoqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkucHJvdG90eXBlLnNldFJlY29yZHNMaXN0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuVmlvbGF0aW9uUmVjb3JkPX0gb3B0X3ZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4CiAqIEByZXR1cm4geyFwcm90by5wYi5WaW9sYXRpb25SZWNvcmR9CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkucHJvdG90eXBlLmFkZFJlY29yZHM9ZnVuY3Rpb24ob3B0X3ZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSxvcHRfdmFsdWUscHJvdG8ucGIuVmlvbGF0aW9uUmVjb3JkLG9wdF9pbmRleCk7fTsvKioKICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseS5wcm90b3R5cGUuY2xlYXJSZWNvcmRzTGlzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNldFJlY29yZHNMaXN0KFtdKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9ubyA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseS5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRQYWdlTm89ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9zaXplID0gMzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseS5wcm90b3R5cGUuc2V0UGFnZVNpemU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgdG90YWxfcGFnZSA9IDQ7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseS5wcm90b3R5cGUuZ2V0VG90YWxQYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVmlvbGF0aW9uTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRUb3RhbFBhZ2U9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgdG90YWxfY291bnQgPSA1OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsQ291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZpb2xhdGlvbkxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5WaW9sYXRpb25MaXN0UmVwbHkucHJvdG90eXBlLnNldFRvdGFsQ291bnQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LHZhbHVlKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXt2aW9sYXRpb25JZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxkZWFsU3RhdHVzOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLGRlYWxNZXNzYWdlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLCIiKSxibG9ja0R1cmF0aW9uOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw0LDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlByb2Nlc3NWaW9sYXRpb25SZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlByb2Nlc3NWaW9sYXRpb25SZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlByb2Nlc3NWaW9sYXRpb25SZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50NjQoKTttc2cuc2V0VmlvbGF0aW9uSWQodmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldERlYWxTdGF0dXModmFsdWUpO2JyZWFrO2Nhc2UgMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRTdHJpbmcoKTttc2cuc2V0RGVhbE1lc3NhZ2UodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QmxvY2tEdXJhdGlvbih2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlByb2Nlc3NWaW9sYXRpb25SZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFZpb2xhdGlvbklkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQ2NCgxLGYpO31mPW1lc3NhZ2UuZ2V0RGVhbFN0YXR1cygpO2lmKGYhPT0wLjApe3dyaXRlci53cml0ZUVudW0oMixmKTt9Zj1tZXNzYWdlLmdldERlYWxNZXNzYWdlKCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlU3RyaW5nKDMsZik7fWY9bWVzc2FnZS5nZXRCbG9ja0R1cmF0aW9uKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50NjQgdmlvbGF0aW9uX2lkID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QucHJvdG90eXBlLmdldFZpb2xhdGlvbklkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdC5wcm90b3R5cGUuc2V0VmlvbGF0aW9uSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBwYi5CbG9ja1N0YXR1cyBkZWFsX3N0YXR1cyA9IDI7CiAqIEByZXR1cm4geyFwcm90by5wYi5CbG9ja1N0YXR1c30KICovcHJvdG8ucGIuY21zLlByb2Nlc3NWaW9sYXRpb25SZXF1ZXN0LnByb3RvdHlwZS5nZXREZWFsU3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5CbG9ja1N0YXR1c30gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Qcm9jZXNzVmlvbGF0aW9uUmVxdWVzdC5wcm90b3R5cGUuc2V0RGVhbFN0YXR1cz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBzdHJpbmcgZGVhbF9tZXNzYWdlID0gMzsKICogQHJldHVybiB7c3RyaW5nfQogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QucHJvdG90eXBlLmdldERlYWxNZXNzYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywiIik7fTsvKioKICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QucHJvdG90eXBlLnNldERlYWxNZXNzYWdlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGJsb2NrX2R1cmF0aW9uID0gNDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUHJvY2Vzc1Zpb2xhdGlvblJlcXVlc3QucHJvdG90eXBlLmdldEJsb2NrRHVyYXRpb249ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlByb2Nlc3NWaW9sYXRpb25SZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlByb2Nlc3NWaW9sYXRpb25SZXF1ZXN0LnByb3RvdHlwZS5zZXRCbG9ja0R1cmF0aW9uPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e3BhZ2VObzpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxwYWdlU2l6ZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxhcmVhSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksYW5jaG9ySWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDQsMCksc3RhdHVzOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApLGNyZWF0ZWRTdGFydDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNiwwKSxjcmVhdGVkRW5kOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw3LDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QW5jaG9ySWQodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldFN0YXR1cyh2YWx1ZSk7YnJlYWs7Y2FzZSA2OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRDcmVhdGVkU3RhcnQodmFsdWUpO2JyZWFrO2Nhc2UgNzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0Q3JlYXRlZEVuZCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEFyZWFJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldEFuY2hvcklkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0U3RhdHVzKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg1LGYpO31mPW1lc3NhZ2UuZ2V0Q3JlYXRlZFN0YXJ0KCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig2LGYpO31mPW1lc3NhZ2UuZ2V0Q3JlYXRlZEVuZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNyxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfbm8gPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFBhZ2VObz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGFnZU5vPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfc2l6ZSA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZVNpemU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFyZWFfaWQgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEFyZWFJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXJlYUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFuY2hvcl9pZCA9IDQ7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QW5jaG9ySWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFuY2hvcklkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuUmV2aWV3U3RhdHVzIHN0YXR1cyA9IDU7CiAqIEByZXR1cm4geyFwcm90by5wYi5SZXZpZXdTdGF0dXN9CiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuUmV2aWV3U3RhdHVzfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcyw1LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgY3JlYXRlZF9zdGFydCA9IDY7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q3JlYXRlZFN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRDcmVhdGVkU3RhcnQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw2LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgY3JlYXRlZF9lbmQgPSA3OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldENyZWF0ZWRFbmQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldENyZWF0ZWRFbmQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw3LHZhbHVlKTt9Oy8qKgogKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuCiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn0KICogQGNvbnN0CiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXz1bMV07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17cmVjb3Jkc0xpc3Q6anNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0UmVjb3Jkc0xpc3QoKSx1c2VydHlwZV9wYi5GaWxlUmVjb3JkLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSkscGFnZU5vOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLHBhZ2VTaXplOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLHRvdGFsUGFnZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNCwwKSx0b3RhbENvdW50OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHkoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgdXNlcnR5cGVfcGIuRmlsZVJlY29yZCgpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSx1c2VydHlwZV9wYi5GaWxlUmVjb3JkLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZFJlY29yZHModmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZU5vKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VTaXplKHZhbHVlKTticmVhaztjYXNlIDQ6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFRvdGFsUGFnZSh2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRUb3RhbENvdW50KHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRSZWNvcmRzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsdXNlcnR5cGVfcGIuRmlsZVJlY29yZC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fWY9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDIsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsUGFnZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNCxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsQ291bnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDUsZik7fX07LyoqCiAqIHJlcGVhdGVkIHBiLkZpbGVSZWNvcmQgcmVjb3JkcyA9IDE7CiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ucGIuRmlsZVJlY29yZD59CiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRSZWNvcmRzTGlzdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyx1c2VydHlwZV9wYi5GaWxlUmVjb3JkLDEpO307LyoqCiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5wYi5GaWxlUmVjb3JkPn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseS5wcm90b3R5cGUuc2V0UmVjb3Jkc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5GaWxlUmVjb3JkPX0gb3B0X3ZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4CiAqIEByZXR1cm4geyFwcm90by5wYi5GaWxlUmVjb3JkfQogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseS5wcm90b3R5cGUuYWRkUmVjb3Jkcz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5GaWxlUmVjb3JkLG9wdF9pbmRleCk7fTsvKioKICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhclJlY29yZHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0UmVjb3Jkc0xpc3QoW10pO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX25vID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseS5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHkucHJvdG90eXBlLnNldFBhZ2VObz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX3NpemUgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRQYWdlU2l6ZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9wYWdlID0gNDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseS5wcm90b3R5cGUuZ2V0VG90YWxQYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5MaXZlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHkucHJvdG90eXBlLnNldFRvdGFsUGFnZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9jb3VudCA9IDU7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsQ291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkxpdmVMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuTGl2ZUxpc3RSZXBseS5wcm90b3R5cGUuc2V0VG90YWxDb3VudD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdC50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e3BhZ2VObzpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxwYWdlU2l6ZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxhcmVhSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksYXBwSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDQsMCksdXNlcklkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApLHJlY29yZElkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw2LDApLHN0YXR1czpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNywwKSxjcmVhdGVkU3RhcnQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDgsMCksY3JlYXRlZEVuZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csOSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUGF5TGlzdFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QXBwSWQodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VXNlcklkKHZhbHVlKTticmVhaztjYXNlIDY6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDY0KCk7bXNnLnNldFJlY29yZElkKHZhbHVlKTticmVhaztjYXNlIDc6dmFyIHZhbHVlPXJlYWRlci5yZWFkRW51bSgpO21zZy5zZXRTdGF0dXModmFsdWUpO2JyZWFrO2Nhc2UgODp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0Q3JlYXRlZFN0YXJ0KHZhbHVlKTticmVhaztjYXNlIDk6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldENyZWF0ZWRFbmQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUGF5TGlzdFJlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEFyZWFJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldEFwcElkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0VXNlcklkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig1LGYpO31mPW1lc3NhZ2UuZ2V0UmVjb3JkSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDY0KDYsZik7fWY9bWVzc2FnZS5nZXRTdGF0dXMoKTtpZihmIT09MC4wKXt3cml0ZXIud3JpdGVFbnVtKDcsZik7fWY9bWVzc2FnZS5nZXRDcmVhdGVkU3RhcnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDgsZik7fWY9bWVzc2FnZS5nZXRDcmVhdGVkRW5kKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig5LGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9ubyA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRQYWdlTm89ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRQYWdlTm89ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9zaXplID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFBhZ2VTaXplPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGFnZVNpemU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYXJlYV9pZCA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBcmVhSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBcmVhSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYXBwX2lkID0gNDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEFwcElkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXBwSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgdXNlcl9pZCA9IDU7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRVc2VySWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRVc2VySWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50NjQgcmVjb3JkX2lkID0gNjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFJlY29yZElkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UmVjb3JkSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw2LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBwYi5QYXlTdGF0dXMgc3RhdHVzID0gNzsKICogQHJldHVybiB7IXByb3RvLnBiLlBheVN0YXR1c30KICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLlBheVN0YXR1c30gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDcsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBjcmVhdGVkX3N0YXJ0ID0gODsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcXVlc3QucHJvdG90eXBlLmdldENyZWF0ZWRTdGFydD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDgsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5TGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcXVlc3QucHJvdG90eXBlLnNldENyZWF0ZWRTdGFydD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDgsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBjcmVhdGVkX2VuZCA9IDk7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRDcmVhdGVkRW5kPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsOSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0Q3JlYXRlZEVuZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDksdmFsdWUpO307LyoqCiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS4KICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fQogKiBAY29uc3QKICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc189WzFdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17cmVjb3Jkc0xpc3Q6anNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0UmVjb3Jkc0xpc3QoKSx1c2VydHlwZV9wYi5QYXlSZWNvcmQudG9PYmplY3QsaW5jbHVkZUluc3RhbmNlKSxwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksdG90YWxQYWdlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw0LDApLHRvdGFsQ291bnQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLlBheUxpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IHVzZXJ0eXBlX3BiLlBheVJlY29yZCgpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSx1c2VydHlwZV9wYi5QYXlSZWNvcmQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTttc2cuYWRkUmVjb3Jkcyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlTm8odmFsdWUpO2JyZWFrO2Nhc2UgMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZVNpemUodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxQYWdlKHZhbHVlKTticmVhaztjYXNlIDU6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFRvdGFsQ291bnQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0UmVjb3Jkc0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLHVzZXJ0eXBlX3BiLlBheVJlY29yZC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fWY9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDIsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsUGFnZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNCxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsQ291bnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDUsZik7fX07LyoqCiAqIHJlcGVhdGVkIHBiLlBheVJlY29yZCByZWNvcmRzID0gMTsKICogQHJldHVybiB7IUFycmF5PCFwcm90by5wYi5QYXlSZWNvcmQ+fQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LnByb3RvdHlwZS5nZXRSZWNvcmRzTGlzdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyx1c2VydHlwZV9wYi5QYXlSZWNvcmQsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLlBheVJlY29yZD59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LnByb3RvdHlwZS5zZXRSZWNvcmRzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLlBheVJlY29yZD19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuUGF5UmVjb3JkfQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LnByb3RvdHlwZS5hZGRSZWNvcmRzPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsb3B0X3ZhbHVlLHByb3RvLnBiLlBheVJlY29yZCxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHkucHJvdG90eXBlLmNsZWFyUmVjb3Jkc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRSZWNvcmRzTGlzdChbXSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfbm8gPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHkucHJvdG90eXBlLmdldFBhZ2VObz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXBseS5wcm90b3R5cGUuc2V0UGFnZU5vPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfc2l6ZSA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXBseS5wcm90b3R5cGUuZ2V0UGFnZVNpemU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHkucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRvdGFsX3BhZ2UgPSA0OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsUGFnZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlBheUxpc3RSZXBseS5wcm90b3R5cGUuc2V0VG90YWxQYWdlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRvdGFsX2NvdW50ID0gNTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LnByb3RvdHlwZS5nZXRUb3RhbENvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUGF5TGlzdFJlcGx5LnByb3RvdHlwZS5zZXRUb3RhbENvdW50PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSx2YWx1ZSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCksYXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLGVuYWJsZTpqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQobXNnLDQsZmFsc2UpLHJvYm90SWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRCb29sKCk7bXNnLnNldEVuYWJsZSh2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRSb2JvdElkKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEFyZWFJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldEVuYWJsZSgpO2lmKGYpe3dyaXRlci53cml0ZUJvb2woNCxmKTt9Zj1tZXNzYWdlLmdldFJvYm90SWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDUsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX25vID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFBhZ2VObz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX3NpemUgPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRQYWdlU2l6ZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIGJvb2wgZW5hYmxlID0gNDsKICogQHJldHVybiB7Ym9vbGVhbn0KICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEVuYWJsZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcyw0LGZhbHNlKTt9Oy8qKgogKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRFbmFibGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHJvYm90X2lkID0gNTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0Um9ib3RJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRSb2JvdElkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfPVsxXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17cm9ib3RzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRSb2JvdHNMaXN0KCksYW5jaG9ydHlwZV9wYi5BbmNob3JQcm9maWxlLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSkscGFnZU5vOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLHBhZ2VTaXplOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLHRvdGFsUGFnZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNCwwKSx0b3RhbENvdW50OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IGFuY2hvcnR5cGVfcGIuQW5jaG9yUHJvZmlsZSgpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxhbmNob3J0eXBlX3BiLkFuY2hvclByb2ZpbGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTttc2cuYWRkUm9ib3RzKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRUb3RhbFBhZ2UodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxDb3VudCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFJvYm90c0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLGFuY2hvcnR5cGVfcGIuQW5jaG9yUHJvZmlsZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fWY9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDIsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsUGFnZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNCxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsQ291bnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDUsZik7fX07LyoqCiAqIHJlcGVhdGVkIHBiLkFuY2hvclByb2ZpbGUgcm9ib3RzID0gMTsKICogQHJldHVybiB7IUFycmF5PCFwcm90by5wYi5BbmNob3JQcm9maWxlPn0KICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5LnByb3RvdHlwZS5nZXRSb2JvdHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLGFuY2hvcnR5cGVfcGIuQW5jaG9yUHJvZmlsZSwxKTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ucGIuQW5jaG9yUHJvZmlsZT59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHl9IHJldHVybnMgdGhpcwoqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseS5wcm90b3R5cGUuc2V0Um9ib3RzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkFuY2hvclByb2ZpbGU9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLkFuY2hvclByb2ZpbGV9CiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseS5wcm90b3R5cGUuYWRkUm9ib3RzPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsb3B0X3ZhbHVlLHByb3RvLnBiLkFuY2hvclByb2ZpbGUsb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseS5wcm90b3R5cGUuY2xlYXJSb2JvdHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0Um9ib3RzTGlzdChbXSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfbm8gPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseS5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseS5wcm90b3R5cGUuc2V0UGFnZU5vPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfc2l6ZSA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRvdGFsX3BhZ2UgPSA0OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseS5wcm90b3R5cGUuZ2V0VG90YWxQYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Sb2JvdExpc3RSZXBseS5wcm90b3R5cGUuc2V0VG90YWxQYWdlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRvdGFsX2NvdW50ID0gNTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuUm9ib3RMaXN0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsQ291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlJvYm90TGlzdFJlcGx5LnByb3RvdHlwZS5zZXRUb3RhbENvdW50PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSx2YWx1ZSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17cm9ib3RJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFJvYm90SWQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRSb2JvdElkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxLGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcm9ib3RfaWQgPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0Um9ib3RJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFJvYm90SWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuCiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn0KICogQGNvbnN0CiAqL3Byb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfPVsxXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseS50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e21lc3NhZ2VzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRNZXNzYWdlc0xpc3QoKSxjbXN0eXBlX3BiLlJvYm90TWVzc2FnZS50b09iamVjdCxpbmNsdWRlSW5zdGFuY2UpfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVwbHkoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPW5ldyBjbXN0eXBlX3BiLlJvYm90TWVzc2FnZSgpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxjbXN0eXBlX3BiLlJvYm90TWVzc2FnZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO21zZy5hZGRNZXNzYWdlcyh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5Sb2JvdE1lc3NhZ2VMaXN0UmVwbHkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRNZXNzYWdlc0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLGNtc3R5cGVfcGIuUm9ib3RNZXNzYWdlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuUm9ib3RNZXNzYWdlIG1lc3NhZ2VzID0gMTsKICogQHJldHVybiB7IUFycmF5PCFwcm90by5wYi5Sb2JvdE1lc3NhZ2U+fQogKi9wcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRNZXNzYWdlc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsY21zdHlwZV9wYi5Sb2JvdE1lc3NhZ2UsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLlJvYm90TWVzc2FnZT59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRNZXNzYWdlc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5Sb2JvdE1lc3NhZ2U9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLlJvYm90TWVzc2FnZX0KICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuYWRkTWVzc2FnZXM9ZnVuY3Rpb24ob3B0X3ZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSxvcHRfdmFsdWUscHJvdG8ucGIuUm9ib3RNZXNzYWdlLG9wdF9pbmRleCk7fTsvKioKICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUm9ib3RNZXNzYWdlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlJvYm90TWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuY2xlYXJNZXNzYWdlc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRNZXNzYWdlc0xpc3QoW10pO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdC50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2VudGl0eVR5cGU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCksZW50aXR5SWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZEVudW0oKTttc2cuc2V0RW50aXR5VHlwZSh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRFbnRpdHlJZCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEVudGl0eVR5cGUoKTtpZihmIT09MC4wKXt3cml0ZXIud3JpdGVFbnVtKDEsZik7fWY9bWVzc2FnZS5nZXRFbnRpdHlJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9fTsvKioKICogb3B0aW9uYWwgcGIuRW50aXR5VHlwZSBlbnRpdHlfdHlwZSA9IDE7CiAqIEByZXR1cm4geyFwcm90by5wYi5FbnRpdHlUeXBlfQogKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEVudGl0eVR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkVudGl0eVR5cGV9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEVudGl0eVR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGVudGl0eV9pZCA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRFbnRpdHlJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEVudGl0eUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXz1bMV07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXttb21lbnRzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRNb21lbnRzTGlzdCgpLHVzZXJ0eXBlX3BiLk1vbWVudC50b09iamVjdCxpbmNsdWRlSW5zdGFuY2UpfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVwbHkoKTtyZXR1cm4gcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPW5ldyB1c2VydHlwZV9wYi5Nb21lbnQoKTtyZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsdXNlcnR5cGVfcGIuTW9tZW50LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZE1vbWVudHModmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0TW9tZW50c0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLHVzZXJ0eXBlX3BiLk1vbWVudC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fX07LyoqCiAqIHJlcGVhdGVkIHBiLk1vbWVudCBtb21lbnRzID0gMTsKICogQHJldHVybiB7IUFycmF5PCFwcm90by5wYi5Nb21lbnQ+fQogKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5LnByb3RvdHlwZS5nZXRNb21lbnRzTGlzdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyx1c2VydHlwZV9wYi5Nb21lbnQsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLk1vbWVudD59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5LnByb3RvdHlwZS5zZXRNb21lbnRzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLk1vbWVudD19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuTW9tZW50fQogKi9wcm90by5wYi5jbXMuTW9tZW50TGlzdFJlcGx5LnByb3RvdHlwZS5hZGRNb21lbnRzPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsb3B0X3ZhbHVlLHByb3RvLnBiLk1vbWVudCxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLk1vbWVudExpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Nb21lbnRMaXN0UmVwbHkucHJvdG90eXBlLmNsZWFyTW9tZW50c0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRNb21lbnRzTGlzdChbXSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCksYXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywzLDApLGVuYWJsZTpqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQobXNnLDQsZmFsc2UpLGFjdGlvbjpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZU5vKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VTaXplKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFyZWFJZCh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZEJvb2woKTttc2cuc2V0RW5hYmxlKHZhbHVlKTticmVhaztjYXNlIDU6dmFyIHZhbHVlPXJlYWRlci5yZWFkRW51bSgpO21zZy5zZXRBY3Rpb24odmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0RW5hYmxlKCk7aWYoZil7d3JpdGVyLndyaXRlQm9vbCg0LGYpO31mPW1lc3NhZ2UuZ2V0QWN0aW9uKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg1LGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9ubyA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFBhZ2VObz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRQYWdlTm89ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9zaXplID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZVNpemU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGFnZVNpemU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYXJlYV9pZCA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEFyZWFJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBcmVhSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBib29sIGVuYWJsZSA9IDQ7CiAqIEByZXR1cm4ge2Jvb2xlYW59CiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRFbmFibGU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCxmYWxzZSk7fTsvKioKICogQHBhcmFtIHtib29sZWFufSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0RW5hYmxlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHBiLkFjdGlvblR5cGUgYWN0aW9uID0gNTsKICogQHJldHVybiB7IXByb3RvLnBiLkFjdGlvblR5cGV9CiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkFjdGlvblR5cGV9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBY3Rpb249ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfPVsxXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcGx5fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcGx5LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17bWVzc2FnZXNMaXN0OmpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldE1lc3NhZ2VzTGlzdCgpLGNtc3R5cGVfcGIuQXV0b01lc3NhZ2UudG9PYmplY3QsaW5jbHVkZUluc3RhbmNlKSxwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksdG90YWxQYWdlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw0LDApLHRvdGFsQ291bnQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgY21zdHlwZV9wYi5BdXRvTWVzc2FnZSgpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxjbXN0eXBlX3BiLkF1dG9NZXNzYWdlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZE1lc3NhZ2VzKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRUb3RhbFBhZ2UodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxDb3VudCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldE1lc3NhZ2VzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsY21zdHlwZV9wYi5BdXRvTWVzc2FnZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fWY9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDIsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsUGFnZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNCxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsQ291bnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDUsZik7fX07LyoqCiAqIHJlcGVhdGVkIHBiLkF1dG9NZXNzYWdlIG1lc3NhZ2VzID0gMTsKICogQHJldHVybiB7IUFycmF5PCFwcm90by5wYi5BdXRvTWVzc2FnZT59CiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuZ2V0TWVzc2FnZXNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLGNtc3R5cGVfcGIuQXV0b01lc3NhZ2UsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLkF1dG9NZXNzYWdlPn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRNZXNzYWdlc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5BdXRvTWVzc2FnZT19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuQXV0b01lc3NhZ2V9CiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuYWRkTWVzc2FnZXM9ZnVuY3Rpb24ob3B0X3ZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSxvcHRfdmFsdWUscHJvdG8ucGIuQXV0b01lc3NhZ2Usb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuY2xlYXJNZXNzYWdlc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRNZXNzYWdlc0xpc3QoW10pO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX25vID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkucHJvdG90eXBlLmdldFBhZ2VObz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkucHJvdG90eXBlLnNldFBhZ2VObz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX3NpemUgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuZ2V0UGFnZVNpemU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRQYWdlU2l6ZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9wYWdlID0gNDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsUGFnZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXV0b01lc3NhZ2VMaXN0UmVwbHkucHJvdG90eXBlLnNldFRvdGFsUGFnZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9jb3VudCA9IDU7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkF1dG9NZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRUb3RhbENvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BdXRvTWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuc2V0VG90YWxDb3VudD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17cGFnZU5vOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApLHBhZ2VTaXplOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLGFyZWFJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKSxhcHBJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNCwwKSx1c2VySWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCksYW5jaG9ySWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDYsMCksZGlyZWN0aW9uOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw3LDApLHR5cGU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDgsMCksa2V5d29yZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csOSwiIiksY3JlYXRlZFN0YXJ0OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxMCwwKSxjcmVhdGVkRW5kOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxMSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZU5vKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VTaXplKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFyZWFJZCh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcHBJZCh2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRVc2VySWQodmFsdWUpO2JyZWFrO2Nhc2UgNjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QW5jaG9ySWQodmFsdWUpO2JyZWFrO2Nhc2UgNzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldERpcmVjdGlvbih2YWx1ZSk7YnJlYWs7Y2FzZSA4OnZhciB2YWx1ZT1yZWFkZXIucmVhZEVudW0oKTttc2cuc2V0VHlwZSh2YWx1ZSk7YnJlYWs7Y2FzZSA5OnZhciB2YWx1ZT1yZWFkZXIucmVhZFN0cmluZygpO21zZy5zZXRLZXl3b3JkKHZhbHVlKTticmVhaztjYXNlIDEwOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRDcmVhdGVkU3RhcnQodmFsdWUpO2JyZWFrO2Nhc2UgMTE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldENyZWF0ZWRFbmQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0QXBwSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDQsZik7fWY9bWVzc2FnZS5nZXRVc2VySWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDUsZik7fWY9bWVzc2FnZS5nZXRBbmNob3JJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNixmKTt9Zj1tZXNzYWdlLmdldERpcmVjdGlvbigpO2lmKGYhPT0wLjApe3dyaXRlci53cml0ZUVudW0oNyxmKTt9Zj1tZXNzYWdlLmdldFR5cGUoKTtpZihmIT09MC4wKXt3cml0ZXIud3JpdGVFbnVtKDgsZik7fWY9bWVzc2FnZS5nZXRLZXl3b3JkKCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlU3RyaW5nKDksZik7fWY9bWVzc2FnZS5nZXRDcmVhdGVkU3RhcnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEwLGYpO31mPW1lc3NhZ2UuZ2V0Q3JlYXRlZEVuZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMTEsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX25vID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFBhZ2VObz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX3NpemUgPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRQYWdlU2l6ZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMzsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcHBfaWQgPSA0OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBcHBJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBcHBJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB1c2VyX2lkID0gNTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0VXNlcklkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFVzZXJJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhbmNob3JfaWQgPSA2OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBbmNob3JJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDYsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBbmNob3JJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHBiLk1lc3NhZ2VEaXJlY3Rpb24gZGlyZWN0aW9uID0gNzsKICogQHJldHVybiB7IXByb3RvLnBiLk1lc3NhZ2VEaXJlY3Rpb259CiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXREaXJlY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLk1lc3NhZ2VEaXJlY3Rpb259IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXREaXJlY3Rpb249ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuTWVzc2FnZVR5cGUgdHlwZSA9IDg7CiAqIEByZXR1cm4geyFwcm90by5wYi5NZXNzYWdlVHlwZX0KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw4LDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLk1lc3NhZ2VUeXBlfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0VHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcyw4LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBzdHJpbmcga2V5d29yZCA9IDk7CiAqIEByZXR1cm4ge3N0cmluZ30KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEtleXdvcmQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw5LCIiKTt9Oy8qKgogKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEtleXdvcmQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcyw5LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgY3JlYXRlZF9zdGFydCA9IDEwOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRDcmVhdGVkU3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxMCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldENyZWF0ZWRTdGFydD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEwLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgY3JlYXRlZF9lbmQgPSAxMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q3JlYXRlZEVuZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDExLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0Q3JlYXRlZEVuZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDExLHZhbHVlKTt9Oy8qKgogKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuCiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn0KICogQGNvbnN0CiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc189WzFdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXttZXNzYWdlc0xpc3Q6anNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0TWVzc2FnZXNMaXN0KCksY21zdHlwZV9wYi5DaGF0TWVzc2FnZS50b09iamVjdCxpbmNsdWRlSW5zdGFuY2UpLHBhZ2VObzpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxwYWdlU2l6ZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKSx0b3RhbFBhZ2U6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDQsMCksdG90YWxDb3VudDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPW5ldyBjbXN0eXBlX3BiLkNoYXRNZXNzYWdlKCk7cmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLGNtc3R5cGVfcGIuQ2hhdE1lc3NhZ2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTttc2cuYWRkTWVzc2FnZXModmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZU5vKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VTaXplKHZhbHVlKTticmVhaztjYXNlIDQ6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFRvdGFsUGFnZSh2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRUb3RhbENvdW50KHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0TWVzc2FnZXNMaXN0KCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKDEsZixjbXN0eXBlX3BiLkNoYXRNZXNzYWdlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxQYWdlKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxDb3VudCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNSxmKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuQ2hhdE1lc3NhZ2UgbWVzc2FnZXMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkNoYXRNZXNzYWdlPn0KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRNZXNzYWdlc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsY21zdHlwZV9wYi5DaGF0TWVzc2FnZSwxKTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ucGIuQ2hhdE1lc3NhZ2U+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVwbHkucHJvdG90eXBlLnNldE1lc3NhZ2VzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkNoYXRNZXNzYWdlPX0gb3B0X3ZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4CiAqIEByZXR1cm4geyFwcm90by5wYi5DaGF0TWVzc2FnZX0KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5hZGRNZXNzYWdlcz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5DaGF0TWVzc2FnZSxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhck1lc3NhZ2VzTGlzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNldE1lc3NhZ2VzTGlzdChbXSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfbm8gPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuc2V0UGFnZU5vPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfc2l6ZSA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVwbHkucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRvdGFsX3BhZ2UgPSA0OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuZ2V0VG90YWxQYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DaGF0TWVzc2FnZUxpc3RSZXBseS5wcm90b3R5cGUuc2V0VG90YWxQYWdlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRvdGFsX2NvdW50ID0gNTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2hhdE1lc3NhZ2VMaXN0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsQ291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNoYXRNZXNzYWdlTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRUb3RhbENvdW50PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSx2YWx1ZSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e3BhZ2VObzpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxwYWdlU2l6ZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxhcmVhSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksYXBwSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDQsMCksdXNlcklkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApLGFuY2hvcklkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw2LDApLGNhbGxUeXBlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw3LDApLGhhbmdUeXBlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw4LDApLHN0YXR1czpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csOSwwKSxtaW5EdXJhdGlvbjpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMTAsMCksbWF4RHVyYXRpb246anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDExLDApLGNyZWF0ZWRTdGFydDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMTIsMCksY3JlYXRlZEVuZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMTMsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZU5vKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VTaXplKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFyZWFJZCh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcHBJZCh2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRVc2VySWQodmFsdWUpO2JyZWFrO2Nhc2UgNjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QW5jaG9ySWQodmFsdWUpO2JyZWFrO2Nhc2UgNzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldENhbGxUeXBlKHZhbHVlKTticmVhaztjYXNlIDg6dmFyIHZhbHVlPXJlYWRlci5yZWFkRW51bSgpO21zZy5zZXRIYW5nVHlwZSh2YWx1ZSk7YnJlYWs7Y2FzZSA5OnZhciB2YWx1ZT1yZWFkZXIucmVhZEVudW0oKTttc2cuc2V0U3RhdHVzKHZhbHVlKTticmVhaztjYXNlIDEwOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRNaW5EdXJhdGlvbih2YWx1ZSk7YnJlYWs7Y2FzZSAxMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0TWF4RHVyYXRpb24odmFsdWUpO2JyZWFrO2Nhc2UgMTI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldENyZWF0ZWRTdGFydCh2YWx1ZSk7YnJlYWs7Y2FzZSAxMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0Q3JlYXRlZEVuZCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEFyZWFJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldEFwcElkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0VXNlcklkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig1LGYpO31mPW1lc3NhZ2UuZ2V0QW5jaG9ySWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDYsZik7fWY9bWVzc2FnZS5nZXRDYWxsVHlwZSgpO2lmKGYhPT0wLjApe3dyaXRlci53cml0ZUVudW0oNyxmKTt9Zj1tZXNzYWdlLmdldEhhbmdUeXBlKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg4LGYpO31mPW1lc3NhZ2UuZ2V0U3RhdHVzKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg5LGYpO31mPW1lc3NhZ2UuZ2V0TWluRHVyYXRpb24oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEwLGYpO31mPW1lc3NhZ2UuZ2V0TWF4RHVyYXRpb24oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDExLGYpO31mPW1lc3NhZ2UuZ2V0Q3JlYXRlZFN0YXJ0KCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxMixmKTt9Zj1tZXNzYWdlLmdldENyZWF0ZWRFbmQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEzLGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9ubyA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRQYWdlTm89ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgcGFnZV9zaXplID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGFnZVNpemU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYXJlYV9pZCA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBcmVhSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYXBwX2lkID0gNDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBcHBJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXBwSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgdXNlcl9pZCA9IDU7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0VXNlcklkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRVc2VySWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYW5jaG9yX2lkID0gNjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBbmNob3JJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDYsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QW5jaG9ySWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw2LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBwYi5DYWxsVHlwZSBjYWxsX3R5cGUgPSA3OwogKiBAcmV0dXJuIHshcHJvdG8ucGIuQ2FsbFR5cGV9CiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldENhbGxUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNywwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5DYWxsVHlwZX0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRDYWxsVHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcyw3LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBwYi5IYW5nVHlwZSBoYW5nX3R5cGUgPSA4OwogKiBAcmV0dXJuIHshcHJvdG8ucGIuSGFuZ1R5cGV9CiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEhhbmdUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsOCwwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5IYW5nVHlwZX0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRIYW5nVHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcyw4LHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBwYi5DYWxsU3RhdHVzIHN0YXR1cyA9IDk7CiAqIEByZXR1cm4geyFwcm90by5wYi5DYWxsU3RhdHVzfQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw5LDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkNhbGxTdGF0dXN9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDksdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBtaW5fZHVyYXRpb24gPSAxMDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRNaW5EdXJhdGlvbj1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEwLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldE1pbkR1cmF0aW9uPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMTAsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBtYXhfZHVyYXRpb24gPSAxMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRNYXhEdXJhdGlvbj1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDExLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldE1heER1cmF0aW9uPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMTEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBjcmVhdGVkX3N0YXJ0ID0gMTI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q3JlYXRlZFN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMTIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0Q3JlYXRlZFN0YXJ0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMTIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBjcmVhdGVkX2VuZCA9IDEzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldENyZWF0ZWRFbmQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxMywwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRDcmVhdGVkRW5kPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMTMsdmFsdWUpO307LyoqCiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS4KICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fQogKiBAY29uc3QKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfPVsxXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtjYWxsc0xpc3Q6anNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0Q2FsbHNMaXN0KCksdXNlcnR5cGVfcGIuQ2FsbFJlY29yZC50b09iamVjdCxpbmNsdWRlSW5zdGFuY2UpLHBhZ2VObzpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxwYWdlU2l6ZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKSx0b3RhbFBhZ2U6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDQsMCksdG90YWxDb3VudDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IHVzZXJ0eXBlX3BiLkNhbGxSZWNvcmQoKTtyZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsdXNlcnR5cGVfcGIuQ2FsbFJlY29yZC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO21zZy5hZGRDYWxscyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlTm8odmFsdWUpO2JyZWFrO2Nhc2UgMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0UGFnZVNpemUodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxQYWdlKHZhbHVlKTticmVhaztjYXNlIDU6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFRvdGFsQ291bnQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldENhbGxzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsdXNlcnR5cGVfcGIuQ2FsbFJlY29yZC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fWY9bWVzc2FnZS5nZXRQYWdlTm8oKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDIsZik7fWY9bWVzc2FnZS5nZXRQYWdlU2l6ZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMyxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsUGFnZSgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNCxmKTt9Zj1tZXNzYWdlLmdldFRvdGFsQ291bnQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDUsZik7fX07LyoqCiAqIHJlcGVhdGVkIHBiLkNhbGxSZWNvcmQgY2FsbHMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkNhbGxSZWNvcmQ+fQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5wcm90b3R5cGUuZ2V0Q2FsbHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHVzZXJ0eXBlX3BiLkNhbGxSZWNvcmQsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLkNhbGxSZWNvcmQ+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHl9IHJldHVybnMgdGhpcwoqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRDYWxsc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5DYWxsUmVjb3JkPX0gb3B0X3ZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4CiAqIEByZXR1cm4geyFwcm90by5wYi5DYWxsUmVjb3JkfQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5wcm90b3R5cGUuYWRkQ2FsbHM9ZnVuY3Rpb24ob3B0X3ZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSxvcHRfdmFsdWUscHJvdG8ucGIuQ2FsbFJlY29yZCxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5wcm90b3R5cGUuY2xlYXJDYWxsc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRDYWxsc0xpc3QoW10pO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX25vID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5wcm90b3R5cGUuZ2V0UGFnZU5vPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHkucHJvdG90eXBlLnNldFBhZ2VObz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX3NpemUgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRQYWdlU2l6ZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRQYWdlU2l6ZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9wYWdlID0gNDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5wcm90b3R5cGUuZ2V0VG90YWxQYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DYWxsTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHkucHJvdG90eXBlLnNldFRvdGFsUGFnZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9jb3VudCA9IDU7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsQ291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNhbGxMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ2FsbExpc3RSZXBseS5wcm90b3R5cGUuc2V0VG90YWxDb3VudD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17cGFnZU5vOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApLHBhZ2VTaXplOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLGFyZWFJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKSxhcHBJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNCwwKSx0cmFkZXJUeXBlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApLHRyYWRlcklkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw2LDApLHNvdXJjZVR5cGU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDcsMCksY3JlYXRlZFN0YXJ0OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw4LDApLGNyZWF0ZWRFbmQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDksMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgNDp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QXBwSWQodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldFRyYWRlclR5cGUodmFsdWUpO2JyZWFrO2Nhc2UgNjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VHJhZGVySWQodmFsdWUpO2JyZWFrO2Nhc2UgNzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRFbnVtKCk7bXNnLnNldFNvdXJjZVR5cGUodmFsdWUpO2JyZWFrO2Nhc2UgODp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0Q3JlYXRlZFN0YXJ0KHZhbHVlKTticmVhaztjYXNlIDk6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldENyZWF0ZWRFbmQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigyLGYpO31mPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0QXBwSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDQsZik7fWY9bWVzc2FnZS5nZXRUcmFkZXJUeXBlKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg1LGYpO31mPW1lc3NhZ2UuZ2V0VHJhZGVySWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDYsZik7fWY9bWVzc2FnZS5nZXRTb3VyY2VUeXBlKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSg3LGYpO31mPW1lc3NhZ2UuZ2V0Q3JlYXRlZFN0YXJ0KCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig4LGYpO31mPW1lc3NhZ2UuZ2V0Q3JlYXRlZEVuZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoOSxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfbm8gPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRQYWdlTm89ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGFnZU5vPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHBhZ2Vfc2l6ZSA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFBhZ2VTaXplPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFyZWFfaWQgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBcmVhSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXJlYUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFwcF9pZCA9IDQ7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEFwcElkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFwcElkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuRW50aXR5VHlwZSB0cmFkZXJfdHlwZSA9IDU7CiAqIEByZXR1cm4geyFwcm90by5wYi5FbnRpdHlUeXBlfQogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0VHJhZGVyVHlwZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuRW50aXR5VHlwZX0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFRyYWRlclR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIHRyYWRlcl9pZCA9IDY7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFRyYWRlcklkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFRyYWRlcklkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuRW50aXR5VHlwZSBzb3VyY2VfdHlwZSA9IDc7CiAqIEByZXR1cm4geyFwcm90by5wYi5FbnRpdHlUeXBlfQogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0U291cmNlVHlwZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDcsMCk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuRW50aXR5VHlwZX0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldFNvdXJjZVR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNyx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGNyZWF0ZWRfc3RhcnQgPSA4OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRDcmVhdGVkU3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw4LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0Q3JlYXRlZFN0YXJ0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOCx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGNyZWF0ZWRfZW5kID0gOTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q3JlYXRlZEVuZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDksMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRDcmVhdGVkRW5kPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfPVsxXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcGx5fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcGx5LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17dHJhbnNhY3Rpb25zTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRUcmFuc2FjdGlvbnNMaXN0KCksdXNlcnR5cGVfcGIuVHJhbnNhY3Rpb24udG9PYmplY3QsaW5jbHVkZUluc3RhbmNlKSxwYWdlTm86anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDIsMCkscGFnZVNpemU6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCksdG90YWxQYWdlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw0LDApLHRvdGFsQ291bnQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgdXNlcnR5cGVfcGIuVHJhbnNhY3Rpb24oKTtyZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsdXNlcnR5cGVfcGIuVHJhbnNhY3Rpb24uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTttc2cuYWRkVHJhbnNhY3Rpb25zKHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFBhZ2VObyh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRQYWdlU2l6ZSh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRUb3RhbFBhZ2UodmFsdWUpO2JyZWFrO2Nhc2UgNTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0VG90YWxDb3VudCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFRyYW5zYWN0aW9uc0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLHVzZXJ0eXBlX3BiLlRyYW5zYWN0aW9uLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9Zj1tZXNzYWdlLmdldFBhZ2VObygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldFBhZ2VTaXplKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxQYWdlKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMig0LGYpO31mPW1lc3NhZ2UuZ2V0VG90YWxDb3VudCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoNSxmKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuVHJhbnNhY3Rpb24gdHJhbnNhY3Rpb25zID0gMTsKICogQHJldHVybiB7IUFycmF5PCFwcm90by5wYi5UcmFuc2FjdGlvbj59CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseS5wcm90b3R5cGUuZ2V0VHJhbnNhY3Rpb25zTGlzdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyx1c2VydHlwZV9wYi5UcmFuc2FjdGlvbiwxKTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ucGIuVHJhbnNhY3Rpb24+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkucHJvdG90eXBlLnNldFRyYW5zYWN0aW9uc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5UcmFuc2FjdGlvbj19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuVHJhbnNhY3Rpb259CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseS5wcm90b3R5cGUuYWRkVHJhbnNhY3Rpb25zPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsb3B0X3ZhbHVlLHByb3RvLnBiLlRyYW5zYWN0aW9uLG9wdF9pbmRleCk7fTsvKioKICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkucHJvdG90eXBlLmNsZWFyVHJhbnNhY3Rpb25zTGlzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNldFRyYW5zYWN0aW9uc0xpc3QoW10pO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX25vID0gMjsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkucHJvdG90eXBlLmdldFBhZ2VObz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkucHJvdG90eXBlLnNldFBhZ2VObz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBwYWdlX3NpemUgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseS5wcm90b3R5cGUuZ2V0UGFnZVNpemU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRQYWdlU2l6ZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9wYWdlID0gNDsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkucHJvdG90eXBlLmdldFRvdGFsUGFnZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuVHJhbnNhY3Rpb25MaXN0UmVwbHkucHJvdG90eXBlLnNldFRvdGFsUGFnZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiB0b3RhbF9jb3VudCA9IDU7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlRyYW5zYWN0aW9uTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRUb3RhbENvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5UcmFuc2FjdGlvbkxpc3RSZXBseS5wcm90b3R5cGUuc2V0VG90YWxDb3VudD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkNyZWF0ZVNldHRsZVJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5DcmVhdGVTZXR0bGVSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17YXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApLHNldHRsZUF0OmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLG1pbkJhbGFuY2U6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDMsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkNyZWF0ZVNldHRsZVJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNyZWF0ZVNldHRsZVJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5DcmVhdGVTZXR0bGVSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFyZWFJZCh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRTZXR0bGVBdCh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRNaW5CYWxhbmNlKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkNyZWF0ZVNldHRsZVJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkNyZWF0ZVNldHRsZVJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5DcmVhdGVTZXR0bGVSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBcmVhSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRTZXR0bGVBdCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldE1pbkJhbGFuY2UoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDMsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5DcmVhdGVTZXR0bGVSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNyZWF0ZVNldHRsZVJlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBzZXR0bGVfYXQgPSAyOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5DcmVhdGVTZXR0bGVSZXF1ZXN0LnByb3RvdHlwZS5nZXRTZXR0bGVBdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5DcmVhdGVTZXR0bGVSZXF1ZXN0LnByb3RvdHlwZS5zZXRTZXR0bGVBdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBtaW5fYmFsYW5jZSA9IDM7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkNyZWF0ZVNldHRsZVJlcXVlc3QucHJvdG90eXBlLmdldE1pbkJhbGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNyZWF0ZVNldHRsZVJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ3JlYXRlU2V0dGxlUmVxdWVzdC5wcm90b3R5cGUuc2V0TWluQmFsYW5jZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS4KICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fQogKiBAY29uc3QKICovcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3QucmVwZWF0ZWRGaWVsZHNfPVsyXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuU3VibWl0U2V0dGxlUmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5TdWJtaXRTZXR0bGVSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5TdWJtaXRTZXR0bGVSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXthcmVhSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCkscmVjb3Jkc0xpc3Q6anNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0UmVjb3Jkc0xpc3QoKSxhbmNob3J0eXBlX3BiLlNldHRsZVJlY29yZC50b09iamVjdCxpbmNsdWRlSW5zdGFuY2UpfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5TdWJtaXRTZXR0bGVSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5TdWJtaXRTZXR0bGVSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuU3VibWl0U2V0dGxlUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9bmV3IGFuY2hvcnR5cGVfcGIuU2V0dGxlUmVjb3JkKCk7cmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLGFuY2hvcnR5cGVfcGIuU2V0dGxlUmVjb3JkLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZFJlY29yZHModmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuU3VibWl0U2V0dGxlUmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuU3VibWl0U2V0dGxlUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3R9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5TdWJtaXRTZXR0bGVSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEFyZWFJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9Zj1tZXNzYWdlLmdldFJlY29yZHNMaXN0KCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKDIsZixhbmNob3J0eXBlX3BiLlNldHRsZVJlY29yZC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuU3VibWl0U2V0dGxlUmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5TdWJtaXRTZXR0bGVSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIHJlcGVhdGVkIHBiLlNldHRsZVJlY29yZCByZWNvcmRzID0gMjsKICogQHJldHVybiB7IUFycmF5PCFwcm90by5wYi5TZXR0bGVSZWNvcmQ+fQogKi9wcm90by5wYi5jbXMuU3VibWl0U2V0dGxlUmVxdWVzdC5wcm90b3R5cGUuZ2V0UmVjb3Jkc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsYW5jaG9ydHlwZV9wYi5TZXR0bGVSZWNvcmQsMik7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLlNldHRsZVJlY29yZD59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuU3VibWl0U2V0dGxlUmVxdWVzdH0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3QucHJvdG90eXBlLnNldFJlY29yZHNMaXN0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuU2V0dGxlUmVjb3JkPX0gb3B0X3ZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4CiAqIEByZXR1cm4geyFwcm90by5wYi5TZXR0bGVSZWNvcmR9CiAqL3Byb3RvLnBiLmNtcy5TdWJtaXRTZXR0bGVSZXF1ZXN0LnByb3RvdHlwZS5hZGRSZWNvcmRzPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsb3B0X3ZhbHVlLHByb3RvLnBiLlNldHRsZVJlY29yZCxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlN1Ym1pdFNldHRsZVJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuU3VibWl0U2V0dGxlUmVxdWVzdC5wcm90b3R5cGUuY2xlYXJSZWNvcmRzTGlzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNldFJlY29yZHNMaXN0KFtdKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17YXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFyZWFJZCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBcmVhSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXF1ZXN0LnByb3RvdHlwZS5nZXRBcmVhSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVwbHkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcGx5LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17cHJvZ3Jlc3M6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseX0KICovcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVwbHkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldFByb2dyZXNzKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVwbHkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5TZXR0bGVQcm9ncmVzc1JlcGx5fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRQcm9ncmVzcygpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIHByb2dyZXNzID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseS5wcm90b3R5cGUuZ2V0UHJvZ3Jlc3M9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlNldHRsZVByb2dyZXNzUmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuU2V0dGxlUHJvZ3Jlc3NSZXBseS5wcm90b3R5cGUuc2V0UHJvZ3Jlc3M9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXthcmVhSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCksZ3VpbGRJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwwKSxhbmNob3JJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKSxzZXR0bGVBdDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csNCwwKSxzdGF0dXM6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDUsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0R3VpbGRJZCh2YWx1ZSk7YnJlYWs7Y2FzZSAzOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBbmNob3JJZCh2YWx1ZSk7YnJlYWs7Y2FzZSA0OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRTZXR0bGVBdCh2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZEVudW0oKTttc2cuc2V0U3RhdHVzKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxLGYpO31mPW1lc3NhZ2UuZ2V0R3VpbGRJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9Zj1tZXNzYWdlLmdldEFuY2hvcklkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigzLGYpO31mPW1lc3NhZ2UuZ2V0U2V0dGxlQXQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDQsZik7fWY9bWVzc2FnZS5nZXRTdGF0dXMoKTtpZihmIT09MC4wKXt3cml0ZXIud3JpdGVFbnVtKDUsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gMTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEFyZWFJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBndWlsZF9pZCA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRHdWlsZElkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0R3VpbGRJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhbmNob3JfaWQgPSAzOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QW5jaG9ySWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBbmNob3JJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBzZXR0bGVfYXQgPSA0OwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0U2V0dGxlQXQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRTZXR0bGVBdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHBiLlNldHRsZVN0YXR1cyBzdGF0dXMgPSA1OwogKiBAcmV0dXJuIHshcHJvdG8ucGIuU2V0dGxlU3RhdHVzfQogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuU2V0dGxlU3RhdHVzfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXz1bMV07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtyZWNvcmRzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRSZWNvcmRzTGlzdCgpLGFuY2hvcnR5cGVfcGIuU2V0dGxlUmVjb3JkLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IGFuY2hvcnR5cGVfcGIuU2V0dGxlUmVjb3JkKCk7cmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLGFuY2hvcnR5cGVfcGIuU2V0dGxlUmVjb3JkLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZFJlY29yZHModmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcGx5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0UmVjb3Jkc0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLGFuY2hvcnR5cGVfcGIuU2V0dGxlUmVjb3JkLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuU2V0dGxlUmVjb3JkIHJlY29yZHMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLlNldHRsZVJlY29yZD59CiAqL3Byb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHkucHJvdG90eXBlLmdldFJlY29yZHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLGFuY2hvcnR5cGVfcGIuU2V0dGxlUmVjb3JkLDEpO307LyoqCiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5wYi5TZXR0bGVSZWNvcmQ+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXBseX0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXBseS5wcm90b3R5cGUuc2V0UmVjb3Jkc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5TZXR0bGVSZWNvcmQ9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLlNldHRsZVJlY29yZH0KICovcHJvdG8ucGIuY21zLlNldHRsZUxpc3RSZXBseS5wcm90b3R5cGUuYWRkUmVjb3Jkcz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5TZXR0bGVSZWNvcmQsb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5TZXR0bGVMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuU2V0dGxlTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhclJlY29yZHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0UmVjb3Jkc0xpc3QoW10pO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkFwcExpc3RSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLkFwcExpc3RSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdC50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2FyZWFJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkFwcExpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkFwcExpc3RSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQXBwTGlzdFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkFwcExpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFyZWFJZCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQXBwTGlzdFJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFwcExpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEFyZWFJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFyZWFfaWQgPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXJlYUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuQXBwTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXz1bMV07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkFwcExpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFwcExpc3RSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXthcHBzTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRBcHBzTGlzdCgpLGNtc3R5cGVfcGIuQXBwLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXBwTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuQXBwTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkFwcExpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuQXBwTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IGNtc3R5cGVfcGIuQXBwKCk7cmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLGNtc3R5cGVfcGIuQXBwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZEFwcHModmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQXBwTGlzdFJlcGx5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0QXBwc0xpc3QoKTtpZihmLmxlbmd0aD4wKXt3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMSxmLGNtc3R5cGVfcGIuQXBwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuQXBwIGFwcHMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkFwcD59CiAqL3Byb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHkucHJvdG90eXBlLmdldEFwcHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLGNtc3R5cGVfcGIuQXBwLDEpO307LyoqCiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5wYi5BcHA+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFwcExpc3RSZXBseX0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLkFwcExpc3RSZXBseS5wcm90b3R5cGUuc2V0QXBwc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5BcHA9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLkFwcH0KICovcHJvdG8ucGIuY21zLkFwcExpc3RSZXBseS5wcm90b3R5cGUuYWRkQXBwcz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5BcHAsb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcHBMaXN0UmVwbHl9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQXBwTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhckFwcHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0QXBwc0xpc3QoW10pO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXthcHBJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXF1ZXN0KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcHBJZCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBcHBJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFwcF9pZCA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXBwSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFwcElkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXBseS5yZXBlYXRlZEZpZWxkc189WzFdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXBseS50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e3ZlcnNpb25zTGlzdDpqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRWZXJzaW9uc0xpc3QoKSxjbXN0eXBlX3BiLlZlcnNpb24udG9PYmplY3QsaW5jbHVkZUluc3RhbmNlKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IGNtc3R5cGVfcGIuVmVyc2lvbigpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxjbXN0eXBlX3BiLlZlcnNpb24uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTttc2cuYWRkVmVyc2lvbnModmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldFZlcnNpb25zTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsY21zdHlwZV9wYi5WZXJzaW9uLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuVmVyc2lvbiB2ZXJzaW9ucyA9IDE7CiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ucGIuVmVyc2lvbj59CiAqL3Byb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRWZXJzaW9uc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsY21zdHlwZV9wYi5WZXJzaW9uLDEpO307LyoqCiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5wYi5WZXJzaW9uPn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuVmVyc2lvbkxpc3RSZXBseS5wcm90b3R5cGUuc2V0VmVyc2lvbnNMaXN0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogQHBhcmFtIHshcHJvdG8ucGIuVmVyc2lvbj19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuVmVyc2lvbn0KICovcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVwbHkucHJvdG90eXBlLmFkZFZlcnNpb25zPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsb3B0X3ZhbHVlLHByb3RvLnBiLlZlcnNpb24sb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5WZXJzaW9uTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlZlcnNpb25MaXN0UmVwbHkucHJvdG90eXBlLmNsZWFyVmVyc2lvbnNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0VmVyc2lvbnNMaXN0KFtdKTt9O2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17YXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApLGFwcElkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFyZWFJZCh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcHBJZCh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBcmVhSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRBcHBJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMixmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFyZWFfaWQgPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEFyZWFJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXJlYUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFwcF9pZCA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXBwSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFwcElkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseS5yZXBlYXRlZEZpZWxkc189WzFdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcGx5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseS50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2NvbmZpZ3NMaXN0OmpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldENvbmZpZ3NMaXN0KCksY21zdHlwZV9wYi5BcmVhQ29uZmlnLnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPW5ldyBjbXN0eXBlX3BiLkFyZWFDb25maWcoKTtyZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsY21zdHlwZV9wYi5BcmVhQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZENvbmZpZ3ModmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkFyZWFDb25maWdMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldENvbmZpZ3NMaXN0KCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKDEsZixjbXN0eXBlX3BiLkFyZWFDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpO319Oy8qKgogKiByZXBlYXRlZCBwYi5BcmVhQ29uZmlnIGNvbmZpZ3MgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkFyZWFDb25maWc+fQogKi9wcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseS5wcm90b3R5cGUuZ2V0Q29uZmlnc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsY21zdHlwZV9wYi5BcmVhQ29uZmlnLDEpO307LyoqCiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5wYi5BcmVhQ29uZmlnPn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseS5wcm90b3R5cGUuc2V0Q29uZmlnc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5BcmVhQ29uZmlnPX0gb3B0X3ZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4CiAqIEByZXR1cm4geyFwcm90by5wYi5BcmVhQ29uZmlnfQogKi9wcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseS5wcm90b3R5cGUuYWRkQ29uZmlncz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5BcmVhQ29uZmlnLG9wdF9pbmRleCk7fTsvKioKICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQXJlYUNvbmZpZ0xpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BcmVhQ29uZmlnTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhckNvbmZpZ3NMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0Q29uZmlnc0xpc3QoW10pO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcXVlc3QudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXthcmVhSWQ6anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLDEsMCl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QXJlYUlkKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldEFyZWFJZCgpO2lmKGYhPT0wKXt3cml0ZXIud3JpdGVVaW50MzIoMSxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFyZWFfaWQgPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldEFyZWFJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXJlYUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXBseS5yZXBlYXRlZEZpZWxkc189WzFdO2lmKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1Qpey8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLgogKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS4KICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC4KICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6CiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC4KICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlCiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcGx5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS4KICogQHJldHVybiB7IU9iamVjdH0KICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXBseS50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2NvbmZpZ3NMaXN0OmpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldENvbmZpZ3NMaXN0KCksdXNlcnR5cGVfcGIuQ291bnRyeUNvbmZpZy50b09iamVjdCxpbmNsdWRlSW5zdGFuY2UpfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHkoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgdXNlcnR5cGVfcGIuQ291bnRyeUNvbmZpZygpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSx1c2VydHlwZV9wYi5Db3VudHJ5Q29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7bXNnLmFkZENvbmZpZ3ModmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXBseS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIHdyaXRlcj1uZXcganNwYi5CaW5hcnlXcml0ZXIoKTtwcm90by5wYi5jbXMuQ291bnRyeUNvbmZpZ0xpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKG1lc3NhZ2Usd3JpdGVyKXt2YXIgZj11bmRlZmluZWQ7Zj1tZXNzYWdlLmdldENvbmZpZ3NMaXN0KCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKDEsZix1c2VydHlwZV9wYi5Db3VudHJ5Q29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuQ291bnRyeUNvbmZpZyBjb25maWdzID0gMTsKICogQHJldHVybiB7IUFycmF5PCFwcm90by5wYi5Db3VudHJ5Q29uZmlnPn0KICovcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHkucHJvdG90eXBlLmdldENvbmZpZ3NMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHVzZXJ0eXBlX3BiLkNvdW50cnlDb25maWcsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLkNvdW50cnlDb25maWc+fSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHl9IHJldHVybnMgdGhpcwoqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRDb25maWdzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLkNvdW50cnlDb25maWc9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLkNvdW50cnlDb25maWd9CiAqL3Byb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcGx5LnByb3RvdHlwZS5hZGRDb25maWdzPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsb3B0X3ZhbHVlLHByb3RvLnBiLkNvdW50cnlDb25maWcsb3B0X2luZGV4KTt9Oy8qKgogKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Db3VudHJ5Q29uZmlnTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNvdW50cnlDb25maWdMaXN0UmVwbHkucHJvdG90eXBlLmNsZWFyQ29uZmlnc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRDb25maWdzTGlzdChbXSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdC50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2FyZWFJZDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxwYXlUeXBlOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdH0KICovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLHJlYWRlcik7fTsvKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGUKICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihtc2cscmVhZGVyKXt3aGlsZShyZWFkZXIubmV4dEZpZWxkKCkpe2lmKHJlYWRlci5pc0VuZEdyb3VwKCkpe2JyZWFrO312YXIgZmllbGQ9cmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7c3dpdGNoKGZpZWxkKXtjYXNlIDE6dmFyIHZhbHVlPXJlYWRlci5yZWFkVWludDMyKCk7bXNnLnNldEFyZWFJZCh2YWx1ZSk7YnJlYWs7Y2FzZSAyOnZhciB2YWx1ZT1yZWFkZXIucmVhZEVudW0oKTttc2cuc2V0UGF5VHlwZSh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdH0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRBcmVhSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRQYXlUeXBlKCk7aWYoZiE9PTAuMCl7d3JpdGVyLndyaXRlRW51bSgyLGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYXJlYV9pZCA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBcmVhSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBwYi5QYXlUeXBlIHBheV90eXBlID0gMjsKICogQHJldHVybiB7IXByb3RvLnBiLlBheVR5cGV9CiAqL3Byb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcXVlc3QucHJvdG90eXBlLmdldFBheVR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLlBheVR5cGV9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0UGF5VHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywyLHZhbHVlKTt9Oy8qKgogKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuCiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn0KICogQGNvbnN0CiAqL3Byb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXz1bMV07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVwbHkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17Y2hhbm5lbHNMaXN0OmpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldENoYW5uZWxzTGlzdCgpLHVzZXJ0eXBlX3BiLlBheUNoYW5uZWwudG9PYmplY3QsaW5jbHVkZUluc3RhbmNlKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IHVzZXJ0eXBlX3BiLlBheUNoYW5uZWwoKTtyZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsdXNlcnR5cGVfcGIuUGF5Q2hhbm5lbC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO21zZy5hZGRDaGFubmVscyh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0Q2hhbm5lbHNMaXN0KCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKDEsZix1c2VydHlwZV9wYi5QYXlDaGFubmVsLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTt9fTsvKioKICogcmVwZWF0ZWQgcGIuUGF5Q2hhbm5lbCBjaGFubmVscyA9IDE7CiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ucGIuUGF5Q2hhbm5lbD59CiAqL3Byb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5LnByb3RvdHlwZS5nZXRDaGFubmVsc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsdXNlcnR5cGVfcGIuUGF5Q2hhbm5lbCwxKTt9Oy8qKgogKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ucGIuUGF5Q2hhbm5lbD59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseX0gcmV0dXJucyB0aGlzCiovcHJvdG8ucGIuY21zLlBheUNoYW5uZWxMaXN0UmVwbHkucHJvdG90eXBlLnNldENoYW5uZWxzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLlBheUNoYW5uZWw9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLlBheUNoYW5uZWx9CiAqL3Byb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5LnByb3RvdHlwZS5hZGRDaGFubmVscz1mdW5jdGlvbihvcHRfdmFsdWUsb3B0X2luZGV4KXtyZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLG9wdF92YWx1ZSxwcm90by5wYi5QYXlDaGFubmVsLG9wdF9pbmRleCk7fTsvKioKICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5Q2hhbm5lbExpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5QYXlDaGFubmVsTGlzdFJlcGx5LnByb3RvdHlwZS5jbGVhckNoYW5uZWxzTGlzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNldENoYW5uZWxzTGlzdChbXSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17YXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcXVlc3QoKTtyZXR1cm4gcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0fQogKi9wcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QXJlYUlkKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxLGYpO319Oy8qKgogKiBvcHRpb25hbCB1aW50MzIgYXJlYV9pZCA9IDE7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBcmVhSWQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApO307LyoqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXRBcmVhSWQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuCiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn0KICogQGNvbnN0CiAqL3Byb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVwbHkucmVwZWF0ZWRGaWVsZHNfPVsxXTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcGx5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLHRoaXMpO307LyoqCiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLgogKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlCiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcGx5fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseS50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e2NvbmZpZ3NMaXN0OmpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldENvbmZpZ3NMaXN0KCksY21zdHlwZV9wYi5QYXlDb25maWcudG9PYmplY3QsaW5jbHVkZUluc3RhbmNlKX07aWYoaW5jbHVkZUluc3RhbmNlKXtvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2U9bXNnO31yZXR1cm4gb2JqO307fS8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcGx5KCk7cmV0dXJuIHByb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseX0KICovcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1uZXcgY21zdHlwZV9wYi5QYXlDb25maWcoKTtyZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsY21zdHlwZV9wYi5QYXlDb25maWcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTttc2cuYWRkQ29uZmlncyh2YWx1ZSk7YnJlYWs7ZGVmYXVsdDpyZWFkZXIuc2tpcEZpZWxkKCk7YnJlYWs7fX1yZXR1cm4gbXNnO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS4KICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVwbHkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseX0gbWVzc2FnZQogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyCiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRDb25maWdzTGlzdCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZSgxLGYsY21zdHlwZV9wYi5QYXlDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpO319Oy8qKgogKiByZXBlYXRlZCBwYi5QYXlDb25maWcgY29uZmlncyA9IDE7CiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ucGIuUGF5Q29uZmlnPn0KICovcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseS5wcm90b3R5cGUuZ2V0Q29uZmlnc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsY21zdHlwZV9wYi5QYXlDb25maWcsMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLlBheUNvbmZpZz59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcGx5LnByb3RvdHlwZS5zZXRDb25maWdzTGlzdD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsdmFsdWUpO307LyoqCiAqIEBwYXJhbSB7IXByb3RvLnBiLlBheUNvbmZpZz19IG9wdF92YWx1ZQogKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleAogKiBAcmV0dXJuIHshcHJvdG8ucGIuUGF5Q29uZmlnfQogKi9wcm90by5wYi5jbXMuUGF5Q29uZmlnTGlzdFJlcGx5LnByb3RvdHlwZS5hZGRDb25maWdzPWZ1bmN0aW9uKG9wdF92YWx1ZSxvcHRfaW5kZXgpe3JldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDEsb3B0X3ZhbHVlLHByb3RvLnBiLlBheUNvbmZpZyxvcHRfaW5kZXgpO307LyoqCiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLlBheUNvbmZpZ0xpc3RSZXBseX0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5QYXlDb25maWdMaXN0UmVwbHkucHJvdG90eXBlLmNsZWFyQ29uZmlnc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRDb25maWdzTGlzdChbXSk7fTtpZihqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKXsvKioKICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by4KICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuCiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuCiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOgogKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZQogKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OgogKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvbgogKiBAcmV0dXJuIHshT2JqZWN0fQogKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2Upe3JldHVybiBwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4geyFPYmplY3R9CiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXMKICovcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXF1ZXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSxtc2cpe3ZhciBmLG9iaj17YXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywxLDApLGFwcElkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywyLDApLGlzU3Vic2NyaXB0aW9uOmpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdChtc2csMyxmYWxzZSl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihieXRlcyl7dmFyIHJlYWRlcj1uZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO3ZhciBtc2c9bmV3IHByb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdCgpO3JldHVybiBwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZyxyZWFkZXIpO307LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlCiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3R9CiAqL3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24obXNnLHJlYWRlcil7d2hpbGUocmVhZGVyLm5leHRGaWVsZCgpKXtpZihyZWFkZXIuaXNFbmRHcm91cCgpKXticmVhazt9dmFyIGZpZWxkPXJlYWRlci5nZXRGaWVsZE51bWJlcigpO3N3aXRjaChmaWVsZCl7Y2FzZSAxOnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2Nhc2UgMjp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0QXBwSWQodmFsdWUpO2JyZWFrO2Nhc2UgMzp2YXIgdmFsdWU9cmVhZGVyLnJlYWRCb29sKCk7bXNnLnNldElzU3Vic2NyaXB0aW9uKHZhbHVlKTticmVhaztkZWZhdWx0OnJlYWRlci5za2lwRmllbGQoKTticmVhazt9fXJldHVybiBtc2c7fTsvKioKICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcmV0dXJuIHshVWludDhBcnJheX0KICovcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLHdyaXRlcik7cmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlCiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci4KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXF1ZXN0fSBtZXNzYWdlCiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXIKICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlcwogKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0QXJlYUlkKCk7aWYoZiE9PTApe3dyaXRlci53cml0ZVVpbnQzMigxLGYpO31mPW1lc3NhZ2UuZ2V0QXBwSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDIsZik7fWY9bWVzc2FnZS5nZXRJc1N1YnNjcmlwdGlvbigpO2lmKGYpe3dyaXRlci53cml0ZUJvb2woMyxmKTt9fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFyZWFfaWQgPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdC5wcm90b3R5cGUuZ2V0QXJlYUlkPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0QXJlYUlkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgdWludDMyIGFwcF9pZCA9IDI7CiAqIEByZXR1cm4ge251bWJlcn0KICovcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXF1ZXN0LnByb3RvdHlwZS5nZXRBcHBJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3R9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3QucHJvdG90eXBlLnNldEFwcElkPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgYm9vbCBpc19zdWJzY3JpcHRpb24gPSAzOwogKiBAcmV0dXJuIHtib29sZWFufQogKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcXVlc3QucHJvdG90eXBlLmdldElzU3Vic2NyaXB0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsZmFsc2UpO307LyoqCiAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdH0gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVxdWVzdC5wcm90b3R5cGUuc2V0SXNTdWJzY3JpcHRpb249ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsMyx2YWx1ZSk7fTsvKioKICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLgogKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59CiAqIEBjb25zdAogKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5LnJlcGVhdGVkRmllbGRzXz1bMV07aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXBseS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSl7cmV0dXJuIHByb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSx0aGlzKTt9Oy8qKgogKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC4KICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZQogKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHBhcmFtIHshcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXBseX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHkudG9PYmplY3Q9ZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLG1zZyl7dmFyIGYsb2JqPXtjb21tb2RpdGllc0xpc3Q6anNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0Q29tbW9kaXRpZXNMaXN0KCksdXNlcnR5cGVfcGIuQ29tbW9kaXR5LnRvT2JqZWN0LGluY2x1ZGVJbnN0YW5jZSl9O2lmKGluY2x1ZGVJbnN0YW5jZSl7b2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlPW1zZzt9cmV0dXJuIG9iajt9O30vKioKICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5fQogKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGJ5dGVzKXt2YXIgcmVhZGVyPW5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7dmFyIG1zZz1uZXcgcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXBseSgpO3JldHVybiBwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by4KICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS4KICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHl9CiAqL3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9bmV3IHVzZXJ0eXBlX3BiLkNvbW1vZGl0eSgpO3JlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSx1c2VydHlwZV9wYi5Db21tb2RpdHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTttc2cuYWRkQ29tbW9kaXRpZXModmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgd3JpdGVyPW5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyx3cml0ZXIpO3JldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7fTsvKioKICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZQogKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHl9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24obWVzc2FnZSx3cml0ZXIpe3ZhciBmPXVuZGVmaW5lZDtmPW1lc3NhZ2UuZ2V0Q29tbW9kaXRpZXNMaXN0KCk7aWYoZi5sZW5ndGg+MCl7d3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKDEsZix1c2VydHlwZV9wYi5Db21tb2RpdHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpO319Oy8qKgogKiByZXBlYXRlZCBwYi5Db21tb2RpdHkgY29tbW9kaXRpZXMgPSAxOwogKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLnBiLkNvbW1vZGl0eT59CiAqL3Byb3RvLnBiLmNtcy5Db21tb2RpdHlMaXN0UmVwbHkucHJvdG90eXBlLmdldENvbW1vZGl0aWVzTGlzdD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyx1c2VydHlwZV9wYi5Db21tb2RpdHksMSk7fTsvKioKICogQHBhcmFtIHshQXJyYXk8IXByb3RvLnBiLkNvbW1vZGl0eT59IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKKi9wcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5LnByb3RvdHlwZS5zZXRDb21tb2RpdGllc0xpc3Q9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxLHZhbHVlKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5Db21tb2RpdHk9fSBvcHRfdmFsdWUKICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXgKICogQHJldHVybiB7IXByb3RvLnBiLkNvbW1vZGl0eX0KICovcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXBseS5wcm90b3R5cGUuYWRkQ29tbW9kaXRpZXM9ZnVuY3Rpb24ob3B0X3ZhbHVlLG9wdF9pbmRleCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMSxvcHRfdmFsdWUscHJvdG8ucGIuQ29tbW9kaXR5LG9wdF9pbmRleCk7fTsvKioKICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQ29tbW9kaXR5TGlzdFJlcGx5fSByZXR1cm5zIHRoaXMKICovcHJvdG8ucGIuY21zLkNvbW1vZGl0eUxpc3RSZXBseS5wcm90b3R5cGUuY2xlYXJDb21tb2RpdGllc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRDb21tb2RpdGllc0xpc3QoW10pO307aWYoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCl7LyoqCiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uCiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLgogKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LgogKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZToKICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUKICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDoKICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb24KICogQHJldHVybiB7IU9iamVjdH0KICovcHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKXtyZXR1cm4gcHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsdGhpcyk7fTsvKioKICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuCiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGUKICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6CiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVua30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLgogKiBAcmV0dXJuIHshT2JqZWN0fQogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVuay50b09iamVjdD1mdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsbXNnKXt2YXIgZixvYmo9e29mZnNldDpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMSwwKSxmaWxlbmFtZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMiwiIiksdHlwZTpqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csMywwKSxjb250ZW50Om1zZy5nZXRDb250ZW50X2FzQjY0KCksYXJlYUlkOmpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZyw1LDApfTtpZihpbmNsdWRlSW5zdGFuY2Upe29iai4kanNwYk1lc3NhZ2VJbnN0YW5jZT1tc2c7fXJldHVybiBvYmo7fTt9LyoqCiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLgogKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rfQogKi9wcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYnl0ZXMpe3ZhciByZWFkZXI9bmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTt2YXIgbXNnPW5ldyBwcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsoKTtyZXR1cm4gcHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2cscmVhZGVyKTt9Oy8qKgogKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZQogKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuCiAqIEBwYXJhbSB7IXByb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVua30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLgogKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLgogKiBAcmV0dXJuIHshcHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rfQogKi9wcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKG1zZyxyZWFkZXIpe3doaWxlKHJlYWRlci5uZXh0RmllbGQoKSl7aWYocmVhZGVyLmlzRW5kR3JvdXAoKSl7YnJlYWs7fXZhciBmaWVsZD1yZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtzd2l0Y2goZmllbGQpe2Nhc2UgMTp2YXIgdmFsdWU9cmVhZGVyLnJlYWRVaW50MzIoKTttc2cuc2V0T2Zmc2V0KHZhbHVlKTticmVhaztjYXNlIDI6dmFyIHZhbHVlPXJlYWRlci5yZWFkU3RyaW5nKCk7bXNnLnNldEZpbGVuYW1lKHZhbHVlKTticmVhaztjYXNlIDM6dmFyIHZhbHVlPXJlYWRlci5yZWFkRW51bSgpO21zZy5zZXRUeXBlKHZhbHVlKTticmVhaztjYXNlIDQ6dmFyIHZhbHVlPXJlYWRlci5yZWFkQnl0ZXMoKTttc2cuc2V0Q29udGVudCh2YWx1ZSk7YnJlYWs7Y2FzZSA1OnZhciB2YWx1ZT1yZWFkZXIucmVhZFVpbnQzMigpO21zZy5zZXRBcmVhSWQodmFsdWUpO2JyZWFrO2RlZmF1bHQ6cmVhZGVyLnNraXBGaWVsZCgpO2JyZWFrO319cmV0dXJuIG1zZzt9Oy8qKgogKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuCiAqIEByZXR1cm4geyFVaW50OEFycmF5fQogKi9wcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciB3cml0ZXI9bmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7cHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsd3JpdGVyKTtyZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO307LyoqCiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUKICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLgogKiBAcGFyYW0geyFwcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmt9IG1lc3NhZ2UKICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlcgogKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzCiAqL3Byb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVuay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihtZXNzYWdlLHdyaXRlcil7dmFyIGY9dW5kZWZpbmVkO2Y9bWVzc2FnZS5nZXRPZmZzZXQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDEsZik7fWY9bWVzc2FnZS5nZXRGaWxlbmFtZSgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZVN0cmluZygyLGYpO31mPW1lc3NhZ2UuZ2V0VHlwZSgpO2lmKGYhPT0wLjApe3dyaXRlci53cml0ZUVudW0oMyxmKTt9Zj1tZXNzYWdlLmdldENvbnRlbnRfYXNVOCgpO2lmKGYubGVuZ3RoPjApe3dyaXRlci53cml0ZUJ5dGVzKDQsZik7fWY9bWVzc2FnZS5nZXRBcmVhSWQoKTtpZihmIT09MCl7d3JpdGVyLndyaXRlVWludDMyKDUsZik7fX07LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBvZmZzZXQgPSAxOwogKiBAcmV0dXJuIHtudW1iZXJ9CiAqL3Byb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVuay5wcm90b3R5cGUuZ2V0T2Zmc2V0PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKTt9Oy8qKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVua30gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVuay5wcm90b3R5cGUuc2V0T2Zmc2V0PWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSx2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgc3RyaW5nIGZpbGVuYW1lID0gMjsKICogQHJldHVybiB7c3RyaW5nfQogKi9wcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsucHJvdG90eXBlLmdldEZpbGVuYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwiIik7fTsvKioKICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmt9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsucHJvdG90eXBlLnNldEZpbGVuYW1lPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsMix2YWx1ZSk7fTsvKioKICogb3B0aW9uYWwgcGIuRmlsZVR5cGUgdHlwZSA9IDM7CiAqIEByZXR1cm4geyFwcm90by5wYi5GaWxlVHlwZX0KICovcHJvdG8ucGIuY21zLkFkbWluRmlsZUNodW5rLnByb3RvdHlwZS5nZXRUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKTt9Oy8qKgogKiBAcGFyYW0geyFwcm90by5wYi5GaWxlVHlwZX0gdmFsdWUKICogQHJldHVybiB7IXByb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVua30gcmV0dXJucyB0aGlzCiAqL3Byb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVuay5wcm90b3R5cGUuc2V0VHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywzLHZhbHVlKTt9Oy8qKgogKiBvcHRpb25hbCBieXRlcyBjb250ZW50ID0gNDsKICogQHJldHVybiB7c3RyaW5nfQogKi9wcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsucHJvdG90eXBlLmdldENvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LCIiKTt9Oy8qKgogKiBvcHRpb25hbCBieXRlcyBjb250ZW50ID0gNDsKICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0Q29udGVudCgpYAogKiBAcmV0dXJuIHtzdHJpbmd9CiAqL3Byb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVuay5wcm90b3R5cGUuZ2V0Q29udGVudF9hc0I2ND1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENvbnRlbnQoKSk7fTsvKioKICogb3B0aW9uYWwgYnl0ZXMgY29udGVudCA9IDQ7CiAqIE5vdGUgdGhhdCBVaW50OEFycmF5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGJyb3dzZXJzLgogKiBAc2VlIGh0dHA6Ly9jYW5pdXNlLmNvbS9VaW50OEFycmF5CiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldENvbnRlbnQoKWAKICogQHJldHVybiB7IVVpbnQ4QXJyYXl9CiAqL3Byb3RvLnBiLmNtcy5BZG1pbkZpbGVDaHVuay5wcm90b3R5cGUuZ2V0Q29udGVudF9hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDb250ZW50KCkpO307LyoqCiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmt9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsucHJvdG90eXBlLnNldENvbnRlbnQ9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDQsdmFsdWUpO307LyoqCiAqIG9wdGlvbmFsIHVpbnQzMiBhcmVhX2lkID0gNTsKICogQHJldHVybiB7bnVtYmVyfQogKi9wcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsucHJvdG90eXBlLmdldEFyZWFJZD1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCk7fTsvKioKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAqIEByZXR1cm4geyFwcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmt9IHJldHVybnMgdGhpcwogKi9wcm90by5wYi5jbXMuQWRtaW5GaWxlQ2h1bmsucHJvdG90eXBlLnNldEFyZWFJZD1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsdmFsdWUpO307Z29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMscHJvdG8ucGIuY21zKTs="},null]}