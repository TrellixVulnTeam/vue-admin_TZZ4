{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/thread-loader/dist/cjs.js!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/develop/iwork/kafo/vue-admin/src/views/home/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/views/home/Home.vue","mtime":1634702415221},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}