{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/src/proto/js/usertype_pb.js","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/proto/js/usertype_pb.js","mtime":1630313405085},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:// source: usertype.proto

/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');

var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.pb.AnchorInfo', null, global);
goog.exportSymbol('proto.pb.AnchorLevel', null, global);
goog.exportSymbol('proto.pb.Approximation', null, global);
goog.exportSymbol('proto.pb.Area', null, global);
goog.exportSymbol('proto.pb.AuthType', null, global);
goog.exportSymbol('proto.pb.BannerConfig', null, global);
goog.exportSymbol('proto.pb.BlockStatus', null, global);
goog.exportSymbol('proto.pb.CallRecord', null, global);
goog.exportSymbol('proto.pb.CallType', null, global);
goog.exportSymbol('proto.pb.CaptureStatus', null, global);
goog.exportSymbol('proto.pb.CheckinConfig', null, global);
goog.exportSymbol('proto.pb.CheckinRecord', null, global);
goog.exportSymbol('proto.pb.Commodity', null, global);
goog.exportSymbol('proto.pb.CountryConfig', null, global);
goog.exportSymbol('proto.pb.CurrencyType', null, global);
goog.exportSymbol('proto.pb.Device', null, global);
goog.exportSymbol('proto.pb.Empty', null, global);
goog.exportSymbol('proto.pb.EntityAuth', null, global);
goog.exportSymbol('proto.pb.EntityType', null, global);
goog.exportSymbol('proto.pb.ErrorCode', null, global);
goog.exportSymbol('proto.pb.FileChunk', null, global);
goog.exportSymbol('proto.pb.FileRecord', null, global);
goog.exportSymbol('proto.pb.FileType', null, global);
goog.exportSymbol('proto.pb.FollowStatus', null, global);
goog.exportSymbol('proto.pb.GenderType', null, global);
goog.exportSymbol('proto.pb.GiftConfig', null, global);
goog.exportSymbol('proto.pb.GiftRecord', null, global);
goog.exportSymbol('proto.pb.GiftType', null, global);
goog.exportSymbol('proto.pb.HangType', null, global);
goog.exportSymbol('proto.pb.NetworkType', null, global);
goog.exportSymbol('proto.pb.OccupationType', null, global);
goog.exportSymbol('proto.pb.OnlineStatus', null, global);
goog.exportSymbol('proto.pb.OsType', null, global);
goog.exportSymbol('proto.pb.PayChannel', null, global);
goog.exportSymbol('proto.pb.PayRecord', null, global);
goog.exportSymbol('proto.pb.PayStatus', null, global);
goog.exportSymbol('proto.pb.PayType', null, global);
goog.exportSymbol('proto.pb.Relation', null, global);
goog.exportSymbol('proto.pb.RelationType', null, global);
goog.exportSymbol('proto.pb.ReviewStatus', null, global);
goog.exportSymbol('proto.pb.StreamMessage', null, global);
goog.exportSymbol('proto.pb.StreamMessage.AbortBody', null, global);
goog.exportSymbol('proto.pb.StreamMessage.AiCallBody', null, global);
goog.exportSymbol('proto.pb.StreamMessage.BodyCase', null, global);
goog.exportSymbol('proto.pb.StreamMessage.MessageType', null, global);
goog.exportSymbol('proto.pb.StreamMessage.StatusBody', null, global);
goog.exportSymbol('proto.pb.StreamMessage.SubscribeBody', null, global);
goog.exportSymbol('proto.pb.StreamMessage.VirtualCallBody', null, global);
goog.exportSymbol('proto.pb.Subscription', null, global);
goog.exportSymbol('proto.pb.SubscriptionPeriod', null, global);
goog.exportSymbol('proto.pb.SubscriptionStatus', null, global);
goog.exportSymbol('proto.pb.ToyaStatus', null, global);
goog.exportSymbol('proto.pb.Transaction', null, global);
goog.exportSymbol('proto.pb.User', null, global);
goog.exportSymbol('proto.pb.ViolationScene', null, global);
goog.exportSymbol('proto.pb.ViolationType', null, global);
goog.exportSymbol('proto.pb.VipConfig', null, global);
goog.exportSymbol('proto.pb.VipRecord', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */

proto.pb.Area = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Area.repeatedFields_, null);
};

goog.inherits(proto.pb.Area, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Area.displayName = 'proto.pb.Area';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.Device = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.Device, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Device.displayName = 'proto.pb.Device';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.User = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.User.repeatedFields_, null);
};

goog.inherits(proto.pb.User, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.User.displayName = 'proto.pb.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.AnchorInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.AnchorInfo.repeatedFields_, null);
};

goog.inherits(proto.pb.AnchorInfo, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.AnchorInfo.displayName = 'proto.pb.AnchorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.Relation = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Relation.repeatedFields_, null);
};

goog.inherits(proto.pb.Relation, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Relation.displayName = 'proto.pb.Relation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.EntityAuth = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.EntityAuth, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.EntityAuth.displayName = 'proto.pb.EntityAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.CheckinConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.CheckinConfig, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CheckinConfig.displayName = 'proto.pb.CheckinConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.CheckinRecord = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.CheckinRecord, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CheckinRecord.displayName = 'proto.pb.CheckinRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.CallRecord = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.CallRecord, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CallRecord.displayName = 'proto.pb.CallRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.GiftConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.GiftConfig, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GiftConfig.displayName = 'proto.pb.GiftConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.VipConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.VipConfig, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.VipConfig.displayName = 'proto.pb.VipConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.GiftRecord = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.GiftRecord, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GiftRecord.displayName = 'proto.pb.GiftRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.VipRecord = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.VipRecord, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.VipRecord.displayName = 'proto.pb.VipRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.Commodity = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.Commodity, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Commodity.displayName = 'proto.pb.Commodity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.BannerConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.BannerConfig, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BannerConfig.displayName = 'proto.pb.BannerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.Subscription = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.Subscription, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Subscription.displayName = 'proto.pb.Subscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.Approximation = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.Approximation, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Approximation.displayName = 'proto.pb.Approximation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.CountryConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.CountryConfig.repeatedFields_, null);
};

goog.inherits(proto.pb.CountryConfig, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CountryConfig.displayName = 'proto.pb.CountryConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.PayChannel = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.PayChannel.repeatedFields_, null);
};

goog.inherits(proto.pb.PayChannel, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PayChannel.displayName = 'proto.pb.PayChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.PayRecord = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.PayRecord, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PayRecord.displayName = 'proto.pb.PayRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.Transaction = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.Transaction, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Transaction.displayName = 'proto.pb.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.FileChunk = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.FileChunk, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FileChunk.displayName = 'proto.pb.FileChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.FileRecord = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.FileRecord, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FileRecord.displayName = 'proto.pb.FileRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.StreamMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.StreamMessage.oneofGroups_);
};

goog.inherits(proto.pb.StreamMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.StreamMessage.displayName = 'proto.pb.StreamMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.StreamMessage.SubscribeBody = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.StreamMessage.SubscribeBody.repeatedFields_, null);
};

goog.inherits(proto.pb.StreamMessage.SubscribeBody, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.StreamMessage.SubscribeBody.displayName = 'proto.pb.StreamMessage.SubscribeBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.StreamMessage.AbortBody = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.StreamMessage.AbortBody, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.StreamMessage.AbortBody.displayName = 'proto.pb.StreamMessage.AbortBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.StreamMessage.StatusBody = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.StreamMessage.StatusBody, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.StreamMessage.StatusBody.displayName = 'proto.pb.StreamMessage.StatusBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.StreamMessage.AiCallBody = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.StreamMessage.AiCallBody, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.StreamMessage.AiCallBody.displayName = 'proto.pb.StreamMessage.AiCallBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.StreamMessage.VirtualCallBody = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.StreamMessage.VirtualCallBody, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.StreamMessage.VirtualCallBody.displayName = 'proto.pb.StreamMessage.VirtualCallBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.pb.Empty = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.pb.Empty, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Empty.displayName = 'proto.pb.Empty';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.pb.Area.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.Area.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.Area.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.Area} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.Area.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      title: jspb.Message.getFieldWithDefault(msg, 2, ""),
      name: jspb.Message.getFieldWithDefault(msg, 3, ""),
      countriesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
      lang: jspb.Message.getFieldWithDefault(msg, 5, ""),
      enable: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 10, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 11, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Area}
 */


proto.pb.Area.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Area();
  return proto.pb.Area.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Area} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Area}
 */


proto.pb.Area.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setTitle(value);
        break;

      case 3:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 4:
        var value =
        /** @type {string} */
        reader.readString();
        msg.addCountries(value);
        break;

      case 5:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setLang(value);
        break;

      case 6:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setEnable(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 11:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.Area.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.Area.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Area} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.Area.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getTitle();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getName();

  if (f.length > 0) {
    writer.writeString(3, f);
  }

  f = message.getCountriesList();

  if (f.length > 0) {
    writer.writeRepeatedString(4, f);
  }

  f = message.getLang();

  if (f.length > 0) {
    writer.writeString(5, f);
  }

  f = message.getEnable();

  if (f) {
    writer.writeBool(6, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(11, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.Area.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string title = 2;
 * @return {string}
 */


proto.pb.Area.prototype.getTitle = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.setTitle = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string name = 3;
 * @return {string}
 */


proto.pb.Area.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * repeated string countries = 4;
 * @return {!Array<string>}
 */


proto.pb.Area.prototype.getCountriesList = function () {
  return (
    /** @type {!Array<string>} */
    jspb.Message.getRepeatedField(this, 4)
  );
};
/**
 * @param {!Array<string>} value
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.setCountriesList = function (value) {
  return jspb.Message.setField(this, 4, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.addCountries = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.clearCountriesList = function () {
  return this.setCountriesList([]);
};
/**
 * optional string lang = 5;
 * @return {string}
 */


proto.pb.Area.prototype.getLang = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 5, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.setLang = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional bool enable = 6;
 * @return {boolean}
 */


proto.pb.Area.prototype.getEnable = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 6, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.setEnable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};
/**
 * optional uint32 updated_at = 10;
 * @return {number}
 */


proto.pb.Area.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional uint32 created_at = 11;
 * @return {number}
 */


proto.pb.Area.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 11, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Area} returns this
 */


proto.pb.Area.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.Device.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.Device.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.Device} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.Device.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
      deviceBrand: jspb.Message.getFieldWithDefault(msg, 3, ""),
      deviceModel: jspb.Message.getFieldWithDefault(msg, 4, ""),
      osVersion: jspb.Message.getFieldWithDefault(msg, 5, ""),
      osType: jspb.Message.getFieldWithDefault(msg, 6, 0),
      blocked: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
      reason: jspb.Message.getFieldWithDefault(msg, 8, ""),
      releaseAt: jspb.Message.getFieldWithDefault(msg, 9, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Device}
 */


proto.pb.Device.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Device();
  return proto.pb.Device.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Device}
 */


proto.pb.Device.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setDeviceId(value);
        break;

      case 3:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setDeviceBrand(value);
        break;

      case 4:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setDeviceModel(value);
        break;

      case 5:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setOsVersion(value);
        break;

      case 6:
        var value =
        /** @type {!proto.pb.OsType} */
        reader.readEnum();
        msg.setOsType(value);
        break;

      case 7:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setBlocked(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setReason(value);
        break;

      case 9:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setReleaseAt(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.Device.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.Device.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getDeviceId();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getDeviceBrand();

  if (f.length > 0) {
    writer.writeString(3, f);
  }

  f = message.getDeviceModel();

  if (f.length > 0) {
    writer.writeString(4, f);
  }

  f = message.getOsVersion();

  if (f.length > 0) {
    writer.writeString(5, f);
  }

  f = message.getOsType();

  if (f !== 0.0) {
    writer.writeEnum(6, f);
  }

  f = message.getBlocked();

  if (f) {
    writer.writeBool(7, f);
  }

  f = message.getReason();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getReleaseAt();

  if (f !== 0) {
    writer.writeUint32(9, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.Device.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string device_id = 2;
 * @return {string}
 */


proto.pb.Device.prototype.getDeviceId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setDeviceId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string device_brand = 3;
 * @return {string}
 */


proto.pb.Device.prototype.getDeviceBrand = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setDeviceBrand = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string device_model = 4;
 * @return {string}
 */


proto.pb.Device.prototype.getDeviceModel = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setDeviceModel = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string os_version = 5;
 * @return {string}
 */


proto.pb.Device.prototype.getOsVersion = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 5, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setOsVersion = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional OsType os_type = 6;
 * @return {!proto.pb.OsType}
 */


proto.pb.Device.prototype.getOsType = function () {
  return (
    /** @type {!proto.pb.OsType} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {!proto.pb.OsType} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setOsType = function (value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};
/**
 * optional bool blocked = 7;
 * @return {boolean}
 */


proto.pb.Device.prototype.getBlocked = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 7, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setBlocked = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};
/**
 * optional string reason = 8;
 * @return {string}
 */


proto.pb.Device.prototype.getReason = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setReason = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional uint32 release_at = 9;
 * @return {number}
 */


proto.pb.Device.prototype.getReleaseAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 9, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setReleaseAt = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.Device.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.Device.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Device} returns this
 */


proto.pb.Device.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.pb.User.repeatedFields_ = [100];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.User.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.User.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.User} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.User.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      version: jspb.Message.getFieldWithDefault(msg, 3, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 4, 0),
      osType: jspb.Message.getFieldWithDefault(msg, 5, 0),
      country: jspb.Message.getFieldWithDefault(msg, 6, ""),
      lang: jspb.Message.getFieldWithDefault(msg, 7, ""),
      onlineStatus: jspb.Message.getFieldWithDefault(msg, 8, 0),
      blockStatus: jspb.Message.getFieldWithDefault(msg, 9, 0),
      balance: jspb.Message.getFieldWithDefault(msg, 10, 0),
      lockedBalance: jspb.Message.getFieldWithDefault(msg, 11, 0),
      expense: jspb.Message.getFieldWithDefault(msg, 12, 0),
      reward: jspb.Message.getFieldWithDefault(msg, 13, 0),
      deposit: jspb.Message.getFieldWithDefault(msg, 14, 0),
      vipEndAt: jspb.Message.getFieldWithDefault(msg, 15, 0),
      messageQuota: jspb.Message.getFieldWithDefault(msg, 16, 0),
      messageUsed: jspb.Message.getFieldWithDefault(msg, 17, 0),
      checkinDays: jspb.Message.getFieldWithDefault(msg, 18, 0),
      checkinAt: jspb.Message.getFieldWithDefault(msg, 19, 0),
      fansCount: jspb.Message.getFieldWithDefault(msg, 20, 0),
      nickname: jspb.Message.getFieldWithDefault(msg, 21, ""),
      gender: jspb.Message.getFieldWithDefault(msg, 22, 0),
      birthday: jspb.Message.getFieldWithDefault(msg, 23, 0),
      avatar: jspb.Message.getFieldWithDefault(msg, 24, ""),
      signature: jspb.Message.getFieldWithDefault(msg, 25, ""),
      occupation: jspb.Message.getFieldWithDefault(msg, 26, 0),
      offlineAt: jspb.Message.getFieldWithDefault(msg, 27, 0),
      onlineIp: jspb.Message.getFieldWithDefault(msg, 28, ""),
      longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 29, 0.0),
      latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 30, 0.0),
      createIp: jspb.Message.getFieldWithDefault(msg, 31, ""),
      deviceId: jspb.Message.getFieldWithDefault(msg, 32, 0),
      networkType: jspb.Message.getFieldWithDefault(msg, 33, 0),
      accessToken: jspb.Message.getFieldWithDefault(msg, 34, ""),
      accessExpireAt: jspb.Message.getFieldWithDefault(msg, 35, 0),
      blockReason: jspb.Message.getFieldWithDefault(msg, 36, ""),
      anonymous: jspb.Message.getBooleanFieldWithDefault(msg, 37, false),
      agoraRtmToken: jspb.Message.getFieldWithDefault(msg, 38, ""),
      agoraRtmExpireAt: jspb.Message.getFieldWithDefault(msg, 39, 0),
      rcToken: jspb.Message.getFieldWithDefault(msg, 40, ""),
      rcExpireAt: jspb.Message.getFieldWithDefault(msg, 41, 0),
      installId: jspb.Message.getFieldWithDefault(msg, 42, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 60, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 61, 0),
      toyaId: jspb.Message.getFieldWithDefault(msg, 62, 0),
      toyaSyncedAt: jspb.Message.getFieldWithDefault(msg, 63, 0),
      toyaStatus: jspb.Message.getFieldWithDefault(msg, 64, 0),
      authsList: jspb.Message.toObjectList(msg.getAuthsList(), proto.pb.EntityAuth.toObject, includeInstance),
      isNew: jspb.Message.getBooleanFieldWithDefault(msg, 101, false),
      followStatus: jspb.Message.getFieldWithDefault(msg, 102, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.User}
 */


proto.pb.User.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.User();
  return proto.pb.User.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.User}
 */


proto.pb.User.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setVersion(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 5:
        var value =
        /** @type {!proto.pb.OsType} */
        reader.readEnum();
        msg.setOsType(value);
        break;

      case 6:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setCountry(value);
        break;

      case 7:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setLang(value);
        break;

      case 8:
        var value =
        /** @type {!proto.pb.OnlineStatus} */
        reader.readEnum();
        msg.setOnlineStatus(value);
        break;

      case 9:
        var value =
        /** @type {!proto.pb.BlockStatus} */
        reader.readEnum();
        msg.setBlockStatus(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setBalance(value);
        break;

      case 11:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setLockedBalance(value);
        break;

      case 12:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setExpense(value);
        break;

      case 13:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setReward(value);
        break;

      case 14:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setDeposit(value);
        break;

      case 15:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setVipEndAt(value);
        break;

      case 16:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setMessageQuota(value);
        break;

      case 17:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setMessageUsed(value);
        break;

      case 18:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCheckinDays(value);
        break;

      case 19:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCheckinAt(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setFansCount(value);
        break;

      case 21:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setNickname(value);
        break;

      case 22:
        var value =
        /** @type {!proto.pb.GenderType} */
        reader.readEnum();
        msg.setGender(value);
        break;

      case 23:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setBirthday(value);
        break;

      case 24:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAvatar(value);
        break;

      case 25:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setSignature(value);
        break;

      case 26:
        var value =
        /** @type {!proto.pb.OccupationType} */
        reader.readEnum();
        msg.setOccupation(value);
        break;

      case 27:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setOfflineAt(value);
        break;

      case 28:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setOnlineIp(value);
        break;

      case 29:
        var value =
        /** @type {number} */
        reader.readFloat();
        msg.setLongitude(value);
        break;

      case 30:
        var value =
        /** @type {number} */
        reader.readFloat();
        msg.setLatitude(value);
        break;

      case 31:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setCreateIp(value);
        break;

      case 32:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setDeviceId(value);
        break;

      case 33:
        var value =
        /** @type {!proto.pb.NetworkType} */
        reader.readEnum();
        msg.setNetworkType(value);
        break;

      case 34:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAccessToken(value);
        break;

      case 35:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAccessExpireAt(value);
        break;

      case 36:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setBlockReason(value);
        break;

      case 37:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setAnonymous(value);
        break;

      case 38:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAgoraRtmToken(value);
        break;

      case 39:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAgoraRtmExpireAt(value);
        break;

      case 40:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setRcToken(value);
        break;

      case 41:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setRcExpireAt(value);
        break;

      case 42:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setInstallId(value);
        break;

      case 60:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 61:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      case 62:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setToyaId(value);
        break;

      case 63:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setToyaSyncedAt(value);
        break;

      case 64:
        var value =
        /** @type {!proto.pb.ToyaStatus} */
        reader.readEnum();
        msg.setToyaStatus(value);
        break;

      case 100:
        var value = new proto.pb.EntityAuth();
        reader.readMessage(value, proto.pb.EntityAuth.deserializeBinaryFromReader);
        msg.addAuths(value);
        break;

      case 101:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setIsNew(value);
        break;

      case 102:
        var value =
        /** @type {!proto.pb.FollowStatus} */
        reader.readEnum();
        msg.setFollowStatus(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.User.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.User.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getVersion();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }

  f = message.getOsType();

  if (f !== 0.0) {
    writer.writeEnum(5, f);
  }

  f = message.getCountry();

  if (f.length > 0) {
    writer.writeString(6, f);
  }

  f = message.getLang();

  if (f.length > 0) {
    writer.writeString(7, f);
  }

  f = message.getOnlineStatus();

  if (f !== 0.0) {
    writer.writeEnum(8, f);
  }

  f = message.getBlockStatus();

  if (f !== 0.0) {
    writer.writeEnum(9, f);
  }

  f = message.getBalance();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }

  f = message.getLockedBalance();

  if (f !== 0) {
    writer.writeUint32(11, f);
  }

  f = message.getExpense();

  if (f !== 0) {
    writer.writeUint32(12, f);
  }

  f = message.getReward();

  if (f !== 0) {
    writer.writeUint32(13, f);
  }

  f = message.getDeposit();

  if (f !== 0) {
    writer.writeUint32(14, f);
  }

  f = message.getVipEndAt();

  if (f !== 0) {
    writer.writeUint32(15, f);
  }

  f = message.getMessageQuota();

  if (f !== 0) {
    writer.writeUint32(16, f);
  }

  f = message.getMessageUsed();

  if (f !== 0) {
    writer.writeUint32(17, f);
  }

  f = message.getCheckinDays();

  if (f !== 0) {
    writer.writeUint32(18, f);
  }

  f = message.getCheckinAt();

  if (f !== 0) {
    writer.writeUint32(19, f);
  }

  f = message.getFansCount();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getNickname();

  if (f.length > 0) {
    writer.writeString(21, f);
  }

  f = message.getGender();

  if (f !== 0.0) {
    writer.writeEnum(22, f);
  }

  f = message.getBirthday();

  if (f !== 0) {
    writer.writeUint32(23, f);
  }

  f = message.getAvatar();

  if (f.length > 0) {
    writer.writeString(24, f);
  }

  f = message.getSignature();

  if (f.length > 0) {
    writer.writeString(25, f);
  }

  f = message.getOccupation();

  if (f !== 0.0) {
    writer.writeEnum(26, f);
  }

  f = message.getOfflineAt();

  if (f !== 0) {
    writer.writeUint32(27, f);
  }

  f = message.getOnlineIp();

  if (f.length > 0) {
    writer.writeString(28, f);
  }

  f = message.getLongitude();

  if (f !== 0.0) {
    writer.writeFloat(29, f);
  }

  f = message.getLatitude();

  if (f !== 0.0) {
    writer.writeFloat(30, f);
  }

  f = message.getCreateIp();

  if (f.length > 0) {
    writer.writeString(31, f);
  }

  f = message.getDeviceId();

  if (f !== 0) {
    writer.writeUint32(32, f);
  }

  f = message.getNetworkType();

  if (f !== 0.0) {
    writer.writeEnum(33, f);
  }

  f = message.getAccessToken();

  if (f.length > 0) {
    writer.writeString(34, f);
  }

  f = message.getAccessExpireAt();

  if (f !== 0) {
    writer.writeUint32(35, f);
  }

  f = message.getBlockReason();

  if (f.length > 0) {
    writer.writeString(36, f);
  }

  f = message.getAnonymous();

  if (f) {
    writer.writeBool(37, f);
  }

  f = message.getAgoraRtmToken();

  if (f.length > 0) {
    writer.writeString(38, f);
  }

  f = message.getAgoraRtmExpireAt();

  if (f !== 0) {
    writer.writeUint32(39, f);
  }

  f = message.getRcToken();

  if (f.length > 0) {
    writer.writeString(40, f);
  }

  f = message.getRcExpireAt();

  if (f !== 0) {
    writer.writeUint32(41, f);
  }

  f = message.getInstallId();

  if (f !== 0) {
    writer.writeUint32(42, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(60, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(61, f);
  }

  f = message.getToyaId();

  if (f !== 0) {
    writer.writeUint32(62, f);
  }

  f = message.getToyaSyncedAt();

  if (f !== 0) {
    writer.writeUint32(63, f);
  }

  f = message.getToyaStatus();

  if (f !== 0.0) {
    writer.writeEnum(64, f);
  }

  f = message.getAuthsList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(100, f, proto.pb.EntityAuth.serializeBinaryToWriter);
  }

  f = message.getIsNew();

  if (f) {
    writer.writeBool(101, f);
  }

  f = message.getFollowStatus();

  if (f !== 0.0) {
    writer.writeEnum(102, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.User.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.User.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 version = 3;
 * @return {number}
 */


proto.pb.User.prototype.getVersion = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional uint32 area_id = 4;
 * @return {number}
 */


proto.pb.User.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional OsType os_type = 5;
 * @return {!proto.pb.OsType}
 */


proto.pb.User.prototype.getOsType = function () {
  return (
    /** @type {!proto.pb.OsType} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {!proto.pb.OsType} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setOsType = function (value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};
/**
 * optional string country = 6;
 * @return {string}
 */


proto.pb.User.prototype.getCountry = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 6, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setCountry = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * optional string lang = 7;
 * @return {string}
 */


proto.pb.User.prototype.getLang = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 7, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setLang = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional OnlineStatus online_status = 8;
 * @return {!proto.pb.OnlineStatus}
 */


proto.pb.User.prototype.getOnlineStatus = function () {
  return (
    /** @type {!proto.pb.OnlineStatus} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {!proto.pb.OnlineStatus} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setOnlineStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};
/**
 * optional BlockStatus block_status = 9;
 * @return {!proto.pb.BlockStatus}
 */


proto.pb.User.prototype.getBlockStatus = function () {
  return (
    /** @type {!proto.pb.BlockStatus} */
    jspb.Message.getFieldWithDefault(this, 9, 0)
  );
};
/**
 * @param {!proto.pb.BlockStatus} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setBlockStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};
/**
 * optional uint32 balance = 10;
 * @return {number}
 */


proto.pb.User.prototype.getBalance = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setBalance = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional uint32 locked_balance = 11;
 * @return {number}
 */


proto.pb.User.prototype.getLockedBalance = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 11, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setLockedBalance = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};
/**
 * optional uint32 expense = 12;
 * @return {number}
 */


proto.pb.User.prototype.getExpense = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 12, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setExpense = function (value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};
/**
 * optional uint32 reward = 13;
 * @return {number}
 */


proto.pb.User.prototype.getReward = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 13, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setReward = function (value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};
/**
 * optional uint32 deposit = 14;
 * @return {number}
 */


proto.pb.User.prototype.getDeposit = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 14, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setDeposit = function (value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};
/**
 * optional uint32 vip_end_at = 15;
 * @return {number}
 */


proto.pb.User.prototype.getVipEndAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 15, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setVipEndAt = function (value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};
/**
 * optional uint32 message_quota = 16;
 * @return {number}
 */


proto.pb.User.prototype.getMessageQuota = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 16, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setMessageQuota = function (value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};
/**
 * optional uint32 message_used = 17;
 * @return {number}
 */


proto.pb.User.prototype.getMessageUsed = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 17, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setMessageUsed = function (value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};
/**
 * optional uint32 checkin_days = 18;
 * @return {number}
 */


proto.pb.User.prototype.getCheckinDays = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 18, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setCheckinDays = function (value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};
/**
 * optional uint32 checkin_at = 19;
 * @return {number}
 */


proto.pb.User.prototype.getCheckinAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 19, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setCheckinAt = function (value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};
/**
 * optional uint32 fans_count = 20;
 * @return {number}
 */


proto.pb.User.prototype.getFansCount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setFansCount = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional string nickname = 21;
 * @return {string}
 */


proto.pb.User.prototype.getNickname = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 21, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setNickname = function (value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};
/**
 * optional GenderType gender = 22;
 * @return {!proto.pb.GenderType}
 */


proto.pb.User.prototype.getGender = function () {
  return (
    /** @type {!proto.pb.GenderType} */
    jspb.Message.getFieldWithDefault(this, 22, 0)
  );
};
/**
 * @param {!proto.pb.GenderType} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setGender = function (value) {
  return jspb.Message.setProto3EnumField(this, 22, value);
};
/**
 * optional uint32 birthday = 23;
 * @return {number}
 */


proto.pb.User.prototype.getBirthday = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 23, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setBirthday = function (value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};
/**
 * optional string avatar = 24;
 * @return {string}
 */


proto.pb.User.prototype.getAvatar = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 24, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setAvatar = function (value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};
/**
 * optional string signature = 25;
 * @return {string}
 */


proto.pb.User.prototype.getSignature = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 25, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setSignature = function (value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};
/**
 * optional OccupationType occupation = 26;
 * @return {!proto.pb.OccupationType}
 */


proto.pb.User.prototype.getOccupation = function () {
  return (
    /** @type {!proto.pb.OccupationType} */
    jspb.Message.getFieldWithDefault(this, 26, 0)
  );
};
/**
 * @param {!proto.pb.OccupationType} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setOccupation = function (value) {
  return jspb.Message.setProto3EnumField(this, 26, value);
};
/**
 * optional uint32 offline_at = 27;
 * @return {number}
 */


proto.pb.User.prototype.getOfflineAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 27, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setOfflineAt = function (value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};
/**
 * optional string online_ip = 28;
 * @return {string}
 */


proto.pb.User.prototype.getOnlineIp = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 28, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setOnlineIp = function (value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};
/**
 * optional float longitude = 29;
 * @return {number}
 */


proto.pb.User.prototype.getLongitude = function () {
  return (
    /** @type {number} */
    jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setLongitude = function (value) {
  return jspb.Message.setProto3FloatField(this, 29, value);
};
/**
 * optional float latitude = 30;
 * @return {number}
 */


proto.pb.User.prototype.getLatitude = function () {
  return (
    /** @type {number} */
    jspb.Message.getFloatingPointFieldWithDefault(this, 30, 0.0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setLatitude = function (value) {
  return jspb.Message.setProto3FloatField(this, 30, value);
};
/**
 * optional string create_ip = 31;
 * @return {string}
 */


proto.pb.User.prototype.getCreateIp = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 31, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setCreateIp = function (value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};
/**
 * optional uint32 device_id = 32;
 * @return {number}
 */


proto.pb.User.prototype.getDeviceId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 32, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setDeviceId = function (value) {
  return jspb.Message.setProto3IntField(this, 32, value);
};
/**
 * optional NetworkType network_type = 33;
 * @return {!proto.pb.NetworkType}
 */


proto.pb.User.prototype.getNetworkType = function () {
  return (
    /** @type {!proto.pb.NetworkType} */
    jspb.Message.getFieldWithDefault(this, 33, 0)
  );
};
/**
 * @param {!proto.pb.NetworkType} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setNetworkType = function (value) {
  return jspb.Message.setProto3EnumField(this, 33, value);
};
/**
 * optional string access_token = 34;
 * @return {string}
 */


proto.pb.User.prototype.getAccessToken = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 34, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setAccessToken = function (value) {
  return jspb.Message.setProto3StringField(this, 34, value);
};
/**
 * optional uint32 access_expire_at = 35;
 * @return {number}
 */


proto.pb.User.prototype.getAccessExpireAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 35, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setAccessExpireAt = function (value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};
/**
 * optional string block_reason = 36;
 * @return {string}
 */


proto.pb.User.prototype.getBlockReason = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 36, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setBlockReason = function (value) {
  return jspb.Message.setProto3StringField(this, 36, value);
};
/**
 * optional bool anonymous = 37;
 * @return {boolean}
 */


proto.pb.User.prototype.getAnonymous = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 37, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setAnonymous = function (value) {
  return jspb.Message.setProto3BooleanField(this, 37, value);
};
/**
 * optional string agora_rtm_token = 38;
 * @return {string}
 */


proto.pb.User.prototype.getAgoraRtmToken = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 38, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setAgoraRtmToken = function (value) {
  return jspb.Message.setProto3StringField(this, 38, value);
};
/**
 * optional uint32 agora_rtm_expire_at = 39;
 * @return {number}
 */


proto.pb.User.prototype.getAgoraRtmExpireAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 39, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setAgoraRtmExpireAt = function (value) {
  return jspb.Message.setProto3IntField(this, 39, value);
};
/**
 * optional string rc_token = 40;
 * @return {string}
 */


proto.pb.User.prototype.getRcToken = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 40, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setRcToken = function (value) {
  return jspb.Message.setProto3StringField(this, 40, value);
};
/**
 * optional uint32 rc_expire_at = 41;
 * @return {number}
 */


proto.pb.User.prototype.getRcExpireAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 41, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setRcExpireAt = function (value) {
  return jspb.Message.setProto3IntField(this, 41, value);
};
/**
 * optional uint32 install_id = 42;
 * @return {number}
 */


proto.pb.User.prototype.getInstallId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 42, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setInstallId = function (value) {
  return jspb.Message.setProto3IntField(this, 42, value);
};
/**
 * optional uint32 updated_at = 60;
 * @return {number}
 */


proto.pb.User.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 60, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 60, value);
};
/**
 * optional uint32 created_at = 61;
 * @return {number}
 */


proto.pb.User.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 61, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 61, value);
};
/**
 * optional uint32 toya_id = 62;
 * @return {number}
 */


proto.pb.User.prototype.getToyaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 62, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setToyaId = function (value) {
  return jspb.Message.setProto3IntField(this, 62, value);
};
/**
 * optional uint32 toya_synced_at = 63;
 * @return {number}
 */


proto.pb.User.prototype.getToyaSyncedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 63, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setToyaSyncedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 63, value);
};
/**
 * optional ToyaStatus toya_status = 64;
 * @return {!proto.pb.ToyaStatus}
 */


proto.pb.User.prototype.getToyaStatus = function () {
  return (
    /** @type {!proto.pb.ToyaStatus} */
    jspb.Message.getFieldWithDefault(this, 64, 0)
  );
};
/**
 * @param {!proto.pb.ToyaStatus} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setToyaStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 64, value);
};
/**
 * repeated EntityAuth auths = 100;
 * @return {!Array<!proto.pb.EntityAuth>}
 */


proto.pb.User.prototype.getAuthsList = function () {
  return (
    /** @type{!Array<!proto.pb.EntityAuth>} */
    jspb.Message.getRepeatedWrapperField(this, proto.pb.EntityAuth, 100)
  );
};
/**
 * @param {!Array<!proto.pb.EntityAuth>} value
 * @return {!proto.pb.User} returns this
*/


proto.pb.User.prototype.setAuthsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 100, value);
};
/**
 * @param {!proto.pb.EntityAuth=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.EntityAuth}
 */


proto.pb.User.prototype.addAuths = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 100, opt_value, proto.pb.EntityAuth, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.clearAuthsList = function () {
  return this.setAuthsList([]);
};
/**
 * optional bool is_new = 101;
 * @return {boolean}
 */


proto.pb.User.prototype.getIsNew = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 101, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setIsNew = function (value) {
  return jspb.Message.setProto3BooleanField(this, 101, value);
};
/**
 * optional FollowStatus follow_status = 102;
 * @return {!proto.pb.FollowStatus}
 */


proto.pb.User.prototype.getFollowStatus = function () {
  return (
    /** @type {!proto.pb.FollowStatus} */
    jspb.Message.getFieldWithDefault(this, 102, 0)
  );
};
/**
 * @param {!proto.pb.FollowStatus} value
 * @return {!proto.pb.User} returns this
 */


proto.pb.User.prototype.setFollowStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 102, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.pb.AnchorInfo.repeatedFields_ = [15, 19, 20, 24];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.AnchorInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.AnchorInfo.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.AnchorInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.AnchorInfo.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      profileId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      country: jspb.Message.getFieldWithDefault(msg, 3, ""),
      status: jspb.Message.getFieldWithDefault(msg, 4, 0),
      level: jspb.Message.getFieldWithDefault(msg, 5, 0),
      lang: jspb.Message.getFieldWithDefault(msg, 6, ""),
      price: jspb.Message.getFieldWithDefault(msg, 7, 0),
      fansCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
      gender: jspb.Message.getFieldWithDefault(msg, 9, 0),
      nickname: jspb.Message.getFieldWithDefault(msg, 10, ""),
      signature: jspb.Message.getFieldWithDefault(msg, 11, ""),
      avatar: jspb.Message.getFieldWithDefault(msg, 12, ""),
      occupation: jspb.Message.getFieldWithDefault(msg, 13, 0),
      birthday: jspb.Message.getFieldWithDefault(msg, 14, 0),
      tagsList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
      voiceGreeting: jspb.Message.getFieldWithDefault(msg, 16, ""),
      onlineStart: jspb.Message.getFieldWithDefault(msg, 17, 0),
      onlineEnd: jspb.Message.getFieldWithDefault(msg, 18, 0),
      photosList: jspb.Message.toObjectList(msg.getPhotosList(), proto.pb.FileRecord.toObject, includeInstance),
      videosList: jspb.Message.toObjectList(msg.getVideosList(), proto.pb.FileRecord.toObject, includeInstance),
      offlineAt: jspb.Message.getFieldWithDefault(msg, 21, 0),
      longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
      latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 23, 0.0),
      livesList: jspb.Message.toObjectList(msg.getLivesList(), proto.pb.FileRecord.toObject, includeInstance),
      followStatus: jspb.Message.getFieldWithDefault(msg, 25, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 30, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 31, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.AnchorInfo}
 */


proto.pb.AnchorInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.AnchorInfo();
  return proto.pb.AnchorInfo.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.AnchorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.AnchorInfo}
 */


proto.pb.AnchorInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setProfileId(value);
        break;

      case 3:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setCountry(value);
        break;

      case 4:
        var value =
        /** @type {!proto.pb.OnlineStatus} */
        reader.readEnum();
        msg.setStatus(value);
        break;

      case 5:
        var value =
        /** @type {!proto.pb.AnchorLevel} */
        reader.readEnum();
        msg.setLevel(value);
        break;

      case 6:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setLang(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setPrice(value);
        break;

      case 8:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setFansCount(value);
        break;

      case 9:
        var value =
        /** @type {!proto.pb.GenderType} */
        reader.readEnum();
        msg.setGender(value);
        break;

      case 10:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setNickname(value);
        break;

      case 11:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setSignature(value);
        break;

      case 12:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAvatar(value);
        break;

      case 13:
        var value =
        /** @type {!proto.pb.OccupationType} */
        reader.readEnum();
        msg.setOccupation(value);
        break;

      case 14:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setBirthday(value);
        break;

      case 15:
        var value =
        /** @type {string} */
        reader.readString();
        msg.addTags(value);
        break;

      case 16:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setVoiceGreeting(value);
        break;

      case 17:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setOnlineStart(value);
        break;

      case 18:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setOnlineEnd(value);
        break;

      case 19:
        var value = new proto.pb.FileRecord();
        reader.readMessage(value, proto.pb.FileRecord.deserializeBinaryFromReader);
        msg.addPhotos(value);
        break;

      case 20:
        var value = new proto.pb.FileRecord();
        reader.readMessage(value, proto.pb.FileRecord.deserializeBinaryFromReader);
        msg.addVideos(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setOfflineAt(value);
        break;

      case 22:
        var value =
        /** @type {number} */
        reader.readFloat();
        msg.setLongitude(value);
        break;

      case 23:
        var value =
        /** @type {number} */
        reader.readFloat();
        msg.setLatitude(value);
        break;

      case 24:
        var value = new proto.pb.FileRecord();
        reader.readMessage(value, proto.pb.FileRecord.deserializeBinaryFromReader);
        msg.addLives(value);
        break;

      case 25:
        var value =
        /** @type {!proto.pb.FollowStatus} */
        reader.readEnum();
        msg.setFollowStatus(value);
        break;

      case 30:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 31:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.AnchorInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.AnchorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.AnchorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.AnchorInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getProfileId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getCountry();

  if (f.length > 0) {
    writer.writeString(3, f);
  }

  f = message.getStatus();

  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }

  f = message.getLevel();

  if (f !== 0.0) {
    writer.writeEnum(5, f);
  }

  f = message.getLang();

  if (f.length > 0) {
    writer.writeString(6, f);
  }

  f = message.getPrice();

  if (f !== 0) {
    writer.writeUint32(7, f);
  }

  f = message.getFansCount();

  if (f !== 0) {
    writer.writeUint32(8, f);
  }

  f = message.getGender();

  if (f !== 0.0) {
    writer.writeEnum(9, f);
  }

  f = message.getNickname();

  if (f.length > 0) {
    writer.writeString(10, f);
  }

  f = message.getSignature();

  if (f.length > 0) {
    writer.writeString(11, f);
  }

  f = message.getAvatar();

  if (f.length > 0) {
    writer.writeString(12, f);
  }

  f = message.getOccupation();

  if (f !== 0.0) {
    writer.writeEnum(13, f);
  }

  f = message.getBirthday();

  if (f !== 0) {
    writer.writeUint32(14, f);
  }

  f = message.getTagsList();

  if (f.length > 0) {
    writer.writeRepeatedString(15, f);
  }

  f = message.getVoiceGreeting();

  if (f.length > 0) {
    writer.writeString(16, f);
  }

  f = message.getOnlineStart();

  if (f !== 0) {
    writer.writeUint32(17, f);
  }

  f = message.getOnlineEnd();

  if (f !== 0) {
    writer.writeUint32(18, f);
  }

  f = message.getPhotosList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(19, f, proto.pb.FileRecord.serializeBinaryToWriter);
  }

  f = message.getVideosList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(20, f, proto.pb.FileRecord.serializeBinaryToWriter);
  }

  f = message.getOfflineAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }

  f = message.getLongitude();

  if (f !== 0.0) {
    writer.writeFloat(22, f);
  }

  f = message.getLatitude();

  if (f !== 0.0) {
    writer.writeFloat(23, f);
  }

  f = message.getLivesList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(24, f, proto.pb.FileRecord.serializeBinaryToWriter);
  }

  f = message.getFollowStatus();

  if (f !== 0.0) {
    writer.writeEnum(25, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(30, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(31, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 profile_id = 2;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getProfileId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setProfileId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional string country = 3;
 * @return {string}
 */


proto.pb.AnchorInfo.prototype.getCountry = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setCountry = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional OnlineStatus status = 4;
 * @return {!proto.pb.OnlineStatus}
 */


proto.pb.AnchorInfo.prototype.getStatus = function () {
  return (
    /** @type {!proto.pb.OnlineStatus} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {!proto.pb.OnlineStatus} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};
/**
 * optional AnchorLevel level = 5;
 * @return {!proto.pb.AnchorLevel}
 */


proto.pb.AnchorInfo.prototype.getLevel = function () {
  return (
    /** @type {!proto.pb.AnchorLevel} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {!proto.pb.AnchorLevel} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setLevel = function (value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};
/**
 * optional string lang = 6;
 * @return {string}
 */


proto.pb.AnchorInfo.prototype.getLang = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 6, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setLang = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * optional uint32 price = 7;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getPrice = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setPrice = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional uint32 fans_count = 8;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getFansCount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setFansCount = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};
/**
 * optional GenderType gender = 9;
 * @return {!proto.pb.GenderType}
 */


proto.pb.AnchorInfo.prototype.getGender = function () {
  return (
    /** @type {!proto.pb.GenderType} */
    jspb.Message.getFieldWithDefault(this, 9, 0)
  );
};
/**
 * @param {!proto.pb.GenderType} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setGender = function (value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};
/**
 * optional string nickname = 10;
 * @return {string}
 */


proto.pb.AnchorInfo.prototype.getNickname = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 10, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setNickname = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};
/**
 * optional string signature = 11;
 * @return {string}
 */


proto.pb.AnchorInfo.prototype.getSignature = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 11, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setSignature = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};
/**
 * optional string avatar = 12;
 * @return {string}
 */


proto.pb.AnchorInfo.prototype.getAvatar = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 12, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setAvatar = function (value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};
/**
 * optional OccupationType occupation = 13;
 * @return {!proto.pb.OccupationType}
 */


proto.pb.AnchorInfo.prototype.getOccupation = function () {
  return (
    /** @type {!proto.pb.OccupationType} */
    jspb.Message.getFieldWithDefault(this, 13, 0)
  );
};
/**
 * @param {!proto.pb.OccupationType} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setOccupation = function (value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};
/**
 * optional uint32 birthday = 14;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getBirthday = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 14, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setBirthday = function (value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};
/**
 * repeated string tags = 15;
 * @return {!Array<string>}
 */


proto.pb.AnchorInfo.prototype.getTagsList = function () {
  return (
    /** @type {!Array<string>} */
    jspb.Message.getRepeatedField(this, 15)
  );
};
/**
 * @param {!Array<string>} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setTagsList = function (value) {
  return jspb.Message.setField(this, 15, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.addTags = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.clearTagsList = function () {
  return this.setTagsList([]);
};
/**
 * optional string voice_greeting = 16;
 * @return {string}
 */


proto.pb.AnchorInfo.prototype.getVoiceGreeting = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 16, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setVoiceGreeting = function (value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};
/**
 * optional uint32 online_start = 17;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getOnlineStart = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 17, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setOnlineStart = function (value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};
/**
 * optional uint32 online_end = 18;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getOnlineEnd = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 18, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setOnlineEnd = function (value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};
/**
 * repeated FileRecord photos = 19;
 * @return {!Array<!proto.pb.FileRecord>}
 */


proto.pb.AnchorInfo.prototype.getPhotosList = function () {
  return (
    /** @type{!Array<!proto.pb.FileRecord>} */
    jspb.Message.getRepeatedWrapperField(this, proto.pb.FileRecord, 19)
  );
};
/**
 * @param {!Array<!proto.pb.FileRecord>} value
 * @return {!proto.pb.AnchorInfo} returns this
*/


proto.pb.AnchorInfo.prototype.setPhotosList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 19, value);
};
/**
 * @param {!proto.pb.FileRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.FileRecord}
 */


proto.pb.AnchorInfo.prototype.addPhotos = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.pb.FileRecord, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.clearPhotosList = function () {
  return this.setPhotosList([]);
};
/**
 * repeated FileRecord videos = 20;
 * @return {!Array<!proto.pb.FileRecord>}
 */


proto.pb.AnchorInfo.prototype.getVideosList = function () {
  return (
    /** @type{!Array<!proto.pb.FileRecord>} */
    jspb.Message.getRepeatedWrapperField(this, proto.pb.FileRecord, 20)
  );
};
/**
 * @param {!Array<!proto.pb.FileRecord>} value
 * @return {!proto.pb.AnchorInfo} returns this
*/


proto.pb.AnchorInfo.prototype.setVideosList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};
/**
 * @param {!proto.pb.FileRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.FileRecord}
 */


proto.pb.AnchorInfo.prototype.addVideos = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.pb.FileRecord, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.clearVideosList = function () {
  return this.setVideosList([]);
};
/**
 * optional uint32 offline_at = 21;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getOfflineAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setOfflineAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};
/**
 * optional float longitude = 22;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getLongitude = function () {
  return (
    /** @type {number} */
    jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setLongitude = function (value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};
/**
 * optional float latitude = 23;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getLatitude = function () {
  return (
    /** @type {number} */
    jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setLatitude = function (value) {
  return jspb.Message.setProto3FloatField(this, 23, value);
};
/**
 * repeated FileRecord lives = 24;
 * @return {!Array<!proto.pb.FileRecord>}
 */


proto.pb.AnchorInfo.prototype.getLivesList = function () {
  return (
    /** @type{!Array<!proto.pb.FileRecord>} */
    jspb.Message.getRepeatedWrapperField(this, proto.pb.FileRecord, 24)
  );
};
/**
 * @param {!Array<!proto.pb.FileRecord>} value
 * @return {!proto.pb.AnchorInfo} returns this
*/


proto.pb.AnchorInfo.prototype.setLivesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 24, value);
};
/**
 * @param {!proto.pb.FileRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.FileRecord}
 */


proto.pb.AnchorInfo.prototype.addLives = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 24, opt_value, proto.pb.FileRecord, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.clearLivesList = function () {
  return this.setLivesList([]);
};
/**
 * optional FollowStatus follow_status = 25;
 * @return {!proto.pb.FollowStatus}
 */


proto.pb.AnchorInfo.prototype.getFollowStatus = function () {
  return (
    /** @type {!proto.pb.FollowStatus} */
    jspb.Message.getFieldWithDefault(this, 25, 0)
  );
};
/**
 * @param {!proto.pb.FollowStatus} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setFollowStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 25, value);
};
/**
 * optional uint32 updated_at = 30;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 30, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};
/**
 * optional uint32 created_at = 31;
 * @return {number}
 */


proto.pb.AnchorInfo.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 31, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.AnchorInfo} returns this
 */


proto.pb.AnchorInfo.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.pb.Relation.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.Relation.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.Relation.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.Relation} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.Relation.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      typesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
      userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      anchorId: jspb.Message.getFieldWithDefault(msg, 4, 0),
      expense: jspb.Message.getFieldWithDefault(msg, 5, 0),
      userFollowAt: jspb.Message.getFieldWithDefault(msg, 6, 0),
      anchorFollowAt: jspb.Message.getFieldWithDefault(msg, 7, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Relation}
 */


proto.pb.Relation.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Relation();
  return proto.pb.Relation.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Relation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Relation}
 */


proto.pb.Relation.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setId(value);
        break;

      case 2:
        var values =
        /** @type {!Array<!proto.pb.RelationType>} */
        reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()];

        for (var i = 0; i < values.length; i++) {
          msg.addTypes(values[i]);
        }

        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUserId(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAnchorId(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setExpense(value);
        break;

      case 6:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUserFollowAt(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAnchorFollowAt(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.Relation.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.Relation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Relation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.Relation.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getTypesList();

  if (f.length > 0) {
    writer.writePackedEnum(2, f);
  }

  f = message.getUserId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getAnchorId();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }

  f = message.getExpense();

  if (f !== 0) {
    writer.writeUint32(5, f);
  }

  f = message.getUserFollowAt();

  if (f !== 0) {
    writer.writeUint32(6, f);
  }

  f = message.getAnchorFollowAt();

  if (f !== 0) {
    writer.writeUint32(7, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */


proto.pb.Relation.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * repeated RelationType types = 2;
 * @return {!Array<!proto.pb.RelationType>}
 */


proto.pb.Relation.prototype.getTypesList = function () {
  return (
    /** @type {!Array<!proto.pb.RelationType>} */
    jspb.Message.getRepeatedField(this, 2)
  );
};
/**
 * @param {!Array<!proto.pb.RelationType>} value
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.setTypesList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!proto.pb.RelationType} value
 * @param {number=} opt_index
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.addTypes = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.clearTypesList = function () {
  return this.setTypesList([]);
};
/**
 * optional uint32 user_id = 3;
 * @return {number}
 */


proto.pb.Relation.prototype.getUserId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional uint32 anchor_id = 4;
 * @return {number}
 */


proto.pb.Relation.prototype.getAnchorId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.setAnchorId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional uint32 expense = 5;
 * @return {number}
 */


proto.pb.Relation.prototype.getExpense = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.setExpense = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional uint32 user_follow_at = 6;
 * @return {number}
 */


proto.pb.Relation.prototype.getUserFollowAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.setUserFollowAt = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional uint32 anchor_follow_at = 7;
 * @return {number}
 */


proto.pb.Relation.prototype.getAnchorFollowAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.setAnchorFollowAt = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.Relation.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.Relation.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Relation} returns this
 */


proto.pb.Relation.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.EntityAuth.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.EntityAuth.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.EntityAuth} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.EntityAuth.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      entityType: jspb.Message.getFieldWithDefault(msg, 4, 0),
      entityId: jspb.Message.getFieldWithDefault(msg, 5, 0),
      authType: jspb.Message.getFieldWithDefault(msg, 6, 0),
      authId: jspb.Message.getFieldWithDefault(msg, 7, ""),
      authExtra: jspb.Message.getFieldWithDefault(msg, 8, ""),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.EntityAuth}
 */


proto.pb.EntityAuth.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.EntityAuth();
  return proto.pb.EntityAuth.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.EntityAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.EntityAuth}
 */


proto.pb.EntityAuth.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 4:
        var value =
        /** @type {!proto.pb.EntityType} */
        reader.readEnum();
        msg.setEntityType(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setEntityId(value);
        break;

      case 6:
        var value =
        /** @type {!proto.pb.AuthType} */
        reader.readEnum();
        msg.setAuthType(value);
        break;

      case 7:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAuthId(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAuthExtra(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.EntityAuth.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.EntityAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.EntityAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.EntityAuth.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getEntityType();

  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }

  f = message.getEntityId();

  if (f !== 0) {
    writer.writeUint32(5, f);
  }

  f = message.getAuthType();

  if (f !== 0.0) {
    writer.writeEnum(6, f);
  }

  f = message.getAuthId();

  if (f.length > 0) {
    writer.writeString(7, f);
  }

  f = message.getAuthExtra();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.EntityAuth.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.EntityAuth.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 area_id = 3;
 * @return {number}
 */


proto.pb.EntityAuth.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional EntityType entity_type = 4;
 * @return {!proto.pb.EntityType}
 */


proto.pb.EntityAuth.prototype.getEntityType = function () {
  return (
    /** @type {!proto.pb.EntityType} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {!proto.pb.EntityType} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setEntityType = function (value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};
/**
 * optional uint32 entity_id = 5;
 * @return {number}
 */


proto.pb.EntityAuth.prototype.getEntityId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setEntityId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional AuthType auth_type = 6;
 * @return {!proto.pb.AuthType}
 */


proto.pb.EntityAuth.prototype.getAuthType = function () {
  return (
    /** @type {!proto.pb.AuthType} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {!proto.pb.AuthType} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setAuthType = function (value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};
/**
 * optional string auth_id = 7;
 * @return {string}
 */


proto.pb.EntityAuth.prototype.getAuthId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 7, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setAuthId = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional string auth_extra = 8;
 * @return {string}
 */


proto.pb.EntityAuth.prototype.getAuthExtra = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setAuthExtra = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.EntityAuth.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.EntityAuth.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.EntityAuth} returns this
 */


proto.pb.EntityAuth.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.CheckinConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.CheckinConfig.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.CheckinConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.CheckinConfig.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      bonus: jspb.Message.getFieldWithDefault(msg, 4, 0),
      vipDays: jspb.Message.getFieldWithDefault(msg, 5, 0),
      matches: jspb.Message.getFieldWithDefault(msg, 6, 0),
      weight: jspb.Message.getFieldWithDefault(msg, 7, 0),
      sort: jspb.Message.getFieldWithDefault(msg, 8, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CheckinConfig}
 */


proto.pb.CheckinConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CheckinConfig();
  return proto.pb.CheckinConfig.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CheckinConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CheckinConfig}
 */


proto.pb.CheckinConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setBonus(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setVipDays(value);
        break;

      case 6:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setMatches(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setWeight(value);
        break;

      case 8:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setSort(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.CheckinConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.CheckinConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CheckinConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.CheckinConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getBonus();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }

  f = message.getVipDays();

  if (f !== 0) {
    writer.writeUint32(5, f);
  }

  f = message.getMatches();

  if (f !== 0) {
    writer.writeUint32(6, f);
  }

  f = message.getWeight();

  if (f !== 0) {
    writer.writeUint32(7, f);
  }

  f = message.getSort();

  if (f !== 0) {
    writer.writeUint32(8, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 area_id = 3;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional uint32 bonus = 4;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getBonus = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setBonus = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional uint32 vip_days = 5;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getVipDays = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setVipDays = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional uint32 matches = 6;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getMatches = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setMatches = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional uint32 weight = 7;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getWeight = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setWeight = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional uint32 sort = 8;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getSort = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setSort = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.CheckinConfig.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinConfig} returns this
 */


proto.pb.CheckinConfig.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.CheckinRecord.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.CheckinRecord.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.CheckinRecord} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.CheckinRecord.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      continuousDays: jspb.Message.getFieldWithDefault(msg, 4, 0),
      bonus: jspb.Message.getFieldWithDefault(msg, 5, 0),
      vipDays: jspb.Message.getFieldWithDefault(msg, 6, 0),
      matches: jspb.Message.getFieldWithDefault(msg, 7, 0),
      configId: jspb.Message.getFieldWithDefault(msg, 8, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 10, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CheckinRecord}
 */


proto.pb.CheckinRecord.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CheckinRecord();
  return proto.pb.CheckinRecord.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CheckinRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CheckinRecord}
 */


proto.pb.CheckinRecord.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUserId(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setContinuousDays(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setBonus(value);
        break;

      case 6:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setVipDays(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setMatches(value);
        break;

      case 8:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setConfigId(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.CheckinRecord.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.CheckinRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CheckinRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.CheckinRecord.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getUserId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getContinuousDays();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }

  f = message.getBonus();

  if (f !== 0) {
    writer.writeUint32(5, f);
  }

  f = message.getVipDays();

  if (f !== 0) {
    writer.writeUint32(6, f);
  }

  f = message.getMatches();

  if (f !== 0) {
    writer.writeUint32(7, f);
  }

  f = message.getConfigId();

  if (f !== 0) {
    writer.writeUint32(8, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */


proto.pb.CheckinRecord.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinRecord} returns this
 */


proto.pb.CheckinRecord.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.CheckinRecord.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinRecord} returns this
 */


proto.pb.CheckinRecord.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 user_id = 3;
 * @return {number}
 */


proto.pb.CheckinRecord.prototype.getUserId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinRecord} returns this
 */


proto.pb.CheckinRecord.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional uint32 continuous_days = 4;
 * @return {number}
 */


proto.pb.CheckinRecord.prototype.getContinuousDays = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinRecord} returns this
 */


proto.pb.CheckinRecord.prototype.setContinuousDays = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional uint32 bonus = 5;
 * @return {number}
 */


proto.pb.CheckinRecord.prototype.getBonus = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinRecord} returns this
 */


proto.pb.CheckinRecord.prototype.setBonus = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional uint32 vip_days = 6;
 * @return {number}
 */


proto.pb.CheckinRecord.prototype.getVipDays = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinRecord} returns this
 */


proto.pb.CheckinRecord.prototype.setVipDays = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional uint32 matches = 7;
 * @return {number}
 */


proto.pb.CheckinRecord.prototype.getMatches = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinRecord} returns this
 */


proto.pb.CheckinRecord.prototype.setMatches = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional uint32 config_id = 8;
 * @return {number}
 */


proto.pb.CheckinRecord.prototype.getConfigId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinRecord} returns this
 */


proto.pb.CheckinRecord.prototype.setConfigId = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};
/**
 * optional uint32 created_at = 10;
 * @return {number}
 */


proto.pb.CheckinRecord.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CheckinRecord} returns this
 */


proto.pb.CheckinRecord.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.CallRecord.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.CallRecord.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.CallRecord} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.CallRecord.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      userId: jspb.Message.getFieldWithDefault(msg, 4, 0),
      anchorId: jspb.Message.getFieldWithDefault(msg, 5, 0),
      price: jspb.Message.getFieldWithDefault(msg, 6, 0),
      callType: jspb.Message.getFieldWithDefault(msg, 7, 0),
      connectedAt: jspb.Message.getFieldWithDefault(msg, 8, 0),
      duration: jspb.Message.getFieldWithDefault(msg, 9, 0),
      billDuration: jspb.Message.getFieldWithDefault(msg, 10, 0),
      remainDuration: jspb.Message.getFieldWithDefault(msg, 11, 0),
      expense: jspb.Message.getFieldWithDefault(msg, 12, 0),
      hangType: jspb.Message.getFieldWithDefault(msg, 13, 0),
      hangAt: jspb.Message.getFieldWithDefault(msg, 14, 0),
      income: jspb.Message.getFieldWithDefault(msg, 15, 0),
      userScore: jspb.Message.getFieldWithDefault(msg, 16, 0),
      captureStatus: jspb.Message.getFieldWithDefault(msg, 17, 0),
      captureStartAt: jspb.Message.getFieldWithDefault(msg, 18, 0),
      captureDuration: jspb.Message.getFieldWithDefault(msg, 19, 0),
      captureFileId: jspb.Message.getFieldWithDefault(msg, 20, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 30, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 31, 0),
      toyaChannelId: jspb.Message.getFieldWithDefault(msg, 100, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CallRecord}
 */


proto.pb.CallRecord.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CallRecord();
  return proto.pb.CallRecord.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CallRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CallRecord}
 */


proto.pb.CallRecord.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUserId(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAnchorId(value);
        break;

      case 6:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setPrice(value);
        break;

      case 7:
        var value =
        /** @type {!proto.pb.CallType} */
        reader.readEnum();
        msg.setCallType(value);
        break;

      case 8:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setConnectedAt(value);
        break;

      case 9:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setDuration(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setBillDuration(value);
        break;

      case 11:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setRemainDuration(value);
        break;

      case 12:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setExpense(value);
        break;

      case 13:
        var value =
        /** @type {!proto.pb.HangType} */
        reader.readEnum();
        msg.setHangType(value);
        break;

      case 14:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setHangAt(value);
        break;

      case 15:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setIncome(value);
        break;

      case 16:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUserScore(value);
        break;

      case 17:
        var value =
        /** @type {!proto.pb.CaptureStatus} */
        reader.readEnum();
        msg.setCaptureStatus(value);
        break;

      case 18:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCaptureStartAt(value);
        break;

      case 19:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCaptureDuration(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setCaptureFileId(value);
        break;

      case 30:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 31:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      case 100:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setToyaChannelId(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.CallRecord.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.CallRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CallRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.CallRecord.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getUserId();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }

  f = message.getAnchorId();

  if (f !== 0) {
    writer.writeUint32(5, f);
  }

  f = message.getPrice();

  if (f !== 0) {
    writer.writeUint32(6, f);
  }

  f = message.getCallType();

  if (f !== 0.0) {
    writer.writeEnum(7, f);
  }

  f = message.getConnectedAt();

  if (f !== 0) {
    writer.writeUint32(8, f);
  }

  f = message.getDuration();

  if (f !== 0) {
    writer.writeUint32(9, f);
  }

  f = message.getBillDuration();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }

  f = message.getRemainDuration();

  if (f !== 0) {
    writer.writeUint32(11, f);
  }

  f = message.getExpense();

  if (f !== 0) {
    writer.writeUint32(12, f);
  }

  f = message.getHangType();

  if (f !== 0.0) {
    writer.writeEnum(13, f);
  }

  f = message.getHangAt();

  if (f !== 0) {
    writer.writeUint32(14, f);
  }

  f = message.getIncome();

  if (f !== 0) {
    writer.writeUint32(15, f);
  }

  f = message.getUserScore();

  if (f !== 0) {
    writer.writeUint32(16, f);
  }

  f = message.getCaptureStatus();

  if (f !== 0.0) {
    writer.writeEnum(17, f);
  }

  f = message.getCaptureStartAt();

  if (f !== 0) {
    writer.writeUint32(18, f);
  }

  f = message.getCaptureDuration();

  if (f !== 0) {
    writer.writeUint32(19, f);
  }

  f = message.getCaptureFileId();

  if (f !== 0) {
    writer.writeUint64(20, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(30, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(31, f);
  }

  f = message.getToyaChannelId();

  if (f !== 0) {
    writer.writeUint64(100, f);
  }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 area_id = 3;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional uint32 user_id = 4;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getUserId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional uint32 anchor_id = 5;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getAnchorId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setAnchorId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional uint32 price = 6;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getPrice = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setPrice = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional CallType call_type = 7;
 * @return {!proto.pb.CallType}
 */


proto.pb.CallRecord.prototype.getCallType = function () {
  return (
    /** @type {!proto.pb.CallType} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {!proto.pb.CallType} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setCallType = function (value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};
/**
 * optional uint32 connected_at = 8;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getConnectedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setConnectedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};
/**
 * optional uint32 duration = 9;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getDuration = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 9, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setDuration = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};
/**
 * optional uint32 bill_duration = 10;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getBillDuration = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setBillDuration = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional uint32 remain_duration = 11;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getRemainDuration = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 11, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setRemainDuration = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};
/**
 * optional uint32 expense = 12;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getExpense = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 12, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setExpense = function (value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};
/**
 * optional HangType hang_type = 13;
 * @return {!proto.pb.HangType}
 */


proto.pb.CallRecord.prototype.getHangType = function () {
  return (
    /** @type {!proto.pb.HangType} */
    jspb.Message.getFieldWithDefault(this, 13, 0)
  );
};
/**
 * @param {!proto.pb.HangType} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setHangType = function (value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};
/**
 * optional uint32 hang_at = 14;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getHangAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 14, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setHangAt = function (value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};
/**
 * optional uint32 income = 15;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getIncome = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 15, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setIncome = function (value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};
/**
 * optional uint32 user_score = 16;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getUserScore = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 16, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setUserScore = function (value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};
/**
 * optional CaptureStatus capture_status = 17;
 * @return {!proto.pb.CaptureStatus}
 */


proto.pb.CallRecord.prototype.getCaptureStatus = function () {
  return (
    /** @type {!proto.pb.CaptureStatus} */
    jspb.Message.getFieldWithDefault(this, 17, 0)
  );
};
/**
 * @param {!proto.pb.CaptureStatus} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setCaptureStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 17, value);
};
/**
 * optional uint32 capture_start_at = 18;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getCaptureStartAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 18, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setCaptureStartAt = function (value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};
/**
 * optional uint32 capture_duration = 19;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getCaptureDuration = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 19, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setCaptureDuration = function (value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};
/**
 * optional uint64 capture_file_id = 20;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getCaptureFileId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setCaptureFileId = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 updated_at = 30;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 30, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};
/**
 * optional uint32 created_at = 31;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 31, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};
/**
 * optional uint64 toya_channel_id = 100;
 * @return {number}
 */


proto.pb.CallRecord.prototype.getToyaChannelId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 100, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CallRecord} returns this
 */


proto.pb.CallRecord.prototype.setToyaChannelId = function (value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.GiftConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.GiftConfig.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.GiftConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.GiftConfig.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      title: jspb.Message.getFieldWithDefault(msg, 4, ""),
      name: jspb.Message.getFieldWithDefault(msg, 5, ""),
      type: jspb.Message.getFieldWithDefault(msg, 6, 0),
      enable: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
      price: jspb.Message.getFieldWithDefault(msg, 8, 0),
      icon: jspb.Message.getFieldWithDefault(msg, 9, ""),
      animation: jspb.Message.getFieldWithDefault(msg, 10, ""),
      sort: jspb.Message.getFieldWithDefault(msg, 11, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GiftConfig}
 */


proto.pb.GiftConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GiftConfig();
  return proto.pb.GiftConfig.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GiftConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GiftConfig}
 */


proto.pb.GiftConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 4:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setTitle(value);
        break;

      case 5:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 6:
        var value =
        /** @type {!proto.pb.GiftType} */
        reader.readEnum();
        msg.setType(value);
        break;

      case 7:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setEnable(value);
        break;

      case 8:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setPrice(value);
        break;

      case 9:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setIcon(value);
        break;

      case 10:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAnimation(value);
        break;

      case 11:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setSort(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.GiftConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.GiftConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GiftConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.GiftConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getTitle();

  if (f.length > 0) {
    writer.writeString(4, f);
  }

  f = message.getName();

  if (f.length > 0) {
    writer.writeString(5, f);
  }

  f = message.getType();

  if (f !== 0.0) {
    writer.writeEnum(6, f);
  }

  f = message.getEnable();

  if (f) {
    writer.writeBool(7, f);
  }

  f = message.getPrice();

  if (f !== 0) {
    writer.writeUint32(8, f);
  }

  f = message.getIcon();

  if (f.length > 0) {
    writer.writeString(9, f);
  }

  f = message.getAnimation();

  if (f.length > 0) {
    writer.writeString(10, f);
  }

  f = message.getSort();

  if (f !== 0) {
    writer.writeUint32(11, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.GiftConfig.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.GiftConfig.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 area_id = 3;
 * @return {number}
 */


proto.pb.GiftConfig.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional string title = 4;
 * @return {string}
 */


proto.pb.GiftConfig.prototype.getTitle = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setTitle = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string name = 5;
 * @return {string}
 */


proto.pb.GiftConfig.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 5, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional GiftType type = 6;
 * @return {!proto.pb.GiftType}
 */


proto.pb.GiftConfig.prototype.getType = function () {
  return (
    /** @type {!proto.pb.GiftType} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {!proto.pb.GiftType} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};
/**
 * optional bool enable = 7;
 * @return {boolean}
 */


proto.pb.GiftConfig.prototype.getEnable = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 7, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setEnable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};
/**
 * optional uint32 price = 8;
 * @return {number}
 */


proto.pb.GiftConfig.prototype.getPrice = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setPrice = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};
/**
 * optional string icon = 9;
 * @return {string}
 */


proto.pb.GiftConfig.prototype.getIcon = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 9, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setIcon = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional string animation = 10;
 * @return {string}
 */


proto.pb.GiftConfig.prototype.getAnimation = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 10, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setAnimation = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};
/**
 * optional uint32 sort = 11;
 * @return {number}
 */


proto.pb.GiftConfig.prototype.getSort = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 11, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setSort = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.GiftConfig.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.GiftConfig.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftConfig} returns this
 */


proto.pb.GiftConfig.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.VipConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.VipConfig.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.VipConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.VipConfig.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      title: jspb.Message.getFieldWithDefault(msg, 4, ""),
      days: jspb.Message.getFieldWithDefault(msg, 5, 0),
      price: jspb.Message.getFieldWithDefault(msg, 6, 0),
      discount: jspb.Message.getFieldWithDefault(msg, 7, 0),
      enable: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
      sort: jspb.Message.getFieldWithDefault(msg, 9, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.VipConfig}
 */


proto.pb.VipConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.VipConfig();
  return proto.pb.VipConfig.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.VipConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.VipConfig}
 */


proto.pb.VipConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 4:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setTitle(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setDays(value);
        break;

      case 6:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setPrice(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setDiscount(value);
        break;

      case 8:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setEnable(value);
        break;

      case 9:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setSort(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.VipConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.VipConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.VipConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.VipConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getTitle();

  if (f.length > 0) {
    writer.writeString(4, f);
  }

  f = message.getDays();

  if (f !== 0) {
    writer.writeUint32(5, f);
  }

  f = message.getPrice();

  if (f !== 0) {
    writer.writeUint32(6, f);
  }

  f = message.getDiscount();

  if (f !== 0) {
    writer.writeUint32(7, f);
  }

  f = message.getEnable();

  if (f) {
    writer.writeBool(8, f);
  }

  f = message.getSort();

  if (f !== 0) {
    writer.writeUint32(9, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.VipConfig.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.VipConfig.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 area_id = 3;
 * @return {number}
 */


proto.pb.VipConfig.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional string title = 4;
 * @return {string}
 */


proto.pb.VipConfig.prototype.getTitle = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setTitle = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional uint32 days = 5;
 * @return {number}
 */


proto.pb.VipConfig.prototype.getDays = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setDays = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional uint32 price = 6;
 * @return {number}
 */


proto.pb.VipConfig.prototype.getPrice = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setPrice = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional uint32 discount = 7;
 * @return {number}
 */


proto.pb.VipConfig.prototype.getDiscount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setDiscount = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional bool enable = 8;
 * @return {boolean}
 */


proto.pb.VipConfig.prototype.getEnable = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 8, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setEnable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};
/**
 * optional uint32 sort = 9;
 * @return {number}
 */


proto.pb.VipConfig.prototype.getSort = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 9, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setSort = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.VipConfig.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.VipConfig.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipConfig} returns this
 */


proto.pb.VipConfig.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.GiftRecord.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.GiftRecord.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.GiftRecord} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.GiftRecord.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      anchorId: jspb.Message.getFieldWithDefault(msg, 4, 0),
      callId: jspb.Message.getFieldWithDefault(msg, 5, 0),
      giftId: jspb.Message.getFieldWithDefault(msg, 6, 0),
      quantity: jspb.Message.getFieldWithDefault(msg, 7, 0),
      price: jspb.Message.getFieldWithDefault(msg, 8, 0),
      total: jspb.Message.getFieldWithDefault(msg, 9, 0),
      income: jspb.Message.getFieldWithDefault(msg, 10, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GiftRecord}
 */


proto.pb.GiftRecord.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GiftRecord();
  return proto.pb.GiftRecord.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GiftRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GiftRecord}
 */


proto.pb.GiftRecord.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUserId(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAnchorId(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setCallId(value);
        break;

      case 6:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setGiftId(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setQuantity(value);
        break;

      case 8:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setPrice(value);
        break;

      case 9:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setTotal(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setIncome(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.GiftRecord.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.GiftRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GiftRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.GiftRecord.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getUserId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getAnchorId();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }

  f = message.getCallId();

  if (f !== 0) {
    writer.writeUint64(5, f);
  }

  f = message.getGiftId();

  if (f !== 0) {
    writer.writeUint32(6, f);
  }

  f = message.getQuantity();

  if (f !== 0) {
    writer.writeUint32(7, f);
  }

  f = message.getPrice();

  if (f !== 0) {
    writer.writeUint32(8, f);
  }

  f = message.getTotal();

  if (f !== 0) {
    writer.writeUint32(9, f);
  }

  f = message.getIncome();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 user_id = 3;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getUserId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional uint32 anchor_id = 4;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getAnchorId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setAnchorId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional uint64 call_id = 5;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getCallId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setCallId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional uint32 gift_id = 6;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getGiftId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setGiftId = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional uint32 quantity = 7;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getQuantity = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setQuantity = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional uint32 price = 8;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getPrice = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setPrice = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};
/**
 * optional uint32 total = 9;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getTotal = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 9, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setTotal = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};
/**
 * optional uint32 income = 10;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getIncome = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setIncome = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.GiftRecord.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.GiftRecord} returns this
 */


proto.pb.GiftRecord.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.VipRecord.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.VipRecord.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.VipRecord} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.VipRecord.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      vipId: jspb.Message.getFieldWithDefault(msg, 4, 0),
      quantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
      price: jspb.Message.getFieldWithDefault(msg, 6, 0),
      days: jspb.Message.getFieldWithDefault(msg, 7, 0),
      total: jspb.Message.getFieldWithDefault(msg, 9, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 10, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.VipRecord}
 */


proto.pb.VipRecord.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.VipRecord();
  return proto.pb.VipRecord.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.VipRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.VipRecord}
 */


proto.pb.VipRecord.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUserId(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setVipId(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setQuantity(value);
        break;

      case 6:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setPrice(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setDays(value);
        break;

      case 9:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setTotal(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.VipRecord.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.VipRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.VipRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.VipRecord.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getUserId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getVipId();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }

  f = message.getQuantity();

  if (f !== 0) {
    writer.writeUint32(5, f);
  }

  f = message.getPrice();

  if (f !== 0) {
    writer.writeUint32(6, f);
  }

  f = message.getDays();

  if (f !== 0) {
    writer.writeUint32(7, f);
  }

  f = message.getTotal();

  if (f !== 0) {
    writer.writeUint32(9, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */


proto.pb.VipRecord.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipRecord} returns this
 */


proto.pb.VipRecord.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.VipRecord.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipRecord} returns this
 */


proto.pb.VipRecord.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 user_id = 3;
 * @return {number}
 */


proto.pb.VipRecord.prototype.getUserId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipRecord} returns this
 */


proto.pb.VipRecord.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional uint32 vip_id = 4;
 * @return {number}
 */


proto.pb.VipRecord.prototype.getVipId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipRecord} returns this
 */


proto.pb.VipRecord.prototype.setVipId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional uint32 quantity = 5;
 * @return {number}
 */


proto.pb.VipRecord.prototype.getQuantity = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipRecord} returns this
 */


proto.pb.VipRecord.prototype.setQuantity = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional uint32 price = 6;
 * @return {number}
 */


proto.pb.VipRecord.prototype.getPrice = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipRecord} returns this
 */


proto.pb.VipRecord.prototype.setPrice = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional uint32 days = 7;
 * @return {number}
 */


proto.pb.VipRecord.prototype.getDays = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipRecord} returns this
 */


proto.pb.VipRecord.prototype.setDays = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional uint32 total = 9;
 * @return {number}
 */


proto.pb.VipRecord.prototype.getTotal = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 9, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipRecord} returns this
 */


proto.pb.VipRecord.prototype.setTotal = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};
/**
 * optional uint32 created_at = 10;
 * @return {number}
 */


proto.pb.VipRecord.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.VipRecord} returns this
 */


proto.pb.VipRecord.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.Commodity.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.Commodity.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.Commodity} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.Commodity.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      enable: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
      title: jspb.Message.getFieldWithDefault(msg, 5, ""),
      name: jspb.Message.getFieldWithDefault(msg, 6, ""),
      sku: jspb.Message.getFieldWithDefault(msg, 7, ""),
      price: jspb.Message.getFieldWithDefault(msg, 8, 0),
      currency: jspb.Message.getFieldWithDefault(msg, 9, ""),
      discount: jspb.Message.getFieldWithDefault(msg, 10, 0),
      icon: jspb.Message.getFieldWithDefault(msg, 11, ""),
      amount: jspb.Message.getFieldWithDefault(msg, 12, 0),
      bonus: jspb.Message.getFieldWithDefault(msg, 13, 0),
      vipDays: jspb.Message.getFieldWithDefault(msg, 14, 0),
      sort: jspb.Message.getFieldWithDefault(msg, 15, 0),
      isSubscription: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Commodity}
 */


proto.pb.Commodity.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Commodity();
  return proto.pb.Commodity.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Commodity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Commodity}
 */


proto.pb.Commodity.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 4:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setEnable(value);
        break;

      case 5:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setTitle(value);
        break;

      case 6:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 7:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setSku(value);
        break;

      case 8:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setPrice(value);
        break;

      case 9:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setCurrency(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setDiscount(value);
        break;

      case 11:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setIcon(value);
        break;

      case 12:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAmount(value);
        break;

      case 13:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setBonus(value);
        break;

      case 14:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setVipDays(value);
        break;

      case 15:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setSort(value);
        break;

      case 16:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setIsSubscription(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.Commodity.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.Commodity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Commodity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.Commodity.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getEnable();

  if (f) {
    writer.writeBool(4, f);
  }

  f = message.getTitle();

  if (f.length > 0) {
    writer.writeString(5, f);
  }

  f = message.getName();

  if (f.length > 0) {
    writer.writeString(6, f);
  }

  f = message.getSku();

  if (f.length > 0) {
    writer.writeString(7, f);
  }

  f = message.getPrice();

  if (f !== 0) {
    writer.writeUint32(8, f);
  }

  f = message.getCurrency();

  if (f.length > 0) {
    writer.writeString(9, f);
  }

  f = message.getDiscount();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }

  f = message.getIcon();

  if (f.length > 0) {
    writer.writeString(11, f);
  }

  f = message.getAmount();

  if (f !== 0) {
    writer.writeUint32(12, f);
  }

  f = message.getBonus();

  if (f !== 0) {
    writer.writeUint32(13, f);
  }

  f = message.getVipDays();

  if (f !== 0) {
    writer.writeUint32(14, f);
  }

  f = message.getSort();

  if (f !== 0) {
    writer.writeUint32(15, f);
  }

  f = message.getIsSubscription();

  if (f) {
    writer.writeBool(16, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.Commodity.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.Commodity.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 area_id = 3;
 * @return {number}
 */


proto.pb.Commodity.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional bool enable = 4;
 * @return {boolean}
 */


proto.pb.Commodity.prototype.getEnable = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 4, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setEnable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};
/**
 * optional string title = 5;
 * @return {string}
 */


proto.pb.Commodity.prototype.getTitle = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 5, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setTitle = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional string name = 6;
 * @return {string}
 */


proto.pb.Commodity.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 6, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * optional string sku = 7;
 * @return {string}
 */


proto.pb.Commodity.prototype.getSku = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 7, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setSku = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional uint32 price = 8;
 * @return {number}
 */


proto.pb.Commodity.prototype.getPrice = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setPrice = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};
/**
 * optional string currency = 9;
 * @return {string}
 */


proto.pb.Commodity.prototype.getCurrency = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 9, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setCurrency = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional uint32 discount = 10;
 * @return {number}
 */


proto.pb.Commodity.prototype.getDiscount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setDiscount = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional string icon = 11;
 * @return {string}
 */


proto.pb.Commodity.prototype.getIcon = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 11, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setIcon = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};
/**
 * optional uint32 amount = 12;
 * @return {number}
 */


proto.pb.Commodity.prototype.getAmount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 12, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};
/**
 * optional uint32 bonus = 13;
 * @return {number}
 */


proto.pb.Commodity.prototype.getBonus = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 13, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setBonus = function (value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};
/**
 * optional uint32 vip_days = 14;
 * @return {number}
 */


proto.pb.Commodity.prototype.getVipDays = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 14, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setVipDays = function (value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};
/**
 * optional uint32 sort = 15;
 * @return {number}
 */


proto.pb.Commodity.prototype.getSort = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 15, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setSort = function (value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};
/**
 * optional bool is_subscription = 16;
 * @return {boolean}
 */


proto.pb.Commodity.prototype.getIsSubscription = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 16, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setIsSubscription = function (value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.Commodity.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.Commodity.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Commodity} returns this
 */


proto.pb.Commodity.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.BannerConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.BannerConfig.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.BannerConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.BannerConfig.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      title: jspb.Message.getFieldWithDefault(msg, 4, ""),
      name: jspb.Message.getFieldWithDefault(msg, 5, ""),
      enable: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
      image: jspb.Message.getFieldWithDefault(msg, 7, ""),
      target: jspb.Message.getFieldWithDefault(msg, 8, ""),
      external: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
      sort: jspb.Message.getFieldWithDefault(msg, 10, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BannerConfig}
 */


proto.pb.BannerConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BannerConfig();
  return proto.pb.BannerConfig.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BannerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BannerConfig}
 */


proto.pb.BannerConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 4:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setTitle(value);
        break;

      case 5:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 6:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setEnable(value);
        break;

      case 7:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setImage(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setTarget(value);
        break;

      case 9:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setExternal(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setSort(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.BannerConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.BannerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BannerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.BannerConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getTitle();

  if (f.length > 0) {
    writer.writeString(4, f);
  }

  f = message.getName();

  if (f.length > 0) {
    writer.writeString(5, f);
  }

  f = message.getEnable();

  if (f) {
    writer.writeBool(6, f);
  }

  f = message.getImage();

  if (f.length > 0) {
    writer.writeString(7, f);
  }

  f = message.getTarget();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getExternal();

  if (f) {
    writer.writeBool(9, f);
  }

  f = message.getSort();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.BannerConfig.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.BannerConfig.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 area_id = 3;
 * @return {number}
 */


proto.pb.BannerConfig.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional string title = 4;
 * @return {string}
 */


proto.pb.BannerConfig.prototype.getTitle = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setTitle = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string name = 5;
 * @return {string}
 */


proto.pb.BannerConfig.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 5, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional bool enable = 6;
 * @return {boolean}
 */


proto.pb.BannerConfig.prototype.getEnable = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 6, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setEnable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};
/**
 * optional string image = 7;
 * @return {string}
 */


proto.pb.BannerConfig.prototype.getImage = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 7, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setImage = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional string target = 8;
 * @return {string}
 */


proto.pb.BannerConfig.prototype.getTarget = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setTarget = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional bool external = 9;
 * @return {boolean}
 */


proto.pb.BannerConfig.prototype.getExternal = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 9, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setExternal = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};
/**
 * optional uint32 sort = 10;
 * @return {number}
 */


proto.pb.BannerConfig.prototype.getSort = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setSort = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.BannerConfig.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.BannerConfig.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.BannerConfig} returns this
 */


proto.pb.BannerConfig.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.Subscription.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.Subscription.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.Subscription} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.Subscription.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      osType: jspb.Message.getFieldWithDefault(msg, 4, 0),
      status: jspb.Message.getFieldWithDefault(msg, 5, 0),
      period: jspb.Message.getFieldWithDefault(msg, 6, 0),
      productId: jspb.Message.getFieldWithDefault(msg, 7, ""),
      originalOrderId: jspb.Message.getFieldWithDefault(msg, 8, ""),
      latestOrderId: jspb.Message.getFieldWithDefault(msg, 9, ""),
      renewAt: jspb.Message.getFieldWithDefault(msg, 10, 0),
      expireAt: jspb.Message.getFieldWithDefault(msg, 11, 0),
      cancelAt: jspb.Message.getFieldWithDefault(msg, 12, 0),
      revokeAt: jspb.Message.getFieldWithDefault(msg, 13, 0),
      graceAt: jspb.Message.getFieldWithDefault(msg, 14, 0),
      trial: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
      createdAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Subscription}
 */


proto.pb.Subscription.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Subscription();
  return proto.pb.Subscription.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Subscription}
 */


proto.pb.Subscription.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUserId(value);
        break;

      case 4:
        var value =
        /** @type {!proto.pb.OsType} */
        reader.readEnum();
        msg.setOsType(value);
        break;

      case 5:
        var value =
        /** @type {!proto.pb.SubscriptionStatus} */
        reader.readEnum();
        msg.setStatus(value);
        break;

      case 6:
        var value =
        /** @type {!proto.pb.SubscriptionPeriod} */
        reader.readEnum();
        msg.setPeriod(value);
        break;

      case 7:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setProductId(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setOriginalOrderId(value);
        break;

      case 9:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setLatestOrderId(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setRenewAt(value);
        break;

      case 11:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setExpireAt(value);
        break;

      case 12:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCancelAt(value);
        break;

      case 13:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setRevokeAt(value);
        break;

      case 14:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setGraceAt(value);
        break;

      case 15:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setTrial(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.Subscription.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.Subscription.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getUserId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getOsType();

  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }

  f = message.getStatus();

  if (f !== 0.0) {
    writer.writeEnum(5, f);
  }

  f = message.getPeriod();

  if (f !== 0.0) {
    writer.writeEnum(6, f);
  }

  f = message.getProductId();

  if (f.length > 0) {
    writer.writeString(7, f);
  }

  f = message.getOriginalOrderId();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getLatestOrderId();

  if (f.length > 0) {
    writer.writeString(9, f);
  }

  f = message.getRenewAt();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }

  f = message.getExpireAt();

  if (f !== 0) {
    writer.writeUint32(11, f);
  }

  f = message.getCancelAt();

  if (f !== 0) {
    writer.writeUint32(12, f);
  }

  f = message.getRevokeAt();

  if (f !== 0) {
    writer.writeUint32(13, f);
  }

  f = message.getGraceAt();

  if (f !== 0) {
    writer.writeUint32(14, f);
  }

  f = message.getTrial();

  if (f) {
    writer.writeBool(15, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */


proto.pb.Subscription.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.Subscription.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 user_id = 3;
 * @return {number}
 */


proto.pb.Subscription.prototype.getUserId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional OsType os_type = 4;
 * @return {!proto.pb.OsType}
 */


proto.pb.Subscription.prototype.getOsType = function () {
  return (
    /** @type {!proto.pb.OsType} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {!proto.pb.OsType} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setOsType = function (value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};
/**
 * optional SubscriptionStatus status = 5;
 * @return {!proto.pb.SubscriptionStatus}
 */


proto.pb.Subscription.prototype.getStatus = function () {
  return (
    /** @type {!proto.pb.SubscriptionStatus} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {!proto.pb.SubscriptionStatus} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};
/**
 * optional SubscriptionPeriod period = 6;
 * @return {!proto.pb.SubscriptionPeriod}
 */


proto.pb.Subscription.prototype.getPeriod = function () {
  return (
    /** @type {!proto.pb.SubscriptionPeriod} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {!proto.pb.SubscriptionPeriod} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setPeriod = function (value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};
/**
 * optional string product_id = 7;
 * @return {string}
 */


proto.pb.Subscription.prototype.getProductId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 7, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setProductId = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional string original_order_id = 8;
 * @return {string}
 */


proto.pb.Subscription.prototype.getOriginalOrderId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setOriginalOrderId = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional string latest_order_id = 9;
 * @return {string}
 */


proto.pb.Subscription.prototype.getLatestOrderId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 9, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setLatestOrderId = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional uint32 renew_at = 10;
 * @return {number}
 */


proto.pb.Subscription.prototype.getRenewAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setRenewAt = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional uint32 expire_at = 11;
 * @return {number}
 */


proto.pb.Subscription.prototype.getExpireAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 11, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setExpireAt = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};
/**
 * optional uint32 cancel_at = 12;
 * @return {number}
 */


proto.pb.Subscription.prototype.getCancelAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 12, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setCancelAt = function (value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};
/**
 * optional uint32 revoke_at = 13;
 * @return {number}
 */


proto.pb.Subscription.prototype.getRevokeAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 13, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setRevokeAt = function (value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};
/**
 * optional uint32 grace_at = 14;
 * @return {number}
 */


proto.pb.Subscription.prototype.getGraceAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 14, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setGraceAt = function (value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};
/**
 * optional bool trial = 15;
 * @return {boolean}
 */


proto.pb.Subscription.prototype.getTrial = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 15, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setTrial = function (value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};
/**
 * optional uint32 created_at = 20;
 * @return {number}
 */


proto.pb.Subscription.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 updated_at = 21;
 * @return {number}
 */


proto.pb.Subscription.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Subscription} returns this
 */


proto.pb.Subscription.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.Approximation.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.Approximation.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.Approximation} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.Approximation.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      lowValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
      highValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
      targetValue: jspb.Message.getFieldWithDefault(msg, 3, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Approximation}
 */


proto.pb.Approximation.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Approximation();
  return proto.pb.Approximation.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Approximation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Approximation}
 */


proto.pb.Approximation.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setLowValue(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setHighValue(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setTargetValue(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.Approximation.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.Approximation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Approximation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.Approximation.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getLowValue();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getHighValue();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getTargetValue();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }
};
/**
 * optional uint32 low_value = 1;
 * @return {number}
 */


proto.pb.Approximation.prototype.getLowValue = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Approximation} returns this
 */


proto.pb.Approximation.prototype.setLowValue = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 high_value = 2;
 * @return {number}
 */


proto.pb.Approximation.prototype.getHighValue = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Approximation} returns this
 */


proto.pb.Approximation.prototype.setHighValue = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 target_value = 3;
 * @return {number}
 */


proto.pb.Approximation.prototype.getTargetValue = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Approximation} returns this
 */


proto.pb.Approximation.prototype.setTargetValue = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.pb.CountryConfig.repeatedFields_ = [10, 11, 40];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.CountryConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.CountryConfig.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.CountryConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.CountryConfig.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      country: jspb.Message.getFieldWithDefault(msg, 3, ""),
      enable: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
      title: jspb.Message.getFieldWithDefault(msg, 5, ""),
      name: jspb.Message.getFieldWithDefault(msg, 6, ""),
      currency: jspb.Message.getFieldWithDefault(msg, 7, ""),
      icon: jspb.Message.getFieldWithDefault(msg, 8, ""),
      exchangeRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
      approximationsList: jspb.Message.toObjectList(msg.getApproximationsList(), proto.pb.Approximation.toObject, includeInstance),
      payTypesList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
      sort: jspb.Message.getFieldWithDefault(msg, 12, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0),
      payChannelsList: jspb.Message.toObjectList(msg.getPayChannelsList(), proto.pb.PayChannel.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CountryConfig}
 */


proto.pb.CountryConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CountryConfig();
  return proto.pb.CountryConfig.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CountryConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CountryConfig}
 */


proto.pb.CountryConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 3:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setCountry(value);
        break;

      case 4:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setEnable(value);
        break;

      case 5:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setTitle(value);
        break;

      case 6:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 7:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setCurrency(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setIcon(value);
        break;

      case 9:
        var value =
        /** @type {number} */
        reader.readFloat();
        msg.setExchangeRate(value);
        break;

      case 10:
        var value = new proto.pb.Approximation();
        reader.readMessage(value, proto.pb.Approximation.deserializeBinaryFromReader);
        msg.addApproximations(value);
        break;

      case 11:
        var values =
        /** @type {!Array<!proto.pb.PayType>} */
        reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()];

        for (var i = 0; i < values.length; i++) {
          msg.addPayTypes(values[i]);
        }

        break;

      case 12:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setSort(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      case 40:
        var value = new proto.pb.PayChannel();
        reader.readMessage(value, proto.pb.PayChannel.deserializeBinaryFromReader);
        msg.addPayChannels(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.CountryConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.CountryConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CountryConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.CountryConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getCountry();

  if (f.length > 0) {
    writer.writeString(3, f);
  }

  f = message.getEnable();

  if (f) {
    writer.writeBool(4, f);
  }

  f = message.getTitle();

  if (f.length > 0) {
    writer.writeString(5, f);
  }

  f = message.getName();

  if (f.length > 0) {
    writer.writeString(6, f);
  }

  f = message.getCurrency();

  if (f.length > 0) {
    writer.writeString(7, f);
  }

  f = message.getIcon();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getExchangeRate();

  if (f !== 0.0) {
    writer.writeFloat(9, f);
  }

  f = message.getApproximationsList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(10, f, proto.pb.Approximation.serializeBinaryToWriter);
  }

  f = message.getPayTypesList();

  if (f.length > 0) {
    writer.writePackedEnum(11, f);
  }

  f = message.getSort();

  if (f !== 0) {
    writer.writeUint32(12, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }

  f = message.getPayChannelsList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(40, f, proto.pb.PayChannel.serializeBinaryToWriter);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.CountryConfig.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 area_id = 2;
 * @return {number}
 */


proto.pb.CountryConfig.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional string country = 3;
 * @return {string}
 */


proto.pb.CountryConfig.prototype.getCountry = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setCountry = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional bool enable = 4;
 * @return {boolean}
 */


proto.pb.CountryConfig.prototype.getEnable = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 4, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setEnable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};
/**
 * optional string title = 5;
 * @return {string}
 */


proto.pb.CountryConfig.prototype.getTitle = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 5, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setTitle = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional string name = 6;
 * @return {string}
 */


proto.pb.CountryConfig.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 6, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * optional string currency = 7;
 * @return {string}
 */


proto.pb.CountryConfig.prototype.getCurrency = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 7, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setCurrency = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional string icon = 8;
 * @return {string}
 */


proto.pb.CountryConfig.prototype.getIcon = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setIcon = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional float exchange_rate = 9;
 * @return {number}
 */


proto.pb.CountryConfig.prototype.getExchangeRate = function () {
  return (
    /** @type {number} */
    jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setExchangeRate = function (value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};
/**
 * repeated Approximation approximations = 10;
 * @return {!Array<!proto.pb.Approximation>}
 */


proto.pb.CountryConfig.prototype.getApproximationsList = function () {
  return (
    /** @type{!Array<!proto.pb.Approximation>} */
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Approximation, 10)
  );
};
/**
 * @param {!Array<!proto.pb.Approximation>} value
 * @return {!proto.pb.CountryConfig} returns this
*/


proto.pb.CountryConfig.prototype.setApproximationsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};
/**
 * @param {!proto.pb.Approximation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Approximation}
 */


proto.pb.CountryConfig.prototype.addApproximations = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pb.Approximation, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.clearApproximationsList = function () {
  return this.setApproximationsList([]);
};
/**
 * repeated PayType pay_types = 11;
 * @return {!Array<!proto.pb.PayType>}
 */


proto.pb.CountryConfig.prototype.getPayTypesList = function () {
  return (
    /** @type {!Array<!proto.pb.PayType>} */
    jspb.Message.getRepeatedField(this, 11)
  );
};
/**
 * @param {!Array<!proto.pb.PayType>} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setPayTypesList = function (value) {
  return jspb.Message.setField(this, 11, value || []);
};
/**
 * @param {!proto.pb.PayType} value
 * @param {number=} opt_index
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.addPayTypes = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.clearPayTypesList = function () {
  return this.setPayTypesList([]);
};
/**
 * optional uint32 sort = 12;
 * @return {number}
 */


proto.pb.CountryConfig.prototype.getSort = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 12, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setSort = function (value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.CountryConfig.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.CountryConfig.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};
/**
 * repeated PayChannel pay_channels = 40;
 * @return {!Array<!proto.pb.PayChannel>}
 */


proto.pb.CountryConfig.prototype.getPayChannelsList = function () {
  return (
    /** @type{!Array<!proto.pb.PayChannel>} */
    jspb.Message.getRepeatedWrapperField(this, proto.pb.PayChannel, 40)
  );
};
/**
 * @param {!Array<!proto.pb.PayChannel>} value
 * @return {!proto.pb.CountryConfig} returns this
*/


proto.pb.CountryConfig.prototype.setPayChannelsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 40, value);
};
/**
 * @param {!proto.pb.PayChannel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.PayChannel}
 */


proto.pb.CountryConfig.prototype.addPayChannels = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 40, opt_value, proto.pb.PayChannel, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.CountryConfig} returns this
 */


proto.pb.CountryConfig.prototype.clearPayChannelsList = function () {
  return this.setPayChannelsList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.pb.PayChannel.repeatedFields_ = [40];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.PayChannel.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.PayChannel.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.PayChannel} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.PayChannel.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      osType: jspb.Message.getFieldWithDefault(msg, 3, 0),
      channel: jspb.Message.getFieldWithDefault(msg, 4, ""),
      payType: jspb.Message.getFieldWithDefault(msg, 5, 0),
      title: jspb.Message.getFieldWithDefault(msg, 6, ""),
      name: jspb.Message.getFieldWithDefault(msg, 7, ""),
      icon: jspb.Message.getFieldWithDefault(msg, 8, ""),
      enable: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
      discount: jspb.Message.getFieldWithDefault(msg, 10, 0),
      sort: jspb.Message.getFieldWithDefault(msg, 11, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0),
      commoditiesList: jspb.Message.toObjectList(msg.getCommoditiesList(), proto.pb.Commodity.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PayChannel}
 */


proto.pb.PayChannel.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PayChannel();
  return proto.pb.PayChannel.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PayChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PayChannel}
 */


proto.pb.PayChannel.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 3:
        var value =
        /** @type {!proto.pb.OsType} */
        reader.readEnum();
        msg.setOsType(value);
        break;

      case 4:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setChannel(value);
        break;

      case 5:
        var value =
        /** @type {!proto.pb.PayType} */
        reader.readEnum();
        msg.setPayType(value);
        break;

      case 6:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setTitle(value);
        break;

      case 7:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setIcon(value);
        break;

      case 9:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setEnable(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setDiscount(value);
        break;

      case 11:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setSort(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      case 40:
        var value = new proto.pb.Commodity();
        reader.readMessage(value, proto.pb.Commodity.deserializeBinaryFromReader);
        msg.addCommodities(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.PayChannel.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.PayChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PayChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.PayChannel.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getOsType();

  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }

  f = message.getChannel();

  if (f.length > 0) {
    writer.writeString(4, f);
  }

  f = message.getPayType();

  if (f !== 0.0) {
    writer.writeEnum(5, f);
  }

  f = message.getTitle();

  if (f.length > 0) {
    writer.writeString(6, f);
  }

  f = message.getName();

  if (f.length > 0) {
    writer.writeString(7, f);
  }

  f = message.getIcon();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getEnable();

  if (f) {
    writer.writeBool(9, f);
  }

  f = message.getDiscount();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }

  f = message.getSort();

  if (f !== 0) {
    writer.writeUint32(11, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }

  f = message.getCommoditiesList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(40, f, proto.pb.Commodity.serializeBinaryToWriter);
  }
};
/**
 * optional uint32 id = 1;
 * @return {number}
 */


proto.pb.PayChannel.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 area_id = 2;
 * @return {number}
 */


proto.pb.PayChannel.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional OsType os_type = 3;
 * @return {!proto.pb.OsType}
 */


proto.pb.PayChannel.prototype.getOsType = function () {
  return (
    /** @type {!proto.pb.OsType} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {!proto.pb.OsType} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setOsType = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};
/**
 * optional string channel = 4;
 * @return {string}
 */


proto.pb.PayChannel.prototype.getChannel = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setChannel = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional PayType pay_type = 5;
 * @return {!proto.pb.PayType}
 */


proto.pb.PayChannel.prototype.getPayType = function () {
  return (
    /** @type {!proto.pb.PayType} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {!proto.pb.PayType} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setPayType = function (value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};
/**
 * optional string title = 6;
 * @return {string}
 */


proto.pb.PayChannel.prototype.getTitle = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 6, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setTitle = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * optional string name = 7;
 * @return {string}
 */


proto.pb.PayChannel.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 7, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional string icon = 8;
 * @return {string}
 */


proto.pb.PayChannel.prototype.getIcon = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setIcon = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional bool enable = 9;
 * @return {boolean}
 */


proto.pb.PayChannel.prototype.getEnable = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 9, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setEnable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};
/**
 * optional uint32 discount = 10;
 * @return {number}
 */


proto.pb.PayChannel.prototype.getDiscount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setDiscount = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional uint32 sort = 11;
 * @return {number}
 */


proto.pb.PayChannel.prototype.getSort = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 11, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setSort = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.PayChannel.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.PayChannel.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};
/**
 * repeated Commodity commodities = 40;
 * @return {!Array<!proto.pb.Commodity>}
 */


proto.pb.PayChannel.prototype.getCommoditiesList = function () {
  return (
    /** @type{!Array<!proto.pb.Commodity>} */
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Commodity, 40)
  );
};
/**
 * @param {!Array<!proto.pb.Commodity>} value
 * @return {!proto.pb.PayChannel} returns this
*/


proto.pb.PayChannel.prototype.setCommoditiesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 40, value);
};
/**
 * @param {!proto.pb.Commodity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Commodity}
 */


proto.pb.PayChannel.prototype.addCommodities = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 40, opt_value, proto.pb.Commodity, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.PayChannel} returns this
 */


proto.pb.PayChannel.prototype.clearCommoditiesList = function () {
  return this.setCommoditiesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.PayRecord.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.PayRecord.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.PayRecord} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.PayRecord.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      userId: jspb.Message.getFieldWithDefault(msg, 4, 0),
      anchorId: jspb.Message.getFieldWithDefault(msg, 5, 0),
      commission: jspb.Message.getFieldWithDefault(msg, 6, 0),
      payType: jspb.Message.getFieldWithDefault(msg, 7, 0),
      payChannel: jspb.Message.getFieldWithDefault(msg, 8, ""),
      payStatus: jspb.Message.getFieldWithDefault(msg, 9, 0),
      country: jspb.Message.getFieldWithDefault(msg, 10, ""),
      currency: jspb.Message.getFieldWithDefault(msg, 11, ""),
      commodityId: jspb.Message.getFieldWithDefault(msg, 12, 0),
      desc: jspb.Message.getFieldWithDefault(msg, 13, ""),
      payOrderId: jspb.Message.getFieldWithDefault(msg, 14, ""),
      payUrl: jspb.Message.getFieldWithDefault(msg, 15, ""),
      payPrice: jspb.Message.getFieldWithDefault(msg, 16, 0),
      usdPrice: jspb.Message.getFieldWithDefault(msg, 17, 0),
      paidAt: jspb.Message.getFieldWithDefault(msg, 18, 0),
      amount: jspb.Message.getFieldWithDefault(msg, 19, 0),
      isSubscription: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
      queryAt: jspb.Message.getFieldWithDefault(msg, 21, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 30, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 31, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PayRecord}
 */


proto.pb.PayRecord.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PayRecord();
  return proto.pb.PayRecord.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PayRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PayRecord}
 */


proto.pb.PayRecord.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUserId(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAnchorId(value);
        break;

      case 6:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCommission(value);
        break;

      case 7:
        var value =
        /** @type {!proto.pb.PayType} */
        reader.readEnum();
        msg.setPayType(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setPayChannel(value);
        break;

      case 9:
        var value =
        /** @type {!proto.pb.PayStatus} */
        reader.readEnum();
        msg.setPayStatus(value);
        break;

      case 10:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setCountry(value);
        break;

      case 11:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setCurrency(value);
        break;

      case 12:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCommodityId(value);
        break;

      case 13:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setDesc(value);
        break;

      case 14:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setPayOrderId(value);
        break;

      case 15:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setPayUrl(value);
        break;

      case 16:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setPayPrice(value);
        break;

      case 17:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUsdPrice(value);
        break;

      case 18:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setPaidAt(value);
        break;

      case 19:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAmount(value);
        break;

      case 20:
        var value =
        /** @type {boolean} */
        reader.readBool();
        msg.setIsSubscription(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setQueryAt(value);
        break;

      case 30:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 31:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.PayRecord.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.PayRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PayRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.PayRecord.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getUserId();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }

  f = message.getAnchorId();

  if (f !== 0) {
    writer.writeUint32(5, f);
  }

  f = message.getCommission();

  if (f !== 0) {
    writer.writeUint32(6, f);
  }

  f = message.getPayType();

  if (f !== 0.0) {
    writer.writeEnum(7, f);
  }

  f = message.getPayChannel();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getPayStatus();

  if (f !== 0.0) {
    writer.writeEnum(9, f);
  }

  f = message.getCountry();

  if (f.length > 0) {
    writer.writeString(10, f);
  }

  f = message.getCurrency();

  if (f.length > 0) {
    writer.writeString(11, f);
  }

  f = message.getCommodityId();

  if (f !== 0) {
    writer.writeUint32(12, f);
  }

  f = message.getDesc();

  if (f.length > 0) {
    writer.writeString(13, f);
  }

  f = message.getPayOrderId();

  if (f.length > 0) {
    writer.writeString(14, f);
  }

  f = message.getPayUrl();

  if (f.length > 0) {
    writer.writeString(15, f);
  }

  f = message.getPayPrice();

  if (f !== 0) {
    writer.writeUint32(16, f);
  }

  f = message.getUsdPrice();

  if (f !== 0) {
    writer.writeUint32(17, f);
  }

  f = message.getPaidAt();

  if (f !== 0) {
    writer.writeUint32(18, f);
  }

  f = message.getAmount();

  if (f !== 0) {
    writer.writeUint32(19, f);
  }

  f = message.getIsSubscription();

  if (f) {
    writer.writeBool(20, f);
  }

  f = message.getQueryAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(30, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(31, f);
  }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 area_id = 3;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional uint32 user_id = 4;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getUserId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional uint32 anchor_id = 5;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getAnchorId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setAnchorId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional uint32 commission = 6;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getCommission = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setCommission = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional PayType pay_type = 7;
 * @return {!proto.pb.PayType}
 */


proto.pb.PayRecord.prototype.getPayType = function () {
  return (
    /** @type {!proto.pb.PayType} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {!proto.pb.PayType} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setPayType = function (value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};
/**
 * optional string pay_channel = 8;
 * @return {string}
 */


proto.pb.PayRecord.prototype.getPayChannel = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setPayChannel = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional PayStatus pay_status = 9;
 * @return {!proto.pb.PayStatus}
 */


proto.pb.PayRecord.prototype.getPayStatus = function () {
  return (
    /** @type {!proto.pb.PayStatus} */
    jspb.Message.getFieldWithDefault(this, 9, 0)
  );
};
/**
 * @param {!proto.pb.PayStatus} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setPayStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};
/**
 * optional string country = 10;
 * @return {string}
 */


proto.pb.PayRecord.prototype.getCountry = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 10, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setCountry = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};
/**
 * optional string currency = 11;
 * @return {string}
 */


proto.pb.PayRecord.prototype.getCurrency = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 11, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setCurrency = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};
/**
 * optional uint32 commodity_id = 12;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getCommodityId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 12, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setCommodityId = function (value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};
/**
 * optional string desc = 13;
 * @return {string}
 */


proto.pb.PayRecord.prototype.getDesc = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 13, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setDesc = function (value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};
/**
 * optional string pay_order_id = 14;
 * @return {string}
 */


proto.pb.PayRecord.prototype.getPayOrderId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 14, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setPayOrderId = function (value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};
/**
 * optional string pay_url = 15;
 * @return {string}
 */


proto.pb.PayRecord.prototype.getPayUrl = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 15, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setPayUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};
/**
 * optional uint32 pay_price = 16;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getPayPrice = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 16, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setPayPrice = function (value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};
/**
 * optional uint32 usd_price = 17;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getUsdPrice = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 17, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setUsdPrice = function (value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};
/**
 * optional uint32 paid_at = 18;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getPaidAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 18, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setPaidAt = function (value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};
/**
 * optional uint32 amount = 19;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getAmount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 19, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};
/**
 * optional bool is_subscription = 20;
 * @return {boolean}
 */


proto.pb.PayRecord.prototype.getIsSubscription = function () {
  return (
    /** @type {boolean} */
    jspb.Message.getBooleanFieldWithDefault(this, 20, false)
  );
};
/**
 * @param {boolean} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setIsSubscription = function (value) {
  return jspb.Message.setProto3BooleanField(this, 20, value);
};
/**
 * optional uint32 query_at = 21;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getQueryAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setQueryAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};
/**
 * optional uint32 updated_at = 30;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 30, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};
/**
 * optional uint32 created_at = 31;
 * @return {number}
 */


proto.pb.PayRecord.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 31, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.PayRecord} returns this
 */


proto.pb.PayRecord.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.Transaction.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.Transaction.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.Transaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.Transaction.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      traderType: jspb.Message.getFieldWithDefault(msg, 3, 0),
      traderId: jspb.Message.getFieldWithDefault(msg, 4, 0),
      sourceType: jspb.Message.getFieldWithDefault(msg, 5, 0),
      sourceId: jspb.Message.getFieldWithDefault(msg, 6, 0),
      amount: jspb.Message.getFieldWithDefault(msg, 7, 0),
      balance: jspb.Message.getFieldWithDefault(msg, 8, 0),
      desc: jspb.Message.getFieldWithDefault(msg, 9, ""),
      createdAt: jspb.Message.getFieldWithDefault(msg, 10, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Transaction}
 */


proto.pb.Transaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Transaction();
  return proto.pb.Transaction.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Transaction}
 */


proto.pb.Transaction.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {!proto.pb.EntityType} */
        reader.readEnum();
        msg.setTraderType(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setTraderId(value);
        break;

      case 5:
        var value =
        /** @type {!proto.pb.EntityType} */
        reader.readEnum();
        msg.setSourceType(value);
        break;

      case 6:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setSourceId(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setAmount(value);
        break;

      case 8:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setBalance(value);
        break;

      case 9:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setDesc(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.Transaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.Transaction.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getTraderType();

  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }

  f = message.getTraderId();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }

  f = message.getSourceType();

  if (f !== 0.0) {
    writer.writeEnum(5, f);
  }

  f = message.getSourceId();

  if (f !== 0) {
    writer.writeUint64(6, f);
  }

  f = message.getAmount();

  if (f !== 0) {
    writer.writeInt32(7, f);
  }

  f = message.getBalance();

  if (f !== 0) {
    writer.writeUint32(8, f);
  }

  f = message.getDesc();

  if (f.length > 0) {
    writer.writeString(9, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */


proto.pb.Transaction.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.Transaction.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional EntityType trader_type = 3;
 * @return {!proto.pb.EntityType}
 */


proto.pb.Transaction.prototype.getTraderType = function () {
  return (
    /** @type {!proto.pb.EntityType} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {!proto.pb.EntityType} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setTraderType = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};
/**
 * optional uint32 trader_id = 4;
 * @return {number}
 */


proto.pb.Transaction.prototype.getTraderId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setTraderId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional EntityType source_type = 5;
 * @return {!proto.pb.EntityType}
 */


proto.pb.Transaction.prototype.getSourceType = function () {
  return (
    /** @type {!proto.pb.EntityType} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {!proto.pb.EntityType} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setSourceType = function (value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};
/**
 * optional uint64 source_id = 6;
 * @return {number}
 */


proto.pb.Transaction.prototype.getSourceId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setSourceId = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional int32 amount = 7;
 * @return {number}
 */


proto.pb.Transaction.prototype.getAmount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional uint32 balance = 8;
 * @return {number}
 */


proto.pb.Transaction.prototype.getBalance = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setBalance = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};
/**
 * optional string desc = 9;
 * @return {string}
 */


proto.pb.Transaction.prototype.getDesc = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 9, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setDesc = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional uint32 created_at = 10;
 * @return {number}
 */


proto.pb.Transaction.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.Transaction} returns this
 */


proto.pb.Transaction.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.FileChunk.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.FileChunk.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.FileChunk} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.FileChunk.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
      filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
      type: jspb.Message.getFieldWithDefault(msg, 3, 0),
      content: msg.getContent_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FileChunk}
 */


proto.pb.FileChunk.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FileChunk();
  return proto.pb.FileChunk.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FileChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FileChunk}
 */


proto.pb.FileChunk.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setOffset(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setFilename(value);
        break;

      case 3:
        var value =
        /** @type {!proto.pb.FileType} */
        reader.readEnum();
        msg.setType(value);
        break;

      case 4:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setContent(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.FileChunk.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.FileChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FileChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.FileChunk.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOffset();

  if (f !== 0) {
    writer.writeUint32(1, f);
  }

  f = message.getFilename();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getType();

  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }

  f = message.getContent_asU8();

  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};
/**
 * optional uint32 offset = 1;
 * @return {number}
 */


proto.pb.FileChunk.prototype.getOffset = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.FileChunk} returns this
 */


proto.pb.FileChunk.prototype.setOffset = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string filename = 2;
 * @return {string}
 */


proto.pb.FileChunk.prototype.getFilename = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.FileChunk} returns this
 */


proto.pb.FileChunk.prototype.setFilename = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional FileType type = 3;
 * @return {!proto.pb.FileType}
 */


proto.pb.FileChunk.prototype.getType = function () {
  return (
    /** @type {!proto.pb.FileType} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {!proto.pb.FileType} value
 * @return {!proto.pb.FileChunk} returns this
 */


proto.pb.FileChunk.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};
/**
 * optional bytes content = 4;
 * @return {string}
 */


proto.pb.FileChunk.prototype.getContent = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};
/**
 * optional bytes content = 4;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */


proto.pb.FileChunk.prototype.getContent_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getContent())
  );
};
/**
 * optional bytes content = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */


proto.pb.FileChunk.prototype.getContent_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getContent())
  );
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.FileChunk} returns this
 */


proto.pb.FileChunk.prototype.setContent = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.FileRecord.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.FileRecord.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.FileRecord} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.FileRecord.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      areaId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      type: jspb.Message.getFieldWithDefault(msg, 4, 0),
      status: jspb.Message.getFieldWithDefault(msg, 5, 0),
      ownerType: jspb.Message.getFieldWithDefault(msg, 6, 0),
      ownerId: jspb.Message.getFieldWithDefault(msg, 7, 0),
      bindType: jspb.Message.getFieldWithDefault(msg, 8, 0),
      uri: jspb.Message.getFieldWithDefault(msg, 9, ""),
      size: jspb.Message.getFieldWithDefault(msg, 10, 0),
      thumb: jspb.Message.getFieldWithDefault(msg, 11, ""),
      likeCount: jspb.Message.getFieldWithDefault(msg, 12, 0),
      updatedAt: jspb.Message.getFieldWithDefault(msg, 20, 0),
      createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FileRecord}
 */


proto.pb.FileRecord.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FileRecord();
  return proto.pb.FileRecord.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FileRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FileRecord}
 */


proto.pb.FileRecord.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAppId(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setAreaId(value);
        break;

      case 4:
        var value =
        /** @type {!proto.pb.FileType} */
        reader.readEnum();
        msg.setType(value);
        break;

      case 5:
        var value =
        /** @type {!proto.pb.ReviewStatus} */
        reader.readEnum();
        msg.setStatus(value);
        break;

      case 6:
        var value =
        /** @type {!proto.pb.EntityType} */
        reader.readEnum();
        msg.setOwnerType(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setOwnerId(value);
        break;

      case 8:
        var value =
        /** @type {!proto.pb.EntityType} */
        reader.readEnum();
        msg.setBindType(value);
        break;

      case 9:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setUri(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setSize(value);
        break;

      case 11:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setThumb(value);
        break;

      case 12:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setLikeCount(value);
        break;

      case 20:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setUpdatedAt(value);
        break;

      case 21:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setCreatedAt(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.FileRecord.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.FileRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FileRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.FileRecord.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getAppId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getAreaId();

  if (f !== 0) {
    writer.writeUint32(3, f);
  }

  f = message.getType();

  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }

  f = message.getStatus();

  if (f !== 0.0) {
    writer.writeEnum(5, f);
  }

  f = message.getOwnerType();

  if (f !== 0.0) {
    writer.writeEnum(6, f);
  }

  f = message.getOwnerId();

  if (f !== 0) {
    writer.writeUint32(7, f);
  }

  f = message.getBindType();

  if (f !== 0.0) {
    writer.writeEnum(8, f);
  }

  f = message.getUri();

  if (f.length > 0) {
    writer.writeString(9, f);
  }

  f = message.getSize();

  if (f !== 0) {
    writer.writeUint32(10, f);
  }

  f = message.getThumb();

  if (f.length > 0) {
    writer.writeString(11, f);
  }

  f = message.getLikeCount();

  if (f !== 0) {
    writer.writeUint32(12, f);
  }

  f = message.getUpdatedAt();

  if (f !== 0) {
    writer.writeUint32(20, f);
  }

  f = message.getCreatedAt();

  if (f !== 0) {
    writer.writeUint32(21, f);
  }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */


proto.pb.FileRecord.prototype.getId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 app_id = 2;
 * @return {number}
 */


proto.pb.FileRecord.prototype.getAppId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setAppId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint32 area_id = 3;
 * @return {number}
 */


proto.pb.FileRecord.prototype.getAreaId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setAreaId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional FileType type = 4;
 * @return {!proto.pb.FileType}
 */


proto.pb.FileRecord.prototype.getType = function () {
  return (
    /** @type {!proto.pb.FileType} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {!proto.pb.FileType} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};
/**
 * optional ReviewStatus status = 5;
 * @return {!proto.pb.ReviewStatus}
 */


proto.pb.FileRecord.prototype.getStatus = function () {
  return (
    /** @type {!proto.pb.ReviewStatus} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/**
 * @param {!proto.pb.ReviewStatus} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};
/**
 * optional EntityType owner_type = 6;
 * @return {!proto.pb.EntityType}
 */


proto.pb.FileRecord.prototype.getOwnerType = function () {
  return (
    /** @type {!proto.pb.EntityType} */
    jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};
/**
 * @param {!proto.pb.EntityType} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setOwnerType = function (value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};
/**
 * optional uint32 owner_id = 7;
 * @return {number}
 */


proto.pb.FileRecord.prototype.getOwnerId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setOwnerId = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional EntityType bind_type = 8;
 * @return {!proto.pb.EntityType}
 */


proto.pb.FileRecord.prototype.getBindType = function () {
  return (
    /** @type {!proto.pb.EntityType} */
    jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};
/**
 * @param {!proto.pb.EntityType} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setBindType = function (value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};
/**
 * optional string uri = 9;
 * @return {string}
 */


proto.pb.FileRecord.prototype.getUri = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 9, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setUri = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional uint32 size = 10;
 * @return {number}
 */


proto.pb.FileRecord.prototype.getSize = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setSize = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional string thumb = 11;
 * @return {string}
 */


proto.pb.FileRecord.prototype.getThumb = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 11, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setThumb = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};
/**
 * optional uint32 like_count = 12;
 * @return {number}
 */


proto.pb.FileRecord.prototype.getLikeCount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 12, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setLikeCount = function (value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};
/**
 * optional uint32 updated_at = 20;
 * @return {number}
 */


proto.pb.FileRecord.prototype.getUpdatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};
/**
 * optional uint32 created_at = 21;
 * @return {number}
 */


proto.pb.FileRecord.prototype.getCreatedAt = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 21, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.FileRecord} returns this
 */


proto.pb.FileRecord.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */


proto.pb.StreamMessage.oneofGroups_ = [[3, 4, 5, 6, 7]];
/**
 * @enum {number}
 */

proto.pb.StreamMessage.BodyCase = {
  BODY_NOT_SET: 0,
  SUBSCRIBE: 3,
  ABORT: 4,
  STATUS: 5,
  CALL: 6,
  VIRTUAL: 7
};
/**
 * @return {proto.pb.StreamMessage.BodyCase}
 */

proto.pb.StreamMessage.prototype.getBodyCase = function () {
  return (
    /** @type {proto.pb.StreamMessage.BodyCase} */
    jspb.Message.computeOneofCase(this, proto.pb.StreamMessage.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.StreamMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.StreamMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.StreamMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.StreamMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      ts: jspb.Message.getFieldWithDefault(msg, 1, 0),
      type: jspb.Message.getFieldWithDefault(msg, 2, 0),
      subscribe: (f = msg.getSubscribe()) && proto.pb.StreamMessage.SubscribeBody.toObject(includeInstance, f),
      abort: (f = msg.getAbort()) && proto.pb.StreamMessage.AbortBody.toObject(includeInstance, f),
      status: (f = msg.getStatus()) && proto.pb.StreamMessage.StatusBody.toObject(includeInstance, f),
      call: (f = msg.getCall()) && proto.pb.StreamMessage.AiCallBody.toObject(includeInstance, f),
      virtual: (f = msg.getVirtual()) && proto.pb.StreamMessage.VirtualCallBody.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.StreamMessage}
 */


proto.pb.StreamMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.StreamMessage();
  return proto.pb.StreamMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.StreamMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.StreamMessage}
 */


proto.pb.StreamMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setTs(value);
        break;

      case 2:
        var value =
        /** @type {!proto.pb.StreamMessage.MessageType} */
        reader.readEnum();
        msg.setType(value);
        break;

      case 3:
        var value = new proto.pb.StreamMessage.SubscribeBody();
        reader.readMessage(value, proto.pb.StreamMessage.SubscribeBody.deserializeBinaryFromReader);
        msg.setSubscribe(value);
        break;

      case 4:
        var value = new proto.pb.StreamMessage.AbortBody();
        reader.readMessage(value, proto.pb.StreamMessage.AbortBody.deserializeBinaryFromReader);
        msg.setAbort(value);
        break;

      case 5:
        var value = new proto.pb.StreamMessage.StatusBody();
        reader.readMessage(value, proto.pb.StreamMessage.StatusBody.deserializeBinaryFromReader);
        msg.setStatus(value);
        break;

      case 6:
        var value = new proto.pb.StreamMessage.AiCallBody();
        reader.readMessage(value, proto.pb.StreamMessage.AiCallBody.deserializeBinaryFromReader);
        msg.setCall(value);
        break;

      case 7:
        var value = new proto.pb.StreamMessage.VirtualCallBody();
        reader.readMessage(value, proto.pb.StreamMessage.VirtualCallBody.deserializeBinaryFromReader);
        msg.setVirtual(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.StreamMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.StreamMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.StreamMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.StreamMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTs();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }

  f = message.getType();

  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }

  f = message.getSubscribe();

  if (f != null) {
    writer.writeMessage(3, f, proto.pb.StreamMessage.SubscribeBody.serializeBinaryToWriter);
  }

  f = message.getAbort();

  if (f != null) {
    writer.writeMessage(4, f, proto.pb.StreamMessage.AbortBody.serializeBinaryToWriter);
  }

  f = message.getStatus();

  if (f != null) {
    writer.writeMessage(5, f, proto.pb.StreamMessage.StatusBody.serializeBinaryToWriter);
  }

  f = message.getCall();

  if (f != null) {
    writer.writeMessage(6, f, proto.pb.StreamMessage.AiCallBody.serializeBinaryToWriter);
  }

  f = message.getVirtual();

  if (f != null) {
    writer.writeMessage(7, f, proto.pb.StreamMessage.VirtualCallBody.serializeBinaryToWriter);
  }
};
/**
 * @enum {number}
 */


proto.pb.StreamMessage.MessageType = {
  HEARTBEAT: 0,
  RECONFIG: 1,
  ABORTCALL: 2,
  SUBSCRIBESTATUS: 3,
  STATUSCHANGE: 4,
  AICALL: 5,
  VIRTUALCALL: 6
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */

proto.pb.StreamMessage.SubscribeBody.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.StreamMessage.SubscribeBody.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.StreamMessage.SubscribeBody.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.StreamMessage.SubscribeBody} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.StreamMessage.SubscribeBody.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      anchorIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.StreamMessage.SubscribeBody}
 */


proto.pb.StreamMessage.SubscribeBody.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.StreamMessage.SubscribeBody();
  return proto.pb.StreamMessage.SubscribeBody.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.StreamMessage.SubscribeBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.StreamMessage.SubscribeBody}
 */


proto.pb.StreamMessage.SubscribeBody.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var values =
        /** @type {!Array<number>} */
        reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];

        for (var i = 0; i < values.length; i++) {
          msg.addAnchorIds(values[i]);
        }

        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.StreamMessage.SubscribeBody.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.StreamMessage.SubscribeBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.StreamMessage.SubscribeBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.StreamMessage.SubscribeBody.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAnchorIdsList();

  if (f.length > 0) {
    writer.writePackedUint32(1, f);
  }
};
/**
 * repeated uint32 anchor_ids = 1;
 * @return {!Array<number>}
 */


proto.pb.StreamMessage.SubscribeBody.prototype.getAnchorIdsList = function () {
  return (
    /** @type {!Array<number>} */
    jspb.Message.getRepeatedField(this, 1)
  );
};
/**
 * @param {!Array<number>} value
 * @return {!proto.pb.StreamMessage.SubscribeBody} returns this
 */


proto.pb.StreamMessage.SubscribeBody.prototype.setAnchorIdsList = function (value) {
  return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pb.StreamMessage.SubscribeBody} returns this
 */


proto.pb.StreamMessage.SubscribeBody.prototype.addAnchorIds = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.StreamMessage.SubscribeBody} returns this
 */


proto.pb.StreamMessage.SubscribeBody.prototype.clearAnchorIdsList = function () {
  return this.setAnchorIdsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.StreamMessage.AbortBody.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.StreamMessage.AbortBody.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.StreamMessage.AbortBody} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.StreamMessage.AbortBody.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      callId: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.StreamMessage.AbortBody}
 */


proto.pb.StreamMessage.AbortBody.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.StreamMessage.AbortBody();
  return proto.pb.StreamMessage.AbortBody.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.StreamMessage.AbortBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.StreamMessage.AbortBody}
 */


proto.pb.StreamMessage.AbortBody.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readUint64();
        msg.setCallId(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.StreamMessage.AbortBody.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.StreamMessage.AbortBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.StreamMessage.AbortBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.StreamMessage.AbortBody.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCallId();

  if (f !== 0) {
    writer.writeUint64(1, f);
  }
};
/**
 * optional uint64 call_id = 1;
 * @return {number}
 */


proto.pb.StreamMessage.AbortBody.prototype.getCallId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.StreamMessage.AbortBody} returns this
 */


proto.pb.StreamMessage.AbortBody.prototype.setCallId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.StreamMessage.StatusBody.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.StreamMessage.StatusBody.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.StreamMessage.StatusBody} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.StreamMessage.StatusBody.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      entityType: jspb.Message.getFieldWithDefault(msg, 1, 0),
      entityId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      status: jspb.Message.getFieldWithDefault(msg, 3, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.StreamMessage.StatusBody}
 */


proto.pb.StreamMessage.StatusBody.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.StreamMessage.StatusBody();
  return proto.pb.StreamMessage.StatusBody.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.StreamMessage.StatusBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.StreamMessage.StatusBody}
 */


proto.pb.StreamMessage.StatusBody.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {!proto.pb.EntityType} */
        reader.readEnum();
        msg.setEntityType(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setEntityId(value);
        break;

      case 3:
        var value =
        /** @type {!proto.pb.OnlineStatus} */
        reader.readEnum();
        msg.setStatus(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.StreamMessage.StatusBody.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.StreamMessage.StatusBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.StreamMessage.StatusBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.StreamMessage.StatusBody.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEntityType();

  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }

  f = message.getEntityId();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getStatus();

  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
};
/**
 * optional EntityType entity_type = 1;
 * @return {!proto.pb.EntityType}
 */


proto.pb.StreamMessage.StatusBody.prototype.getEntityType = function () {
  return (
    /** @type {!proto.pb.EntityType} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {!proto.pb.EntityType} value
 * @return {!proto.pb.StreamMessage.StatusBody} returns this
 */


proto.pb.StreamMessage.StatusBody.prototype.setEntityType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional uint32 entity_id = 2;
 * @return {number}
 */


proto.pb.StreamMessage.StatusBody.prototype.getEntityId = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.StreamMessage.StatusBody} returns this
 */


proto.pb.StreamMessage.StatusBody.prototype.setEntityId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional OnlineStatus status = 3;
 * @return {!proto.pb.OnlineStatus}
 */


proto.pb.StreamMessage.StatusBody.prototype.getStatus = function () {
  return (
    /** @type {!proto.pb.OnlineStatus} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/**
 * @param {!proto.pb.OnlineStatus} value
 * @return {!proto.pb.StreamMessage.StatusBody} returns this
 */


proto.pb.StreamMessage.StatusBody.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.StreamMessage.AiCallBody.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.StreamMessage.AiCallBody.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.StreamMessage.AiCallBody} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.StreamMessage.AiCallBody.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      anchor: (f = msg.getAnchor()) && proto.pb.AnchorInfo.toObject(includeInstance, f),
      user: (f = msg.getUser()) && proto.pb.User.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.StreamMessage.AiCallBody}
 */


proto.pb.StreamMessage.AiCallBody.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.StreamMessage.AiCallBody();
  return proto.pb.StreamMessage.AiCallBody.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.StreamMessage.AiCallBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.StreamMessage.AiCallBody}
 */


proto.pb.StreamMessage.AiCallBody.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new proto.pb.AnchorInfo();
        reader.readMessage(value, proto.pb.AnchorInfo.deserializeBinaryFromReader);
        msg.setAnchor(value);
        break;

      case 2:
        var value = new proto.pb.User();
        reader.readMessage(value, proto.pb.User.deserializeBinaryFromReader);
        msg.setUser(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.StreamMessage.AiCallBody.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.StreamMessage.AiCallBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.StreamMessage.AiCallBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.StreamMessage.AiCallBody.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAnchor();

  if (f != null) {
    writer.writeMessage(1, f, proto.pb.AnchorInfo.serializeBinaryToWriter);
  }

  f = message.getUser();

  if (f != null) {
    writer.writeMessage(2, f, proto.pb.User.serializeBinaryToWriter);
  }
};
/**
 * optional AnchorInfo anchor = 1;
 * @return {?proto.pb.AnchorInfo}
 */


proto.pb.StreamMessage.AiCallBody.prototype.getAnchor = function () {
  return (
    /** @type{?proto.pb.AnchorInfo} */
    jspb.Message.getWrapperField(this, proto.pb.AnchorInfo, 1)
  );
};
/**
 * @param {?proto.pb.AnchorInfo|undefined} value
 * @return {!proto.pb.StreamMessage.AiCallBody} returns this
*/


proto.pb.StreamMessage.AiCallBody.prototype.setAnchor = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.StreamMessage.AiCallBody} returns this
 */


proto.pb.StreamMessage.AiCallBody.prototype.clearAnchor = function () {
  return this.setAnchor(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.pb.StreamMessage.AiCallBody.prototype.hasAnchor = function () {
  return jspb.Message.getField(this, 1) != null;
};
/**
 * optional User user = 2;
 * @return {?proto.pb.User}
 */


proto.pb.StreamMessage.AiCallBody.prototype.getUser = function () {
  return (
    /** @type{?proto.pb.User} */
    jspb.Message.getWrapperField(this, proto.pb.User, 2)
  );
};
/**
 * @param {?proto.pb.User|undefined} value
 * @return {!proto.pb.StreamMessage.AiCallBody} returns this
*/


proto.pb.StreamMessage.AiCallBody.prototype.setUser = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.StreamMessage.AiCallBody} returns this
 */


proto.pb.StreamMessage.AiCallBody.prototype.clearUser = function () {
  return this.setUser(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.pb.StreamMessage.AiCallBody.prototype.hasUser = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.StreamMessage.VirtualCallBody.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.StreamMessage.VirtualCallBody.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.StreamMessage.VirtualCallBody} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.StreamMessage.VirtualCallBody.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      anchor: (f = msg.getAnchor()) && proto.pb.AnchorInfo.toObject(includeInstance, f),
      videoUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.StreamMessage.VirtualCallBody}
 */


proto.pb.StreamMessage.VirtualCallBody.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.StreamMessage.VirtualCallBody();
  return proto.pb.StreamMessage.VirtualCallBody.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.StreamMessage.VirtualCallBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.StreamMessage.VirtualCallBody}
 */


proto.pb.StreamMessage.VirtualCallBody.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new proto.pb.AnchorInfo();
        reader.readMessage(value, proto.pb.AnchorInfo.deserializeBinaryFromReader);
        msg.setAnchor(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setVideoUrl(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.StreamMessage.VirtualCallBody.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.StreamMessage.VirtualCallBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.StreamMessage.VirtualCallBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.StreamMessage.VirtualCallBody.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAnchor();

  if (f != null) {
    writer.writeMessage(1, f, proto.pb.AnchorInfo.serializeBinaryToWriter);
  }

  f = message.getVideoUrl();

  if (f.length > 0) {
    writer.writeString(2, f);
  }
};
/**
 * optional AnchorInfo anchor = 1;
 * @return {?proto.pb.AnchorInfo}
 */


proto.pb.StreamMessage.VirtualCallBody.prototype.getAnchor = function () {
  return (
    /** @type{?proto.pb.AnchorInfo} */
    jspb.Message.getWrapperField(this, proto.pb.AnchorInfo, 1)
  );
};
/**
 * @param {?proto.pb.AnchorInfo|undefined} value
 * @return {!proto.pb.StreamMessage.VirtualCallBody} returns this
*/


proto.pb.StreamMessage.VirtualCallBody.prototype.setAnchor = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.StreamMessage.VirtualCallBody} returns this
 */


proto.pb.StreamMessage.VirtualCallBody.prototype.clearAnchor = function () {
  return this.setAnchor(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.pb.StreamMessage.VirtualCallBody.prototype.hasAnchor = function () {
  return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string video_url = 2;
 * @return {string}
 */


proto.pb.StreamMessage.VirtualCallBody.prototype.getVideoUrl = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.pb.StreamMessage.VirtualCallBody} returns this
 */


proto.pb.StreamMessage.VirtualCallBody.prototype.setVideoUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional uint64 ts = 1;
 * @return {number}
 */


proto.pb.StreamMessage.prototype.getTs = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.pb.StreamMessage} returns this
 */


proto.pb.StreamMessage.prototype.setTs = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional MessageType type = 2;
 * @return {!proto.pb.StreamMessage.MessageType}
 */


proto.pb.StreamMessage.prototype.getType = function () {
  return (
    /** @type {!proto.pb.StreamMessage.MessageType} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {!proto.pb.StreamMessage.MessageType} value
 * @return {!proto.pb.StreamMessage} returns this
 */


proto.pb.StreamMessage.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * optional SubscribeBody subscribe = 3;
 * @return {?proto.pb.StreamMessage.SubscribeBody}
 */


proto.pb.StreamMessage.prototype.getSubscribe = function () {
  return (
    /** @type{?proto.pb.StreamMessage.SubscribeBody} */
    jspb.Message.getWrapperField(this, proto.pb.StreamMessage.SubscribeBody, 3)
  );
};
/**
 * @param {?proto.pb.StreamMessage.SubscribeBody|undefined} value
 * @return {!proto.pb.StreamMessage} returns this
*/


proto.pb.StreamMessage.prototype.setSubscribe = function (value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.pb.StreamMessage.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.StreamMessage} returns this
 */


proto.pb.StreamMessage.prototype.clearSubscribe = function () {
  return this.setSubscribe(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.pb.StreamMessage.prototype.hasSubscribe = function () {
  return jspb.Message.getField(this, 3) != null;
};
/**
 * optional AbortBody abort = 4;
 * @return {?proto.pb.StreamMessage.AbortBody}
 */


proto.pb.StreamMessage.prototype.getAbort = function () {
  return (
    /** @type{?proto.pb.StreamMessage.AbortBody} */
    jspb.Message.getWrapperField(this, proto.pb.StreamMessage.AbortBody, 4)
  );
};
/**
 * @param {?proto.pb.StreamMessage.AbortBody|undefined} value
 * @return {!proto.pb.StreamMessage} returns this
*/


proto.pb.StreamMessage.prototype.setAbort = function (value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.pb.StreamMessage.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.StreamMessage} returns this
 */


proto.pb.StreamMessage.prototype.clearAbort = function () {
  return this.setAbort(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.pb.StreamMessage.prototype.hasAbort = function () {
  return jspb.Message.getField(this, 4) != null;
};
/**
 * optional StatusBody status = 5;
 * @return {?proto.pb.StreamMessage.StatusBody}
 */


proto.pb.StreamMessage.prototype.getStatus = function () {
  return (
    /** @type{?proto.pb.StreamMessage.StatusBody} */
    jspb.Message.getWrapperField(this, proto.pb.StreamMessage.StatusBody, 5)
  );
};
/**
 * @param {?proto.pb.StreamMessage.StatusBody|undefined} value
 * @return {!proto.pb.StreamMessage} returns this
*/


proto.pb.StreamMessage.prototype.setStatus = function (value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.pb.StreamMessage.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.StreamMessage} returns this
 */


proto.pb.StreamMessage.prototype.clearStatus = function () {
  return this.setStatus(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.pb.StreamMessage.prototype.hasStatus = function () {
  return jspb.Message.getField(this, 5) != null;
};
/**
 * optional AiCallBody call = 6;
 * @return {?proto.pb.StreamMessage.AiCallBody}
 */


proto.pb.StreamMessage.prototype.getCall = function () {
  return (
    /** @type{?proto.pb.StreamMessage.AiCallBody} */
    jspb.Message.getWrapperField(this, proto.pb.StreamMessage.AiCallBody, 6)
  );
};
/**
 * @param {?proto.pb.StreamMessage.AiCallBody|undefined} value
 * @return {!proto.pb.StreamMessage} returns this
*/


proto.pb.StreamMessage.prototype.setCall = function (value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.pb.StreamMessage.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.StreamMessage} returns this
 */


proto.pb.StreamMessage.prototype.clearCall = function () {
  return this.setCall(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.pb.StreamMessage.prototype.hasCall = function () {
  return jspb.Message.getField(this, 6) != null;
};
/**
 * optional VirtualCallBody virtual = 7;
 * @return {?proto.pb.StreamMessage.VirtualCallBody}
 */


proto.pb.StreamMessage.prototype.getVirtual = function () {
  return (
    /** @type{?proto.pb.StreamMessage.VirtualCallBody} */
    jspb.Message.getWrapperField(this, proto.pb.StreamMessage.VirtualCallBody, 7)
  );
};
/**
 * @param {?proto.pb.StreamMessage.VirtualCallBody|undefined} value
 * @return {!proto.pb.StreamMessage} returns this
*/


proto.pb.StreamMessage.prototype.setVirtual = function (value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.pb.StreamMessage.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.StreamMessage} returns this
 */


proto.pb.StreamMessage.prototype.clearVirtual = function () {
  return this.setVirtual(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.pb.StreamMessage.prototype.hasVirtual = function () {
  return jspb.Message.getField(this, 7) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pb.Empty.prototype.toObject = function (opt_includeInstance) {
    return proto.pb.Empty.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pb.Empty} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.pb.Empty.toObject = function (includeInstance, msg) {
    var f,
        obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Empty}
 */


proto.pb.Empty.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Empty();
  return proto.pb.Empty.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Empty}
 */


proto.pb.Empty.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.pb.Empty.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pb.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.pb.Empty.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};
/**
 * @enum {number}
 */


proto.pb.ErrorCode = {
  ERRNONE: 0,
  ERRNOTENOUGHBALANCE: 1,
  ERRCALLEEOFFLINE: 2,
  ERRCALLEEBUSY: 3,
  ERRBLOCKED: 4
};
/**
 * @enum {number}
 */

proto.pb.OsType = {
  OSUNKNOWN: 0,
  ANDROID: 1,
  IOS: 2
};
/**
 * @enum {number}
 */

proto.pb.FileType = {
  FILETYPEUNKNOWN: 0,
  FILEIMAGE: 1,
  FILEVIDEO: 2
};
/**
 * @enum {number}
 */

proto.pb.CurrencyType = {
  USD: 0
};
/**
 * @enum {number}
 */

proto.pb.OccupationType = {
  OCCUPATIONUNKNOWN: 0,
  OCCUPATIONINTERNET: 1,
  OCCUPATIONFINANCE: 2,
  OCCUPATIONGOVERNMENT: 3,
  OCCUPATIONEDUCATION: 4,
  OCCUPATIONMEDICAL: 5,
  OCCUPATIONCULTURE: 6,
  OCCUPATIONART: 7,
  OCCUPATIONARCHITECTURE: 8,
  OCCUPATIONLAW: 9,
  OCCUPATIONINDUSTRY: 10,
  OCCUPATIONSERVICE: 11,
  OCCUPATIONTRADING: 12,
  OCCUPATIONHOTEL: 13,
  OCCUPATIONAGRICULTURE: 14,
  OCCUPATIONSTUDENT: 15,
  OCCUPATIONAEROSPACE: 16,
  OCCUPATIONTRANSPORT: 17,
  OCCUPATIONDINING: 18,
  OCCUPATIONSPORTS: 19,
  OCCUPATIONNONPROFIT: 20,
  OCCUPATIONFREELANCER: 21,
  OCCUPATIONOTHER: 22
};
/**
 * @enum {number}
 */

proto.pb.AuthType = {
  AUTHUNKNOWN: 0,
  AUTHANONYMOUS: 1,
  AUTHEMAIL: 2,
  AUTHPHONE: 3,
  AUTHGOOGLE: 4,
  AUTHFACEBOOK: 5,
  AUTHAPPLE: 6
};
/**
 * @enum {number}
 */

proto.pb.EntityType = {
  ENTITYUNKNOWN: 0,
  ENTITYUSER: 1,
  ENTITYANCHOR: 2,
  ENTITYADMIN: 3,
  ENTITYGUILD: 4,
  ENTITYSUBSCRIPTION: 5,
  ENTITYPAYRECORD: 6,
  ENTITYGIFTRECORD: 7,
  ENTITYVIPRECORD: 8,
  ENTITYCALLRECORD: 9,
  ENTITYCHECKINRECORD: 10,
  ENTITYVIOLATIONRECORD: 11,
  ENTITYONLINERECORD: 12,
  ENTITYSETTLERECORD: 13
};
/**
 * @enum {number}
 */

proto.pb.NetworkType = {
  NETWORKUNKNOWN: 0,
  NETWORKWIFI: 1,
  NETWORK2G: 2,
  NETWORK3G: 3,
  NETWORK4G: 4,
  NETWORK5G: 5
};
/**
 * @enum {number}
 */

proto.pb.GenderType = {
  GENDERUNKNOWN: 0,
  MALE: 1,
  FEMALE: 2
};
/**
 * @enum {number}
 */

proto.pb.OnlineStatus = {
  ONLINESTATUSUNKNOWN: 0,
  OFFLINE: 1,
  ONLINE: 2,
  BUSY: 3,
  DND: 4
};
/**
 * @enum {number}
 */

proto.pb.BlockStatus = {
  BLOCKUNKNOWN: 0,
  BLOCKNONE: 1,
  BLOCKACCOUNT: 2,
  BLOCKDEVICE: 3,
  BLOCKALL: 4
};
/**
 * @enum {number}
 */

proto.pb.ToyaStatus = {
  HISTORYSYNCED: 0,
  REALTIMESYNCED: 1,
  IDCHANGED: 2
};
/**
 * @enum {number}
 */

proto.pb.AnchorLevel = {
  ANCHORLEVELUNKNOWN: 0,
  ANCHORPOOR: 1,
  ANCHORMODERATE: 2,
  ANCHORGOOD: 3,
  ANCHOREXCELLENT: 4
};
/**
 * @enum {number}
 */

proto.pb.ReviewStatus = {
  REVIEWSTATUSUNKNOWN: 0,
  EDITING: 1,
  SUBMITTED: 2,
  INREVIEW: 3,
  REJECTED: 4,
  APPROVED: 5
};
/**
 * @enum {number}
 */

proto.pb.RelationType = {
  RELATIONUNKNOWN: 0,
  RELATIONUSERFOLLOWANCHOR: 1,
  RELATIONANCHORFOLLOWUSER: 2,
  RELATIONUSERBLOCKANCHOR: 3,
  RELATIONANCHORBLOCKUSER: 4
};
/**
 * @enum {number}
 */

proto.pb.FollowStatus = {
  FOLLOWSTATUSNONE: 0,
  FOLLOWSTATUSFOLLOWER: 1,
  FOLLOWSTATUSFOLLOWED: 2,
  FOLLOWSTATUSFRIEND: 3
};
/**
 * @enum {number}
 */

proto.pb.CallType = {
  CALLTYPEUNKNOWN: 0,
  CALLBYUSER: 1,
  CALLBYANCHOR: 2,
  CALLBYUSERAI: 3,
  CALLBYANCHORAI: 4
};
/**
 * @enum {number}
 */

proto.pb.HangType = {
  HANGTYPEUNKNOWN: 0,
  HANGBYUSER: 1,
  HANGBYANCHOR: 2,
  NOANSWER: 3,
  BADNETWORK: 4,
  INSUFFICIENTBALANCE: 5,
  SYSTEMERROR: 6,
  AGORATIMEOUT: 7,
  AGORAERROR: 8
};
/**
 * @enum {number}
 */

proto.pb.CaptureStatus = {
  CAPTURESTATUSUNKNOWN: 0,
  CAPTUREWAITING: 1,
  CAPTUREONGOING: 2,
  CAPTURETRANSCODING: 3,
  CAPTURECOMPLETE: 4,
  CAPTUREERROR: 5
};
/**
 * @enum {number}
 */

proto.pb.GiftType = {
  GIFTTYPEUNKNOWN: 0,
  GIFTNORMAL: 1,
  GIFTANIMATION: 2
};
/**
 * @enum {number}
 */

proto.pb.ViolationType = {
  VIOLATIONTYPEUNKNOWN: 0,
  VIOLATIONFRAUD: 1,
  VIOLATIONPORN: 2,
  VIOLATIONREACTION: 3,
  VIOLATIONOTHER: 4
};
/**
 * @enum {number}
 */

proto.pb.ViolationScene = {
  VIOLATIONSCENEUNKNOWN: 0,
  VIOLATIONCALL: 1,
  VIOLATIONCHAT: 2,
  VIOLATIONPROFILE: 3
};
/**
 * @enum {number}
 */

proto.pb.SubscriptionPeriod = {
  SUBSCRIPTIONPERIODUNKNOWN: 0,
  SUBSCRIPTIONPERIODWEEKLY: 1,
  SUBSCRIPTIONPERIODMONTHLY: 2,
  SUBSCRIPTIONPERIODQUARTERLY: 3,
  SUBSCRIPTIONPERIODYEARLY: 4
};
/**
 * @enum {number}
 */

proto.pb.SubscriptionStatus = {
  SUBSCRIPTIONSTATUSUNKNOWN: 0,
  SUBSCRIPTIONSTATUSACTIVE: 1,
  SUBSCRIPTIONSTATUSCANCELLED: 2,
  SUBSCRIPTIONSTATUSREVOKED: 3,
  SUBSCRIPTIONSTATUSGRACE: 4,
  SUBSCRIPTIONSTATUSHOLD: 5,
  SUBSCRIPTIONSTATUSPAUSED: 6,
  SUBSCRIPTIONSTATUSEXPIRED: 7
};
/**
 * @enum {number}
 */

proto.pb.PayType = {
  PAYTYPEUNKNOWN: 0,
  GOOGLE: 1,
  APPLE: 2,
  XENDIT: 3,
  PAYERMAX: 4
};
/**
 * @enum {number}
 */

proto.pb.PayStatus = {
  PAYSTATUSUNKNOWN: 0,
  PAYSTATUSPENDING: 1,
  PAYSTATUSPAID: 2,
  PAYSTATUSCANCELLED: 3,
  PAYSTATUSREFUNDED: 4,
  PAYSTATUSEXPIRED: 5
};
goog.object.extend(exports, proto.pb);"},null]}