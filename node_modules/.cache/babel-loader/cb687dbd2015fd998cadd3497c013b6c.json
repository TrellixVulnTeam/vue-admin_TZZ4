{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/thread-loader/dist/cjs.js!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/src/api/services/user.js","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/api/services/user.js","mtime":1630296661054},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvbWVuZ3kvZGV2ZWxvcC9pd29yay9rYWZvL3Z1ZS1hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvbWVuZ3kvZGV2ZWxvcC9pd29yay9rYWZvL3Z1ZS1hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL21lbmd5L2RldmVsb3AvaXdvcmsva2Fmby92dWUtYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IHsgc2V0VG9rZW4sIGdldFRva2VuIH0gZnJvbSAnQC91dGlscy9jb29raWUnOwppbXBvcnQgeyBlcnJvciB9IGZyb20gJ0AvdXRpbHMvZXJyb3InOwppbXBvcnQgeyBsb2dpbk91dCB9IGZyb20gIkAvYXBpL2xvZ2luIjsKCnZhciBfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gX2RlZmF1bHQoZGVwcykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9kZWZhdWx0KTsKCiAgICB0aGlzLnByb3RvID0gZGVwcy5wcm90bzsKICAgIHRoaXMuY2xpZW50ID0gbmV3IGRlcHMucHJvdG8uQ21zQ2xpZW50KCJodHRwOi8vbG9jYWxob3N0OjEwMDAwIiwgbnVsbCwgbnVsbCk7CiAgfQogIC8qKgogICAqIOafpeivoueUqOaIt+WIl+ihqAogICAqIEBwYXJhbSBwYXJhbQogICAqIEBwYXJhbSBjYWxsYmFjawogICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKF9kZWZhdWx0LCBbewogICAga2V5OiAiZ2V0VXNlckxpc3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRVc2VyTGlzdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShwYXJhbSwgY2FsbGJhY2spIHsKICAgICAgICB2YXIgcmVxLCBtZXRhZGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXEgPSBuZXcgdGhpcy5wcm90by5Vc2VyTGlzdFJlcXVlc3QoKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRQYWdlTm8ocGFyYW0ucGFnZS5jdXJyZW50UGFnZSk7CiAgICAgICAgICAgICAgICByZXEuc2V0UGFnZVNpemUocGFyYW0ucGFnZS5wYWdlU2l6ZSk7CiAgICAgICAgICAgICAgICByZXEuc2V0VXNlcklkKHBhcmFtLmlkKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRBcmVhSWQocGFyYW0uYXJlYUlkKTsKICAgICAgICAgICAgICAgIHJlcS5zZXROaWNrbmFtZShwYXJhbS5uaWNrbmFtZSk7CiAgICAgICAgICAgICAgICByZXEuc2V0VmlwT25seShwYXJhbS52aXBPbmx5KTsKICAgICAgICAgICAgICAgIHJlcS5zZXREZXBvc2l0T25seShwYXJhbS5kZXBvc2l0T25seSk7CiAgICAgICAgICAgICAgICByZXEuc2V0TWluQmFsYW5jZShwYXJhbS5taW5CYWxhbmNlKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRDcmVhdGVkU3RhcnQocGFyYW0uY3JlYXRlZFN0YXJ0KTsKICAgICAgICAgICAgICAgIHJlcS5zZXRDcmVhdGVkRW5kKHBhcmFtLmNyZWF0ZWRFbmQpOwogICAgICAgICAgICAgICAgbWV0YWRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICd0b2tlbic6IGdldFRva2VuKCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5nZXRVc2VyTGlzdChyZXEsIG1ldGFkYXRhLCBmdW5jdGlvbiAoZXJyLCByZXNwKSB7CiAgICAgICAgICAgICAgICAgIGlmICghZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3IoZXJyKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0VXNlckxpc3QoX3gsIF94MikgewogICAgICAgIHJldHVybiBfZ2V0VXNlckxpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldFVzZXJMaXN0OwogICAgfSgpCiAgICAvKioKICAgICAqIOWFheWAvAogICAgICovCgogIH0sIHsKICAgIGtleTogImFkanVzdEJhbGFuY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9hZGp1c3RCYWxhbmNlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihwYXJhbSwgY2FsbGJhY2spIHsKICAgICAgICB2YXIgcmVxLCBtZXRhZGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmVxID0gbmV3IHRoaXMucHJvdG8uQWRqdXN0QmFsYW5jZVJlcXVlc3QoKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRFbnRpdHlUeXBlKHRoaXMucHJvdG8uRW50aXR5VHlwZS5FTlRJVFlVU0VSKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRFbnRpdHlJZChwYXJhbS5pZCk7CiAgICAgICAgICAgICAgICByZXEuc2V0QW1vdW50KHBhcmFtLmFtb3VudCk7CiAgICAgICAgICAgICAgICByZXEuc2V0U2VuZE5vdGlmeShwYXJhbS5zZW5kTm90aWZ5KTsKICAgICAgICAgICAgICAgIHJlcS5zZXREZXNjKHBhcmFtLmRlc2MpOwogICAgICAgICAgICAgICAgbWV0YWRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICd0b2tlbic6IGdldFRva2VuKCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5hZGp1c3RCYWxhbmNlKHJlcSwgbWV0YWRhdGEsIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHsKICAgICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlcnJvcihlcnIpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYWRqdXN0QmFsYW5jZShfeDMsIF94NCkgewogICAgICAgIHJldHVybiBfYWRqdXN0QmFsYW5jZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYWRqdXN0QmFsYW5jZTsKICAgIH0oKQogICAgLyoqCiAgICAgKiDmm7TmlrDnlKjmiLcKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVVc2VyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdXBkYXRlVXNlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMocGFyYW0sIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIHJlcSwgbWV0YWRhdGE7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJlcSA9IG5ldyB0aGlzLnByb3RvLlVzZXIoKTsKICAgICAgICAgICAgICAgIHJlcS5zZXRJZChwYXJhbS5pZCk7CiAgICAgICAgICAgICAgICByZXEuc2V0VmlwRW5kQXQocGFyYW0udmlwRW5kQXQuZ2V0VGltZSgpIC8gMTAwMCk7CiAgICAgICAgICAgICAgICBtZXRhZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgJ3Rva2VuJzogZ2V0VG9rZW4oKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50LnVwZGF0ZVVzZXIocmVxLCBtZXRhZGF0YSwgZnVuY3Rpb24gKGVyciwgcmVzcCkgewogICAgICAgICAgICAgICAgICBpZiAoIWVycikgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3ApOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVycm9yKGVycik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiB1cGRhdGVVc2VyKF94NSwgX3g2KSB7CiAgICAgICAgcmV0dXJuIF91cGRhdGVVc2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB1cGRhdGVVc2VyOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gX2RlZmF1bHQ7Cn0oKTsKCmV4cG9ydCB7IF9kZWZhdWx0IGFzIGRlZmF1bHQgfTs="},null]}