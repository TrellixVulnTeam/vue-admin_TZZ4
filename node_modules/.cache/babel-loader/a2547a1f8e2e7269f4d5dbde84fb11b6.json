{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/src/utils/dist.js","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/utils/dist.js","mtime":1632716371639},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmluaXREYXRhID0gaW5pdERhdGE7CmV4cG9ydHMuZ2V0QXJlYUxpc3QgPSBnZXRBcmVhTGlzdDsKZXhwb3J0cy5nZXRHdWlsZExpc3QgPSBnZXRHdWlsZExpc3Q7CmV4cG9ydHMuZ2V0QXBwTGlzdCA9IGdldEFwcExpc3Q7CmV4cG9ydHMuZ2V0UGF5Q2hhbm5lbExpc3QgPSBnZXRQYXlDaGFubmVsTGlzdDsKZXhwb3J0cy5nZXRDb21tb2RpdHlMaXN0ID0gZ2V0Q29tbW9kaXR5TGlzdDsKZXhwb3J0cy5nZXRBcnJOYW1lID0gZ2V0QXJyTmFtZTsKZXhwb3J0cy5nZXRBcHBOYW1lID0gZ2V0QXBwTmFtZTsKZXhwb3J0cy5nZXRCb29sID0gZ2V0Qm9vbDsKZXhwb3J0cy5nZXRBbmNob3JMZXZlbCA9IGdldEFuY2hvckxldmVsOwpleHBvcnRzLmdldFJldmlld1N0YXR1cyA9IGdldFJldmlld1N0YXR1czsKZXhwb3J0cy5nZXRSZXBvcnRlZFR5cGVzID0gZ2V0UmVwb3J0ZWRUeXBlczsKZXhwb3J0cy5nZXRSZXBvcnRlZFRpbWUgPSBnZXRSZXBvcnRlZFRpbWU7CmV4cG9ydHMuZ2V0T25saW5lU3RhdHVzID0gZ2V0T25saW5lU3RhdHVzOwpleHBvcnRzLmdldFZpb2xhdGlvblNjZW5lID0gZ2V0VmlvbGF0aW9uU2NlbmU7CmV4cG9ydHMuZ2V0QmxvY2tTdGF0dXMgPSBnZXRCbG9ja1N0YXR1czsKZXhwb3J0cy5nZXRCbG9ja1RpbWUgPSBnZXRCbG9ja1RpbWU7CmV4cG9ydHMuZ2V0UGF5U3RhdHVzID0gZ2V0UGF5U3RhdHVzOwpleHBvcnRzLmdldE9jY3VwYXRpb25UeXBlID0gZ2V0T2NjdXBhdGlvblR5cGU7CmV4cG9ydHMuZ2V0TWVzc2FnZVR5cGUgPSBnZXRNZXNzYWdlVHlwZTsKZXhwb3J0cy5nZXRBY3Rpb25UeXBlID0gZ2V0QWN0aW9uVHlwZTsKZXhwb3J0cy5nZXRDYWxsVHlwZSA9IGdldENhbGxUeXBlOwpleHBvcnRzLmdldEhhbmdUeXBlID0gZ2V0SGFuZ1R5cGU7CmV4cG9ydHMuZ2V0Q2FsbFN0YXR1cyA9IGdldENhbGxTdGF0dXM7CmV4cG9ydHMuZ2V0RW50aXR5VHlwZSA9IGdldEVudGl0eVR5cGU7CmV4cG9ydHMuZ2V0VHJhZGVyVHlwZSA9IGdldFRyYWRlclR5cGU7CmV4cG9ydHMuZ2V0U291cmNlVHlwZSA9IGdldFNvdXJjZVR5cGU7CmV4cG9ydHMuZ2V0U2V0dGxlU3RhdHVzID0gZ2V0U2V0dGxlU3RhdHVzOwpleHBvcnRzLmdldFBheVR5cGUgPSBnZXRQYXlUeXBlOwpleHBvcnRzLmdldE9zVHlwZSA9IGdldE9zVHlwZTsKZXhwb3J0cy5nZXRGaWxlVHlwZSA9IGdldEZpbGVUeXBlOwpleHBvcnRzLmdldEdlbmRlclR5cGUgPSBnZXRHZW5kZXJUeXBlOwpleHBvcnRzLmdldENvbW1vZGl0eSA9IGV4cG9ydHMuZ2V0UGF5Q2hhbm5lbCA9IGV4cG9ydHMuZ2V0QXBwcyA9IGV4cG9ydHMuZ2V0R3VpbGRzID0gZXhwb3J0cy5nZXRBcmVhcyA9IHZvaWQgMDsKCnZhciBfdXNlcnR5cGVfcGIgPSByZXF1aXJlKCJAL3Byb3RvL2pzL3VzZXJ0eXBlX3BiIik7Cgp2YXIgX2Ntc19wYiA9IHJlcXVpcmUoIkAvcHJvdG8vanMvY21zX3BiIik7Cgp2YXIgX2Nvb2tpZSA9IHJlcXVpcmUoIkAvdXRpbHMvY29va2llIik7Cgp2YXIgX3NlcnZlciA9IHJlcXVpcmUoIkAvZ3JwYy9zZXJ2ZXIiKTsKCmFzeW5jIGZ1bmN0aW9uIGluaXREYXRhKCkgewogIGNvbnN0IGFyZWFBcnIgPSBhd2FpdCBnZXRBcmVhcygpOwogIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oImFyZWFBcnIiLCBKU09OLnN0cmluZ2lmeShhcmVhQXJyKSk7CiAgY29uc3QgZ3VpbGRBcnIgPSBhd2FpdCBnZXRHdWlsZHMoKTsKICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJndWlsZEFyciIsIEpTT04uc3RyaW5naWZ5KGd1aWxkQXJyKSk7CiAgY29uc3QgYXBwQXJyID0gYXdhaXQgZ2V0QXBwcygpOwogIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oImFwcEFyciIsIEpTT04uc3RyaW5naWZ5KGFwcEFycikpOwogIGNvbnN0IHBheUNoYW5uZWxBcnIgPSBhd2FpdCBnZXRQYXlDaGFubmVsKCk7CiAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgicGF5Q2hhbm5lbEFyciIsIEpTT04uc3RyaW5naWZ5KHBheUNoYW5uZWxBcnIpKTsKICBjb25zdCBjb21tb2RpdHlBcnIgPSBhd2FpdCBnZXRDb21tb2RpdHkoKTsKICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJjb21tb2RpdHlBcnIiLCBKU09OLnN0cmluZ2lmeShjb21tb2RpdHlBcnIpKTsKfQoKY29uc3QgZ2V0QXJlYXMgPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgY29uc3QgZW1wdHkgPSBuZXcgX3VzZXJ0eXBlX3BiLkVtcHR5KCk7CiAgY29uc3QgbWV0YWRhdGEgPSB7CiAgICAndG9rZW4nOiAoMCwgX2Nvb2tpZS5nZXRUb2tlbikoKQogIH07CgogIF9zZXJ2ZXIuY21zU2VydmljZS5nZXRBcmVhTGlzdChlbXB0eSwgbWV0YWRhdGEsIChlcnIsIHJlc3ApID0+IHsKICAgIGlmICghZXJyKSB7CiAgICAgIGNvbnN0IGFyciA9IFtdOwogICAgICBjb25zdCBsaXN0ID0gcmVzcC5nZXRBcmVhc0xpc3QoKTsKICAgICAgbGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4gewogICAgICAgIGNvbnN0IGpzb24gPSB7CiAgICAgICAgICB2YWx1ZTogaXRlbS5nZXRJZCgpLAogICAgICAgICAgbGFiZWw6IGl0ZW0uZ2V0VGl0bGUoKQogICAgICAgIH07CiAgICAgICAgYXJyLnB1c2goanNvbik7CiAgICAgIH0pOwogICAgICByZXNvbHZlKGFycik7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgfQogIH0pOwp9KTsKCmV4cG9ydHMuZ2V0QXJlYXMgPSBnZXRBcmVhczsKCmZ1bmN0aW9uIGdldEFyZWFMaXN0KCkgewogIGxldCBhcmVhQXJyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiYXJlYUFyciIpOwogIHJldHVybiBKU09OLnBhcnNlKGFyZWFBcnIpOwp9IC8vIOW3peS8muWIl+ihqAoKCmNvbnN0IGdldEd1aWxkcyA9ICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICBjb25zdCByZXEgPSBuZXcgX3VzZXJ0eXBlX3BiLkVtcHR5KCk7CiAgY29uc3QgbWV0YWRhdGEgPSB7CiAgICAndG9rZW4nOiAoMCwgX2Nvb2tpZS5nZXRUb2tlbikoKQogIH07CgogIF9zZXJ2ZXIuY21zU2VydmljZS5nZXRHdWlsZExpc3QocmVxLCBtZXRhZGF0YSwgKGVyciwgcmVzcCkgPT4gewogICAgaWYgKCFlcnIpIHsKICAgICAgY29uc3QgYXJyID0gW107CiAgICAgIGNvbnN0IGxpc3QgPSByZXNwLmdldEd1aWxkc0xpc3QoKTsKICAgICAgbGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4gewogICAgICAgIGNvbnN0IGpzb24gPSB7CiAgICAgICAgICB2YWx1ZTogaXRlbS5nZXRJZCgpLAogICAgICAgICAgbGFiZWw6IGl0ZW0uZ2V0TmFtZSgpCiAgICAgICAgfTsKICAgICAgICBhcnIucHVzaChqc29uKTsKICAgICAgfSk7CiAgICAgIHJlc29sdmUoYXJyKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUubG9nKGVycik7CiAgICB9CiAgfSk7Cn0pOwoKZXhwb3J0cy5nZXRHdWlsZHMgPSBnZXRHdWlsZHM7CgpmdW5jdGlvbiBnZXRHdWlsZExpc3QoKSB7CiAgbGV0IGd1aWxkQXJyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiZ3VpbGRBcnIiKTsKICByZXR1cm4gSlNPTi5wYXJzZShndWlsZEFycik7Cn0gLy8g5bqU55So5YiX6KGoCgoKY29uc3QgZ2V0QXBwcyA9ICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICBjb25zdCByZXEgPSBuZXcgX3VzZXJ0eXBlX3BiLkVtcHR5KCk7CiAgY29uc3QgbWV0YWRhdGEgPSB7CiAgICAndG9rZW4nOiAoMCwgX2Nvb2tpZS5nZXRUb2tlbikoKQogIH07CgogIF9zZXJ2ZXIuY21zU2VydmljZS5nZXRBcHBMaXN0KHJlcSwgbWV0YWRhdGEsIChlcnIsIHJlc3ApID0+IHsKICAgIGlmICghZXJyKSB7CiAgICAgIGNvbnN0IGFyciA9IFtdOwogICAgICBjb25zdCBsaXN0ID0gcmVzcC5nZXRBcHBzTGlzdCgpOwogICAgICBsaXN0LmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7CiAgICAgICAgY29uc3QganNvbiA9IHsKICAgICAgICAgIHZhbHVlOiBpdGVtLmdldElkKCksCiAgICAgICAgICBsYWJlbDogaXRlbS5nZXRUaXRsZSgpLAogICAgICAgICAgb3M6IGl0ZW0uZ2V0T3NUeXBlKCksCiAgICAgICAgICBpc0FuY2hvcjogaXRlbS5nZXRJc0FuY2hvcigpLAogICAgICAgICAgYXJlYUlkczogaXRlbS5nZXRBcmVhSWRzTGlzdCgpCiAgICAgICAgfTsKICAgICAgICBhcnIucHVzaChqc29uKTsKICAgICAgfSk7CiAgICAgIHJlc29sdmUoYXJyKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUubG9nKGVycik7CiAgICB9CiAgfSk7Cn0pOwoKZXhwb3J0cy5nZXRBcHBzID0gZ2V0QXBwczsKCmZ1bmN0aW9uIGdldEFwcExpc3QoKSB7CiAgbGV0IGFwcEFyciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oImFwcEFyciIpOwogIHJldHVybiBKU09OLnBhcnNlKGFwcEFycik7Cn0gLy8g5pSv5LuY5rig6YGTCgoKY29uc3QgZ2V0UGF5Q2hhbm5lbCA9ICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICBjb25zdCByZXEgPSBuZXcgX2Ntc19wYi5QYXlDaGFubmVsTGlzdFJlcXVlc3QoKTsKICBjb25zdCBtZXRhZGF0YSA9IHsKICAgICd0b2tlbic6ICgwLCBfY29va2llLmdldFRva2VuKSgpCiAgfTsKCiAgX3NlcnZlci5jbXNTZXJ2aWNlLmdldFBheUNoYW5uZWxMaXN0KHJlcSwgbWV0YWRhdGEsIChlcnIsIHJlc3ApID0+IHsKICAgIGlmICghZXJyKSB7CiAgICAgIGNvbnN0IGFyciA9IFtdOwogICAgICBjb25zdCBsaXN0ID0gcmVzcC5nZXRDaGFubmVsc0xpc3QoKTsKICAgICAgbGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4gewogICAgICAgIGNvbnN0IGpzb24gPSB7CiAgICAgICAgICB2YWx1ZTogaXRlbS5nZXRJZCgpLAogICAgICAgICAgbGFiZWw6IGl0ZW0uZ2V0TmFtZSgpLAogICAgICAgICAgaWNvbjogaXRlbS5nZXRJY29uKCksCiAgICAgICAgICBhcmVhSWQ6IGl0ZW0uZ2V0QXJlYUlkKCkKICAgICAgICB9OwogICAgICAgIGFyci5wdXNoKGpzb24pOwogICAgICB9KTsKICAgICAgcmVzb2x2ZShhcnIpOwogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgIH0KICB9KTsKfSk7CgpleHBvcnRzLmdldFBheUNoYW5uZWwgPSBnZXRQYXlDaGFubmVsOwoKZnVuY3Rpb24gZ2V0UGF5Q2hhbm5lbExpc3QoYXJlYUlkKSB7CiAgbGV0IHN0ciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oInBheUNoYW5uZWxBcnIiKTsKICBsZXQgYXJyID0gSlNPTi5wYXJzZShzdHIpOwogIGxldCByZXN1bHQgPSBbXTsKICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgIGlmIChpdGVtLmFyZWFJZCA9PT0gYXJlYUlkKSB7CiAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pOwogICAgfQogIH0pOwogIHJldHVybiByZXN1bHQ7Cn0gLy8g5ZWG5ZOB5YiX6KGoCgoKY29uc3QgZ2V0Q29tbW9kaXR5ID0gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogIGNvbnN0IHJlcSA9IG5ldyBfY21zX3BiLkNvbW1vZGl0eUxpc3RSZXF1ZXN0KCk7CiAgY29uc3QgbWV0YWRhdGEgPSB7CiAgICAndG9rZW4nOiAoMCwgX2Nvb2tpZS5nZXRUb2tlbikoKQogIH07CgogIF9zZXJ2ZXIuY21zU2VydmljZS5nZXRDb21tb2RpdHlMaXN0KHJlcSwgbWV0YWRhdGEsIChlcnIsIHJlc3ApID0+IHsKICAgIGlmICghZXJyKSB7CiAgICAgIGNvbnN0IGFyciA9IFtdOwogICAgICBjb25zdCBsaXN0ID0gcmVzcC5nZXRDb21tb2RpdGllc0xpc3QoKTsKICAgICAgbGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4gewogICAgICAgIGNvbnN0IGpzb24gPSB7CiAgICAgICAgICB2YWx1ZTogaXRlbS5nZXRJZCgpLAogICAgICAgICAgbGFiZWw6IGl0ZW0uZ2V0VGl0bGUoKSwKICAgICAgICAgIG5hbWU6IGl0ZW0uZ2V0TmFtZSgpLAogICAgICAgICAgYXJlYUlkOiBpdGVtLmdldEFyZWFJZCgpLAogICAgICAgICAgYXBwSWQ6IGl0ZW0uZ2V0QXBwSWQoKQogICAgICAgIH07CiAgICAgICAgYXJyLnB1c2goanNvbik7CiAgICAgIH0pOwogICAgICByZXNvbHZlKGFycik7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgfQogIH0pOwp9KTsKCmV4cG9ydHMuZ2V0Q29tbW9kaXR5ID0gZ2V0Q29tbW9kaXR5OwoKZnVuY3Rpb24gZ2V0Q29tbW9kaXR5TGlzdCgpIHsKICBsZXQgc3RyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiY29tbW9kaXR5QXJyIik7CiAgbGV0IGFyciA9IEpTT04ucGFyc2Uoc3RyKTsgLy8gbGV0IHJlc3VsdCA9IFtdCiAgLy8gYXBwQXJyLmZvckVhY2goaXRlbSA9PiB7CiAgLy8gICAgIGlmKGl0ZW0uYXJlYUlkID09PSBhcmVhSWQgJiYgaXRlbS5hcHBJZCA9PT0gYXBwSWQpewogIC8vICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSkKICAvLyAgICAgfQogIC8vIH0pCgogIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIGdldEFyck5hbWUoYXJyLCBpZCkgewogIGxldCBsYWJlbCA9ICIiOwogIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgaWYgKGlkLnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICB9CiAgfSk7CiAgcmV0dXJuIGxhYmVsOwp9CgpmdW5jdGlvbiBnZXRBcHBOYW1lKGFyciwgaWQpIHsKICBsZXQgbGFiZWwgPSAiIjsKICBsZXQgb3MgPSAwOwogIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgaWYgKGlkLnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIG9zID0gaXRlbS5vczsKICAgIH0KICB9KTsKICByZXR1cm4gewogICAgbGFiZWw6IGxhYmVsLAogICAgb3M6IG9zCiAgfTsKfSAvLyDmmK/lkKYKCgpmdW5jdGlvbiBnZXRCb29sKCkgewogIHJldHVybiBbewogICAgdmFsdWU6IHRydWUsCiAgICBsYWJlbDogJ+aYrycKICB9LCB7CiAgICB2YWx1ZTogZmFsc2UsCiAgICBsYWJlbDogJ+WQpicKICB9XTsKfSAvLyDkuLvmkq3nrYnnuqcKCgpmdW5jdGlvbiBnZXRBbmNob3JMZXZlbChrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+W3ruWKsicKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5Lit562JJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICfoia/lpb0nCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+S8mOengCcKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOWuoeaguOeKtuaAgQoKCmZ1bmN0aW9uIGdldFJldmlld1N0YXR1cyhrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+acquWuoeaguCcKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5bey5o+Q5Lqk5a6h5qC4JwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICflrqHmoLjkuK0nCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+S4jemAmui/hycKICB9LCB7CiAgICB2YWx1ZTogNSwKICAgIGxhYmVsOiAn5a6h5qC46YCa6L+HJwogIH0sIHsKICAgIHZhbHVlOiA2LAogICAgbGFiZWw6ICflgZznlKgnCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vCgoKZnVuY3Rpb24gZ2V0UmVwb3J0ZWRUeXBlcygpIHsKICByZXR1cm4gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+eUqOaItycKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5Li75pKtJwogIH1dOwp9CgpmdW5jdGlvbiBnZXRSZXBvcnRlZFRpbWUoKSB7CiAgcmV0dXJuIFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfku4rlpKknCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+acgOi/kTPlpKknCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+acgOi/kTflpKknCiAgfV07Cn0gLy8g5Zyo57q/54q25oCBCgoKZnVuY3Rpb24gZ2V0T25saW5lU3RhdHVzKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDAsCiAgICBsYWJlbDogJ+WFqOmDqCcKICB9LCB7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn56a757q/JwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICflnKjnur8nCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+W/mee6vycKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn5Yu/5omwJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CgogICAgaWYgKGtleSA9PT0gMCkgewogICAgICByZXR1cm4gbGFiZWw7CiAgICB9CgogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0gLy8g6L+d6KeE5Zy65pmvCgoKZnVuY3Rpb24gZ2V0VmlvbGF0aW9uU2NlbmUoKSB7CiAgcmV0dXJuIFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfop4bpopHpgJror50nCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+iBiuWkqScKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn5Li75pKt6LWE5paZJwogIH1dOwp9IC8vIOWwgeemgeexu+WeiwoKCmZ1bmN0aW9uIGdldEJsb2NrU3RhdHVzKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+S4jeWwgeemgScKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5Y+R6YCB6K2m5ZGKJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICflsIHnpoHotKblj7cnCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+WwgeemgeaJgOaciScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0gLy8g5bCB56aB5pe25bi4CgoKZnVuY3Rpb24gZ2V0QmxvY2tUaW1lKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDUgKiA2MCwKICAgIGxhYmVsOiAnNeWIhumSnycKICB9LCB7CiAgICB2YWx1ZTogMzAgKiA2MCwKICAgIGxhYmVsOiAnMzDliIbpkp8nCiAgfSwgewogICAgdmFsdWU6IDYwICogNjAsCiAgICBsYWJlbDogJzHlsI/ml7YnCiAgfSwgewogICAgdmFsdWU6IDMgKiA2MCAqIDYwLAogICAgbGFiZWw6ICcz5bCP5pe2JwogIH0sIHsKICAgIHZhbHVlOiAyNCAqIDYwICogNjAsCiAgICBsYWJlbDogJzHlpKknCiAgfSwgewogICAgdmFsdWU6IDcgKiAyNCAqIDYwICogNjAsCiAgICBsYWJlbDogJzflpKknCiAgfSwgewogICAgdmFsdWU6IDMwICogMjQgKiA2MCAqIDYwLAogICAgbGFiZWw6ICcx5pyIJwogIH0sIHsKICAgIHZhbHVlOiAzNjUgKiAyNCAqIDYwICogNjAsCiAgICBsYWJlbDogJzHlubQnCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOaUr+S7mOeKtuaAgQoKCmZ1bmN0aW9uIGdldFBheVN0YXR1cyhrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+W+heaUr+S7mCcKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5bey5pSv5LuYJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICflt7Llj5bmtognCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+W3sumAgOasvicKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5bey6LaF5pe2JwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDogYzkuJrnsbvlnosKCgpmdW5jdGlvbiBnZXRPY2N1cGF0aW9uVHlwZShrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ0lUL+S6kuiBlOe9kS/pgJrkv6EnCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+WtpueUnycKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn5paH5YyWL+iJuuacrycKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5b2x6KeGL+WoseS5kCcKICB9LCB7CiAgICB2YWx1ZTogNSwKICAgIGxhYmVsOiAn6YeR6J6NJwogIH0sIHsKICAgIHZhbHVlOiA2LAogICAgbGFiZWw6ICfljLvoja8v5YGl5bq3JwogIH0sIHsKICAgIHZhbHVlOiA3LAogICAgbGFiZWw6ICflt6XkuJov5Yi26YCg5LiaJwogIH0sIHsKICAgIHZhbHVlOiA4LAogICAgbGFiZWw6ICflqpLkvZMv5YWs5YWzJwogIH0sIHsKICAgIHZhbHVlOiA5LAogICAgbGFiZWw6ICfpm7bllK4nCiAgfSwgewogICAgdmFsdWU6IDEwLAogICAgbGFiZWw6ICfmlZnogrIv56eR56CUJwogIH0sIHsKICAgIHZhbHVlOiAxMSwKICAgIGxhYmVsOiAn5YW25LuWJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDmtojmga/nsbvlnosKCgpmdW5jdGlvbiBnZXRNZXNzYWdlVHlwZShrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+aWh+acrCcKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn56S854mpJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICflhYXlgLwnCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+WbvueJhycKICB9LCB7CiAgICB2YWx1ZTogNSwKICAgIGxhYmVsOiAn6KeG6aKRJwogIH0sIHsKICAgIHZhbHVlOiA2LAogICAgbGFiZWw6ICfor63pn7MnCiAgfSwgewogICAgdmFsdWU6IDcsCiAgICBsYWJlbDogJ+S9jee9ricKICB9LCB7CiAgICB2YWx1ZTogOCwKICAgIGxhYmVsOiAn6Jma5ouf6KeG6aKRJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDliqjkvZznsbvlnosKCgpmdW5jdGlvbiBnZXRBY3Rpb25UeXBlKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDAsCiAgICBsYWJlbDogJ+WFqOmDqCcKICB9LCB7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn5ouS57ud5o6l5ZCsJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICfmnKrmjqXlkKwnCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+mAmuivnee7k+adnycKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5YWz5rOoJwogIH0sIHsKICAgIHZhbHVlOiA1LAogICAgbGFiZWw6ICflhYXlgLwnCiAgfSwgewogICAgdmFsdWU6IDYsCiAgICBsYWJlbDogJ+WPkemAgeekvOeJqScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0gLy8g6YCa6K+d5Y+R6LW357G75Z6LCgoKZnVuY3Rpb24gZ2V0Q2FsbFR5cGUoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfnlKjmiLflkbzlj6snCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+S4u+aSreWRvOWPqycKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn55So5oi3QWnlkbzlj6snCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+S4u+aSrUFp5ZG85Y+rJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDnu5PmnZ/nsbvlnosKCgpmdW5jdGlvbiBnZXRIYW5nVHlwZShrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+eUqOaIt+aMguaWrScKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5Li75pKt5oyC5patJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICfml6DkurrmjqXlkKwnCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+WuouaIt+err+e9kee7nOS4jeWlvScKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5L2Z6aKd5LiN6LazJwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICfns7vnu5/plJnor68nCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+WjsOe9kei2heaXticKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5aOw572R6ZSZ6K+vJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CgogICAgaWYgKGtleSA9PT0gMCkgewogICAgICByZXR1cm4gbGFiZWw7CiAgICB9CgogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0gLy8g57uT5p2f57G75Z6LCgoKZnVuY3Rpb24gZ2V0Q2FsbFN0YXR1cyhrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+etieW+heaOpemAmicKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn6YCa6K+d5LitJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICfpgJror53nu5PmnZ8nCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOWunuS9k+exu+WeiwoKCmZ1bmN0aW9uIGdldEVudGl0eVR5cGUoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfmma7pgJrnlKjmiLcnCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+S4u+aSrScKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn566h55CG5ZGYJwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICflhazkvJonCiAgfSwgewogICAgdmFsdWU6IDUsCiAgICBsYWJlbDogJ+iuoumYheiuouWNlScKICB9LCB7CiAgICB2YWx1ZTogNiwKICAgIGxhYmVsOiAn5YWF5YC86K6i5Y2VJwogIH0sIHsKICAgIHZhbHVlOiA3LAogICAgbGFiZWw6ICfnpLznianorrDlvZUnCiAgfSwgewogICAgdmFsdWU6IDgsCiAgICBsYWJlbDogJ1ZJUOiusOW9lScKICB9LCB7CiAgICB2YWx1ZTogOSwKICAgIGxhYmVsOiAn6YCa6K+d6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxMCwKICAgIGxhYmVsOiAn562+5Yiw6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxMSwKICAgIGxhYmVsOiAn5Li+5oql6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxMiwKICAgIGxhYmVsOiAn5Zyo57q/6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxMywKICAgIGxhYmVsOiAn57uT566X6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxNCwKICAgIGxhYmVsOiAn5aWW5oOp6K6w5b2VJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDnlKjmiLfnsbvlnosKCgpmdW5jdGlvbiBnZXRUcmFkZXJUeXBlKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDAsCiAgICBsYWJlbDogJ+WFqOmDqCcKICB9LCB7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn55So5oi3JwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICfkuLvmkq0nCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+euoeeQhuWRmCcKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0gLy8g5a6e5L2T57G75Z6LCgoKZnVuY3Rpb24gZ2V0U291cmNlVHlwZShrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDUsCiAgICBsYWJlbDogJ+iuoumYheiuouWNlScKICB9LCB7CiAgICB2YWx1ZTogNiwKICAgIGxhYmVsOiAn5YWF5YC86K6i5Y2VJwogIH0sIHsKICAgIHZhbHVlOiA3LAogICAgbGFiZWw6ICfnpLznianorrDlvZUnCiAgfSwgewogICAgdmFsdWU6IDgsCiAgICBsYWJlbDogJ1ZJUOiusOW9lScKICB9LCB7CiAgICB2YWx1ZTogOSwKICAgIGxhYmVsOiAn6YCa6K+d6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxMCwKICAgIGxhYmVsOiAn562+5Yiw6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxMSwKICAgIGxhYmVsOiAn5Li+5oql6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxMiwKICAgIGxhYmVsOiAn5Zyo57q/6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxMywKICAgIGxhYmVsOiAn57uT566X6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiAxNCwKICAgIGxhYmVsOiAn5aWW5oOp6K6w5b2VJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDnu5PnrpfnirbmgIEKCgpmdW5jdGlvbiBnZXRTZXR0bGVTdGF0dXMoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfpooTnu5PnrpcnCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+W3suWJlOmZpCcKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn57uT566X5a6M5oiQJwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICfmkqTplIDnu5PnrpcnCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOaUr+S7mOaWueW8jwoKCmZ1bmN0aW9uIGdldFBheVR5cGUoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAnR29vZ2xlJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICdBcHBsZScKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAnWGVuZGl0JwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICdQYXllck1heCcKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOezu+e7n+exu+WeiwoKCmZ1bmN0aW9uIGdldE9zVHlwZShrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ0FuZHJvaWQnCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ0lvcycKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOaWh+S7tuexu+WeiwoKCmZ1bmN0aW9uIGdldEZpbGVUeXBlKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDAsCiAgICBsYWJlbDogJ+WFqOmDqCcKICB9LCB7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn5Zu+54mHJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICfop4bpopEnCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+mfs+mikScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOaAp+WIq+exu+WeiwoKCmZ1bmN0aW9uIGdldEdlbmRlclR5cGUoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfnlLcnCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+WlsycKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9"},null]}