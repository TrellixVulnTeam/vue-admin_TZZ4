{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/src/utils/dist.js","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/utils/dist.js","mtime":1634124646365},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":1634111096329},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":1634111095606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}