{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/src/utils/dist.js","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/utils/dist.js","mtime":1635319171635},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmluaXREYXRhID0gaW5pdERhdGE7CmV4cG9ydHMuZ2V0Q3VycmVudFVzZXJBcmVhSWQgPSBnZXRDdXJyZW50VXNlckFyZWFJZDsKZXhwb3J0cy5nZXRDdXJyZW50VXNlck1vZHVsZXMgPSBnZXRDdXJyZW50VXNlck1vZHVsZXM7CmV4cG9ydHMuZ2V0QXJlYUxpc3QgPSBnZXRBcmVhTGlzdDsKZXhwb3J0cy5nZXRHdWlsZExpc3QgPSBnZXRHdWlsZExpc3Q7CmV4cG9ydHMuZ2V0R3VpbGRMaXN0QnlBcmVhSWQgPSBnZXRHdWlsZExpc3RCeUFyZWFJZDsKZXhwb3J0cy5nZXRBcHBMaXN0ID0gZ2V0QXBwTGlzdDsKZXhwb3J0cy5nZXRBcHBMaXN0QnlBcmVhSWQgPSBnZXRBcHBMaXN0QnlBcmVhSWQ7CmV4cG9ydHMuZ2V0UGF5Q2hhbm5lbExpc3QgPSBnZXRQYXlDaGFubmVsTGlzdDsKZXhwb3J0cy5nZXRDb21tb2RpdHlMaXN0ID0gZ2V0Q29tbW9kaXR5TGlzdDsKZXhwb3J0cy5pcFRvQWRkcmVzcyA9IGlwVG9BZGRyZXNzOwpleHBvcnRzLmdldEFyck5hbWUgPSBnZXRBcnJOYW1lOwpleHBvcnRzLmdldEFwcE5hbWUgPSBnZXRBcHBOYW1lOwpleHBvcnRzLnNldE9rID0gc2V0T2s7CmV4cG9ydHMuZ2V0Qm9vbCA9IGdldEJvb2w7CmV4cG9ydHMuZ2V0QW5jaG9yTGV2ZWwgPSBnZXRBbmNob3JMZXZlbDsKZXhwb3J0cy5nZXRSZXZpZXdTdGF0dXMgPSBnZXRSZXZpZXdTdGF0dXM7CmV4cG9ydHMuZ2V0UmVwb3J0ZWRUeXBlcyA9IGdldFJlcG9ydGVkVHlwZXM7CmV4cG9ydHMuZ2V0UmVwb3J0ZWRUaW1lID0gZ2V0UmVwb3J0ZWRUaW1lOwpleHBvcnRzLmdldE9ubGluZVN0YXR1cyA9IGdldE9ubGluZVN0YXR1czsKZXhwb3J0cy5nZXRWaW9sYXRpb25TY2VuZSA9IGdldFZpb2xhdGlvblNjZW5lOwpleHBvcnRzLmdldEJsb2NrU3RhdHVzID0gZ2V0QmxvY2tTdGF0dXM7CmV4cG9ydHMuZ2V0QmxvY2tUaW1lID0gZ2V0QmxvY2tUaW1lOwpleHBvcnRzLmdldFBheVN0YXR1cyA9IGdldFBheVN0YXR1czsKZXhwb3J0cy5nZXRPY2N1cGF0aW9uVHlwZSA9IGdldE9jY3VwYXRpb25UeXBlOwpleHBvcnRzLmdldE1lc3NhZ2VUeXBlID0gZ2V0TWVzc2FnZVR5cGU7CmV4cG9ydHMuZ2V0TWVzc2FnZVR5cGVSZWplY3QgPSBnZXRNZXNzYWdlVHlwZVJlamVjdDsKZXhwb3J0cy5nZXRBY3Rpb25UeXBlID0gZ2V0QWN0aW9uVHlwZTsKZXhwb3J0cy5nZXRWaW9sYXRpb25UeXBlID0gZ2V0VmlvbGF0aW9uVHlwZTsKZXhwb3J0cy5nZXRDYWxsVHlwZSA9IGdldENhbGxUeXBlOwpleHBvcnRzLmdldEhhbmdUeXBlID0gZ2V0SGFuZ1R5cGU7CmV4cG9ydHMuZ2V0Q2FsbFN0YXR1cyA9IGdldENhbGxTdGF0dXM7CmV4cG9ydHMuZ2V0RW50aXR5VHlwZSA9IGdldEVudGl0eVR5cGU7CmV4cG9ydHMuZ2V0VHJhZGVyVHlwZSA9IGdldFRyYWRlclR5cGU7CmV4cG9ydHMuZ2V0U291cmNlVHlwZSA9IGdldFNvdXJjZVR5cGU7CmV4cG9ydHMuZ2V0U2V0dGxlU3RhdHVzID0gZ2V0U2V0dGxlU3RhdHVzOwpleHBvcnRzLmdldFBheVR5cGUgPSBnZXRQYXlUeXBlOwpleHBvcnRzLmdldE9zVHlwZSA9IGdldE9zVHlwZTsKZXhwb3J0cy5nZXRGaWxlVHlwZSA9IGdldEZpbGVUeXBlOwpleHBvcnRzLmdldEdlbmRlclR5cGUgPSBnZXRHZW5kZXJUeXBlOwpleHBvcnRzLmdldFN0YXRJbnRlcnZhbCA9IGdldFN0YXRJbnRlcnZhbDsKZXhwb3J0cy5pbml0Q29tbW9kaXR5ID0gZXhwb3J0cy5pbml0UGF5Q2hhbm5lbCA9IGV4cG9ydHMuaW5pdEFwcHMgPSBleHBvcnRzLmluaXRHdWlsZHMgPSBleHBvcnRzLmluaXRBcmVhcyA9IGV4cG9ydHMuaW5pdEN1cnJlbnRVc2VySW5mbyA9IHZvaWQgMDsKCnZhciBfdXNlcnR5cGVfcGIgPSByZXF1aXJlKCJAL3Byb3RvL2pzL3VzZXJ0eXBlX3BiIik7Cgp2YXIgX2Ntc19wYiA9IHJlcXVpcmUoIkAvcHJvdG8vanMvY21zX3BiIik7Cgp2YXIgX2Nvb2tpZSA9IHJlcXVpcmUoIkAvdXRpbHMvY29va2llIik7Cgp2YXIgX3NlcnZlciA9IHJlcXVpcmUoIkAvZ3JwYy9zZXJ2ZXIiKTsKCnZhciBfYXBpID0gcmVxdWlyZSgiQC9hcGkvYXBpIik7Cgp2YXIgX2Vycm9yID0gcmVxdWlyZSgiQC91dGlscy9lcnJvciIpOwoKYXN5bmMgZnVuY3Rpb24gaW5pdERhdGEoKSB7CiAgbGV0IGFyZWFBcnIgPSBhd2FpdCBpbml0QXJlYXMoKTsgLy8gZ2V0QXJlYUxpc3QoKQogIC8vIGdldEd1aWxkTGlzdCgpCiAgLy8gZ2V0QXBwTGlzdCgpCiAgLy8gZ2V0UGF5Q2hhbm5lbExpc3QoKQogIC8vIGdldENvbW1vZGl0eUxpc3QoKQoKICBsZXQgZ3VpbGRBcnIgPSBhd2FpdCBpbml0R3VpbGRzKCk7CiAgbGV0IGN1cnJlbnRVc2VyID0gYXdhaXQgaW5pdEN1cnJlbnRVc2VySW5mbygpOwogIGxldCBhcHBzID0gYXdhaXQgaW5pdEFwcHMoKTsKICBsZXQgcGF5Q2hhbm5lbEFyciA9IGF3YWl0IGluaXRQYXlDaGFubmVsKCk7CiAgbGV0IGNvbW1vZGl0eUFyciA9IGF3YWl0IGluaXRDb21tb2RpdHkoKTsKfSAvLyBleHBvcnQgZnVuY3Rpb24gaW5pdEFzeW5jRGF0YSgpewovLyAgICAgZ2V0QXBwcyhmdW5jdGlvbiAoYXJyKXsKLy8gICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJhcHBBcnIiLCBKU09OLnN0cmluZ2lmeShhcnIpKTsKLy8gICAgIH0pCi8vICAgICBnZXRQYXlDaGFubmVsKGZ1bmN0aW9uKGFycil7Ci8vICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgicGF5Q2hhbm5lbEFyciIsIEpTT04uc3RyaW5naWZ5KGFycikpOwovLyAgICAgfSkKLy8gICAgIGdldENvbW1vZGl0eShmdW5jdGlvbihhcnIpewovLyAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJjb21tb2RpdHlBcnIiLCBKU09OLnN0cmluZ2lmeShhcnIpKQovLyAgICAgfSkKLy8KLy8gfQoKCmNvbnN0IGluaXRDdXJyZW50VXNlckluZm8gPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgY29uc3QgcmVxID0gbmV3IF91c2VydHlwZV9wYi5FbXB0eSgpOwogIGNvbnN0IG1ldGFkYXRhID0gewogICAgJ3Rva2VuJzogKDAsIF9jb29raWUuZ2V0VG9rZW4pKCkKICB9OwoKICBfc2VydmVyLmNtc1NlcnZpY2UuZ2V0QWRtaW5JbmZvKHJlcSwgbWV0YWRhdGEsIChlcnIsIHJlc3ApID0+IHsKICAgIGlmICghZXJyKSB7CiAgICAgIGNvbnN0IGpzb24gPSB7CiAgICAgICAgbmFtZTogcmVzcC5nZXROYW1lKCksCiAgICAgICAgZW1haWw6IHJlc3AuZ2V0RW1haWwoKSwKICAgICAgICBhcmVhSWQ6IHJlc3AuZ2V0QXJlYUlkKCksCiAgICAgICAgYXBwSWRzOiByZXNwLmdldEFwcElkc0xpc3QoKSwKICAgICAgICBtb2R1bGVzOiByZXNwLmdldE1vZHVsZXMoKQogICAgICB9OwogICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJjdXJyZW50VXNlciIsIEpTT04uc3RyaW5naWZ5KGpzb24pKTsKICAgICAgcmVzb2x2ZShqc29uKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUubG9nKCJpbml0Q3VycmVudFVzZXJJbmZvIDoiICsgZXJyKTsKICAgIH0KICB9KTsKfSk7CgpleHBvcnRzLmluaXRDdXJyZW50VXNlckluZm8gPSBpbml0Q3VycmVudFVzZXJJbmZvOwoKZnVuY3Rpb24gZ2V0Q3VycmVudFVzZXJBcmVhSWQoKSB7CiAgdHJ5IHsKICAgIGxldCBqc29uID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiY3VycmVudFVzZXIiKTsKCiAgICBpZiAoKDAsIF9hcGkuaXNFbXB0eSkoanNvbikpIHsKICAgICAgKDAsIF9lcnJvci5sb2dpbk91dCkoKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pLmFyZWFJZDsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIGNvbnNvbGUubG9nKGVycik7CiAgfQoKICByZXR1cm4gdW5kZWZpbmVkOwp9CgpmdW5jdGlvbiBnZXRDdXJyZW50VXNlck1vZHVsZXMoKSB7CiAgdHJ5IHsKICAgIGxldCBqc29uID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiY3VycmVudFVzZXIiKTsKICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pLm1vZHVsZXM7CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBjb25zb2xlLmxvZyhlcnIpOwogIH0KCiAgcmV0dXJuIHVuZGVmaW5lZDsKfQoKY29uc3QgaW5pdEFyZWFzID0gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogIGNvbnN0IGVtcHR5ID0gbmV3IF91c2VydHlwZV9wYi5FbXB0eSgpOwogIGNvbnN0IG1ldGFkYXRhID0gewogICAgJ3Rva2VuJzogKDAsIF9jb29raWUuZ2V0VG9rZW4pKCkKICB9OwoKICBfc2VydmVyLmNtc1NlcnZpY2UuZ2V0QXJlYUxpc3QoZW1wdHksIG1ldGFkYXRhLCAoZXJyLCByZXNwKSA9PiB7CiAgICBpZiAoIWVycikgewogICAgICBjb25zdCBhcnIgPSBbXTsKICAgICAgY29uc3QgbGlzdCA9IHJlc3AuZ2V0QXJlYXNMaXN0KCk7CiAgICAgIGxpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHsKICAgICAgICBjb25zdCBqc29uID0gewogICAgICAgICAgdmFsdWU6IGl0ZW0uZ2V0SWQoKSwKICAgICAgICAgIGxhYmVsOiBpdGVtLmdldFRpdGxlKCkKICAgICAgICB9OwogICAgICAgIGFyci5wdXNoKGpzb24pOwogICAgICB9KTsKICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgiYXJlYUFyciIsIEpTT04uc3RyaW5naWZ5KGFycikpOwogICAgICByZXNvbHZlKGFycik7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmxvZygiaW5pdEFyZWFzOiIgKyBlcnIpOwogICAgfQogIH0pOwp9KTsKCmV4cG9ydHMuaW5pdEFyZWFzID0gaW5pdEFyZWFzOwoKZnVuY3Rpb24gZ2V0QXJlYUxpc3QoaXNTaG93QWxsKSB7CiAgbGV0IGpzb24gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJhcmVhQXJyIik7CgogIGlmICgoMCwgX2FwaS5pc0VtcHR5KShqc29uKSkgewogICAgaW5pdEFyZWFzKCkudGhlbigpOwogIH0gZWxzZSB7CiAgICBsZXQgYXJyID0gSlNPTi5wYXJzZShqc29uKTsKICAgIHJldHVybiBzZXRPayhpc1Nob3dBbGwsIGFycik7CiAgfQp9IC8vIOW3peS8muWIl+ihqAoKCmNvbnN0IGluaXRHdWlsZHMgPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgY29uc3QgcmVxID0gbmV3IF91c2VydHlwZV9wYi5FbXB0eSgpOwogIGNvbnN0IG1ldGFkYXRhID0gewogICAgJ3Rva2VuJzogKDAsIF9jb29raWUuZ2V0VG9rZW4pKCkKICB9OwoKICBfc2VydmVyLmNtc1NlcnZpY2UuZ2V0R3VpbGRMaXN0KHJlcSwgbWV0YWRhdGEsIChlcnIsIHJlc3ApID0+IHsKICAgIGlmICghZXJyKSB7CiAgICAgIGNvbnN0IGFyciA9IFtdOwogICAgICBjb25zdCBsaXN0ID0gcmVzcC5nZXRHdWlsZHNMaXN0KCk7CiAgICAgIGxpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHsKICAgICAgICBjb25zdCBqc29uID0gewogICAgICAgICAgdmFsdWU6IGl0ZW0uZ2V0SWQoKSwKICAgICAgICAgIGxhYmVsOiBpdGVtLmdldE5hbWUoKSwKICAgICAgICAgIGFyZWFJZDogaXRlbS5nZXRBcmVhSWQoKQogICAgICAgIH07CiAgICAgICAgYXJyLnB1c2goanNvbik7CiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZygi5Yid5aeL5YyW5bel5LyaOiIgKyBKU09OLnN0cmluZ2lmeShhcnIpKTsKICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgiZ3VpbGRBcnIiLCBKU09OLnN0cmluZ2lmeShhcnIpKTsKICAgICAgcmVzb2x2ZShhcnIpOwogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5sb2coImluaXRHdWlsZHM6IiArIGVycik7CiAgICB9CiAgfSk7Cn0pOwoKZXhwb3J0cy5pbml0R3VpbGRzID0gaW5pdEd1aWxkczsKCmZ1bmN0aW9uIGdldEd1aWxkTGlzdChpc1Nob3dBbGwpIHsKICBsZXQganNvbiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oImd1aWxkQXJyIik7CgogIGlmICgoMCwgX2FwaS5pc0VtcHR5KShqc29uKSkgewogICAgaW5pdEd1aWxkcygpLnRoZW4oKTsKICB9IGVsc2UgewogICAgbGV0IGFyciA9IEpTT04ucGFyc2UoanNvbik7CiAgICByZXR1cm4gc2V0T2soaXNTaG93QWxsLCBhcnIpOwogIH0KfQoKZnVuY3Rpb24gZ2V0R3VpbGRMaXN0QnlBcmVhSWQodmFsLCBpc1Nob3dBbGwpIHsKICBsZXQgZ3VpbGRMaXN0ID0gZ2V0R3VpbGRMaXN0KGZhbHNlKTsKICBsZXQgbmV3TGlzdCA9IFtdOwoKICBpZiAodmFsID09PSAwKSB7CiAgICBuZXdMaXN0ID0gZ3VpbGRMaXN0OwogIH0gZWxzZSB7CiAgICBndWlsZExpc3QuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGl0ZW0uYXJlYUlkID09PSB2YWwpIHsKICAgICAgICBuZXdMaXN0LnB1c2goaXRlbSk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgcmV0dXJuIHNldE9rKGlzU2hvd0FsbCwgbmV3TGlzdCk7Cn0gLy8g5bqU55So5YiX6KGoCgoKY29uc3QgaW5pdEFwcHMgPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgY29uc3QgcmVxID0gbmV3IF9jbXNfcGIuQXBwTGlzdFJlcXVlc3QoKTsKICBjb25zdCBtZXRhZGF0YSA9IHsKICAgICd0b2tlbic6ICgwLCBfY29va2llLmdldFRva2VuKSgpCiAgfTsKCiAgX3NlcnZlci5jbXNTZXJ2aWNlLmdldEFwcExpc3QocmVxLCBtZXRhZGF0YSwgKGVyciwgcmVzcCkgPT4gewogICAgaWYgKCFlcnIpIHsKICAgICAgY29uc3QgYXJyID0gW107CiAgICAgIGNvbnN0IGxpc3QgPSByZXNwLmdldEFwcHNMaXN0KCk7CiAgICAgIGxpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHsKICAgICAgICBjb25zdCBqc29uID0gewogICAgICAgICAgdmFsdWU6IGl0ZW0uZ2V0SWQoKSwKICAgICAgICAgIGxhYmVsOiBpdGVtLmdldFRpdGxlKCksCiAgICAgICAgICBvczogaXRlbS5nZXRPc1R5cGUoKSwKICAgICAgICAgIGlzQW5jaG9yOiBpdGVtLmdldElzQW5jaG9yKCksCiAgICAgICAgICBhcmVhSWRzOiBpdGVtLmdldEFyZWFJZHNMaXN0KCkKICAgICAgICB9OwogICAgICAgIGFyci5wdXNoKGpzb24pOwogICAgICB9KTsKICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgiYXBwQXJyIiwgSlNPTi5zdHJpbmdpZnkoYXJyKSk7CiAgICAgIHJlc29sdmUoYXJyKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUubG9nKCJpbml0QXBwczoiICsgZXJyKTsKICAgIH0KICB9KTsKfSk7CgpleHBvcnRzLmluaXRBcHBzID0gaW5pdEFwcHM7CgpmdW5jdGlvbiBnZXRBcHBMaXN0KGlzTm9BbmNob3IsIGlzU2hvd0FsbCkgewogIGxldCBqc29uID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiYXBwQXJyIik7CiAgbGV0IGFyciA9IFtdOwoKICBpZiAoKDAsIF9hcGkuaXNFbXB0eSkoanNvbikpIHsKICAgIGluaXRBcHBzKCkudGhlbigpOwogIH0gZWxzZSB7CiAgICBhcnIgPSBKU09OLnBhcnNlKGpzb24pOwogIH0KCiAgaWYgKGlzTm9BbmNob3IpIHsKICAgIGxldCByZXN1bHQgPSBbXTsKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoIWl0ZW0uaXNBbmNob3IpIHsKICAgICAgICByZXN1bHQucHVzaChpdGVtKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gc2V0T2soaXNTaG93QWxsLCByZXN1bHQpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gc2V0T2soaXNTaG93QWxsLCBhcnIpOwogIH0KfQoKZnVuY3Rpb24gZ2V0QXBwTGlzdEJ5QXJlYUlkKHZhbCwgaXNGaWx0ZXIsIGlzU2hvd0FsbCkgewogIGxldCBhcHBzID0gZ2V0QXBwTGlzdChpc0ZpbHRlciwgZmFsc2UpOwogIGxldCBuZXdBcHBzID0gW107CgogIGlmICh2YWwgPT09IDApIHsKICAgIG5ld0FwcHMgPSBhcHBzOwogIH0gZWxzZSB7CiAgICBhcHBzLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChpdGVtLmFyZWFJZHMuaW5kZXhPZih2YWwpID49IDApIHsKICAgICAgICBuZXdBcHBzLnB1c2goaXRlbSk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgcmV0dXJuIHNldE9rKGlzU2hvd0FsbCwgbmV3QXBwcyk7Cn0gLy8g5pSv5LuY5rig6YGTCgoKY29uc3QgaW5pdFBheUNoYW5uZWwgPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgY29uc3QgcmVxID0gbmV3IF9jbXNfcGIuUGF5Q2hhbm5lbExpc3RSZXF1ZXN0KCk7CiAgY29uc3QgbWV0YWRhdGEgPSB7CiAgICAndG9rZW4nOiAoMCwgX2Nvb2tpZS5nZXRUb2tlbikoKQogIH07CgogIF9zZXJ2ZXIuY21zU2VydmljZS5nZXRQYXlDaGFubmVsTGlzdChyZXEsIG1ldGFkYXRhLCAoZXJyLCByZXNwKSA9PiB7CiAgICBpZiAoIWVycikgewogICAgICBjb25zdCBhcnIgPSBbXTsKICAgICAgY29uc3QgbGlzdCA9IHJlc3AuZ2V0Q2hhbm5lbHNMaXN0KCk7CiAgICAgIGNvbnNvbGUubG9nKCJnZXRQYXlDaGFubmVsIGxpc3Q6IiArIGxpc3QpOwogICAgICBsaXN0LmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7CiAgICAgICAgY29uc3QganNvbiA9IHsKICAgICAgICAgIHZhbHVlOiBpdGVtLmdldElkKCksCiAgICAgICAgICBsYWJlbDogaXRlbS5nZXROYW1lKCksCiAgICAgICAgICBpY29uOiBpdGVtLmdldEljb24oKSwKICAgICAgICAgIGFyZWFJZDogaXRlbS5nZXRBcmVhSWQoKQogICAgICAgIH07CiAgICAgICAgYXJyLnB1c2goanNvbik7CiAgICAgIH0pOwogICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJwYXlDaGFubmVsQXJyIiwgSlNPTi5zdHJpbmdpZnkoYXJyKSk7CiAgICAgIHJlc29sdmUoYXJyKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUubG9nKCJpbml0UGF5Q2hhbm5lbDoiICsgZXJyKTsKICAgIH0KICB9KTsKfSk7CgpleHBvcnRzLmluaXRQYXlDaGFubmVsID0gaW5pdFBheUNoYW5uZWw7CgpmdW5jdGlvbiBnZXRQYXlDaGFubmVsTGlzdChhcmVhSWQpIHsKICBsZXQgc3RyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgicGF5Q2hhbm5lbEFyciIpOwoKICBpZiAoKDAsIF9hcGkuaXNFbXB0eSkoc3RyKSkgewogICAgaW5pdFBheUNoYW5uZWwoKS50aGVuKCk7CiAgfSBlbHNlIHsKICAgIGxldCBhcnIgPSBKU09OLnBhcnNlKHN0cik7CiAgICBsZXQgcmVzdWx0ID0gW107CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGl0ZW0uYXJlYUlkID09PSBhcmVhSWQpIHsKICAgICAgICByZXN1bHQucHVzaChpdGVtKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gc2V0T2soZmFsc2UsIHJlc3VsdCk7CiAgfQp9IC8vIOWVhuWTgeWIl+ihqAoKCmNvbnN0IGluaXRDb21tb2RpdHkgPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgY29uc3QgcmVxID0gbmV3IF9jbXNfcGIuQ29tbW9kaXR5TGlzdFJlcXVlc3QoKTsKICBjb25zdCBtZXRhZGF0YSA9IHsKICAgICd0b2tlbic6ICgwLCBfY29va2llLmdldFRva2VuKSgpCiAgfTsKCiAgX3NlcnZlci5jbXNTZXJ2aWNlLmdldENvbW1vZGl0eUxpc3QocmVxLCBtZXRhZGF0YSwgKGVyciwgcmVzcCkgPT4gewogICAgaWYgKCFlcnIpIHsKICAgICAgY29uc3QgYXJyID0gW107CiAgICAgIGNvbnN0IGxpc3QgPSByZXNwLmdldENvbW1vZGl0aWVzTGlzdCgpOwogICAgICBsaXN0LmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7CiAgICAgICAgY29uc3QganNvbiA9IHsKICAgICAgICAgIHZhbHVlOiBpdGVtLmdldElkKCksCiAgICAgICAgICBsYWJlbDogaXRlbS5nZXRUaXRsZSgpLAogICAgICAgICAgbmFtZTogaXRlbS5nZXROYW1lKCksCiAgICAgICAgICBhcmVhSWQ6IGl0ZW0uZ2V0QXJlYUlkKCksCiAgICAgICAgICBhcHBJZDogaXRlbS5nZXRBcHBJZCgpCiAgICAgICAgfTsKICAgICAgICBhcnIucHVzaChqc29uKTsKICAgICAgfSk7CiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oImNvbW1vZGl0eUFyciIsIEpTT04uc3RyaW5naWZ5KGFycikpOwogICAgICByZXNvbHZlKGFycik7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmxvZygiaW5pdENvbW1vZGl0eToiICsgZXJyKTsKICAgIH0KICB9KTsKfSk7CgpleHBvcnRzLmluaXRDb21tb2RpdHkgPSBpbml0Q29tbW9kaXR5OwoKZnVuY3Rpb24gZ2V0Q29tbW9kaXR5TGlzdCgpIHsKICBsZXQgc3RyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiY29tbW9kaXR5QXJyIik7CgogIGlmICgoMCwgX2FwaS5pc0VtcHR5KShzdHIpKSB7CiAgICBpbml0Q29tbW9kaXR5KCkudGhlbigpOwogIH0gZWxzZSB7CiAgICBsZXQgYXJyID0gSlNPTi5wYXJzZShzdHIpOwogICAgcmV0dXJuIHNldE9rKGZhbHNlLCBhcnIpOwogIH0KfSAvLyDmn6Xor6JpcOeahOWcsOWdgAoKCmZ1bmN0aW9uIGlwVG9BZGRyZXNzKGlwLCBjYWxsYmFjaykgewogIGxldCByZXEgPSBuZXcgX2Ntc19wYi5JcExvY2F0aW9uUmVxdWVzdCgpOwogIHJlcS5zZXRJcChpcCk7CiAgbGV0IG1ldGFkYXRhID0gewogICAgJ3Rva2VuJzogKDAsIF9jb29raWUuZ2V0VG9rZW4pKCkKICB9OwoKICBfc2VydmVyLmNtc1NlcnZpY2UuZ2V0SXBMb2NhdGlvbihyZXEsIG1ldGFkYXRhLCAoZXJyLCByZXNwKSA9PiB7CiAgICBpZiAoIWVycikgewogICAgICBjYWxsYmFjayhyZXNwKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUubG9nKCJpcFRvQWRkcmVzczoiICsgZXJyKTsKICAgIH0KICB9KTsKfQoKZnVuY3Rpb24gZ2V0QXJyTmFtZShhcnIsIGlkKSB7CiAgbGV0IGxhYmVsID0gIiI7CgogIGlmICgoMCwgX2FwaS5pc0VtcHR5KShpZCkgfHwgaWQgPT09IDApIHsKICAgIHJldHVybiBsYWJlbDsKICB9CgogIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgaWYgKHR5cGVvZiBpdGVtLnZhbHVlICE9PSAidW5kZWZpbmVkIikgewogICAgICBpZiAoaWQudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9CiAgfSk7CiAgcmV0dXJuIGxhYmVsOwp9CgpmdW5jdGlvbiBnZXRBcHBOYW1lKGFyciwgaWQpIHsKICBsZXQgbGFiZWwgPSAiIjsKICBsZXQgb3MgPSAwOwogIGxldCBpc0FuY2hvciA9IGZhbHNlOwogIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgaWYgKHR5cGVvZiBpdGVtLnZhbHVlICE9PSAidW5kZWZpbmVkIikgewogICAgICBpZiAoaWQudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICAgIG9zID0gaXRlbS5vczsKICAgICAgICBpc0FuY2hvciA9IGl0ZW0uaXNBbmNob3I7CiAgICAgIH0KICAgIH0KICB9KTsKICByZXR1cm4gewogICAgbGFiZWw6IGxhYmVsLAogICAgb3M6IG9zLAogICAgaXNBbmNob3I6IGlzQW5jaG9yCiAgfTsKfQoKZnVuY3Rpb24gc2V0T2soaXNTaG93QWxsLCBhcnIpIHsKICBpZiAoaXNTaG93QWxsKSB7CiAgICBhcnIudW5zaGlmdCh7CiAgICAgIGxhYmVsOiAi5YWo6YOoIiwKICAgICAgdmFsdWU6IDAKICAgIH0pOwogIH0KCiAgcmV0dXJuIGFycjsKfSAvLyDmmK/lkKYKCgpmdW5jdGlvbiBnZXRCb29sKCkgewogIHJldHVybiBbewogICAgdmFsdWU6IHRydWUsCiAgICBsYWJlbDogJ+aYrycKICB9LCB7CiAgICB2YWx1ZTogZmFsc2UsCiAgICBsYWJlbDogJ+WQpicKICB9XTsKfSAvLyDkuLvmkq3nrYnnuqcKCgpmdW5jdGlvbiBnZXRBbmNob3JMZXZlbChrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+W3ruWKsicKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5Lit562JJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICfoia/lpb0nCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+S8mOengCcKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOWuoeaguOeKtuaAgQoKCmZ1bmN0aW9uIGdldFJldmlld1N0YXR1cyhrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+acquWuoeaguCcKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5bey5o+Q5Lqk5a6h5qC4JwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICflrqHmoLjkuK0nCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+S4jemAmui/hycKICB9LCB7CiAgICB2YWx1ZTogNSwKICAgIGxhYmVsOiAn5a6h5qC46YCa6L+HJwogIH0sIHsKICAgIHZhbHVlOiA2LAogICAgbGFiZWw6ICflgZznlKgnCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKCiAgICBpZiAoa2V5ID09PSAwKSB7CiAgICAgIHJldHVybiBsYWJlbDsKICAgIH0KCiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLwoKCmZ1bmN0aW9uIGdldFJlcG9ydGVkVHlwZXMoKSB7CiAgcmV0dXJuIFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfnlKjmiLcnCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+S4u+aSrScKICB9XTsKfQoKZnVuY3Rpb24gZ2V0UmVwb3J0ZWRUaW1lKCkgewogIHJldHVybiBbewogICAgdmFsdWU6IDAsCiAgICBsYWJlbDogJ+WFqOmDqCcKICB9LCB7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn5LuK5aSpJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICfmnIDov5Ez5aSpJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICfmnIDov5E35aSpJwogIH1dOwp9IC8vIOWcqOe6v+eKtuaAgQoKCmZ1bmN0aW9uIGdldE9ubGluZVN0YXR1cyhrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+emu+e6vycKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5Zyo57q/JwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICflv5nnur8nCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+WLv+aJsCcKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOi/neinhOWcuuaZrwoKCmZ1bmN0aW9uIGdldFZpb2xhdGlvblNjZW5lKGlzU2hvd0FsbCwga2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn6KeG6aKR6YCa6K+dJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICfogYrlpKknCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+S4u+aSrei1hOaWmScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIGlmIChpc1Nob3dBbGwpIHsKICAgICAgYXJyLnVuc2hpZnQoewogICAgICAgIHZhbHVlOiAwLAogICAgICAgIGxhYmVsOiAn5YWo6YOoJwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDlsIHnpoHnsbvlnosKCgpmdW5jdGlvbiBnZXRCbG9ja1N0YXR1cyhpc1Nob3dBbGwsIGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+S4jeWwgeemgScKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5Y+R6YCB6K2m5ZGKJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICflsIHnpoHotKblj7cnCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+WwgeemgeaJgOaciScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgaWYgKGlzU2hvd0FsbCkgewogICAgICBhcnIudW5zaGlmdCh7CiAgICAgICAgdmFsdWU6IDAsCiAgICAgICAgbGFiZWw6ICflhajpg6gnCiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOWwgeemgeaXtuW4uAoKCmZ1bmN0aW9uIGdldEJsb2NrVGltZShrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiA1ICogNjAsCiAgICBsYWJlbDogJzXliIbpkp8nCiAgfSwgewogICAgdmFsdWU6IDMwICogNjAsCiAgICBsYWJlbDogJzMw5YiG6ZKfJwogIH0sIHsKICAgIHZhbHVlOiA2MCAqIDYwLAogICAgbGFiZWw6ICcx5bCP5pe2JwogIH0sIHsKICAgIHZhbHVlOiAzICogNjAgKiA2MCwKICAgIGxhYmVsOiAnM+Wwj+aXticKICB9LCB7CiAgICB2YWx1ZTogMjQgKiA2MCAqIDYwLAogICAgbGFiZWw6ICcx5aSpJwogIH0sIHsKICAgIHZhbHVlOiA3ICogMjQgKiA2MCAqIDYwLAogICAgbGFiZWw6ICc35aSpJwogIH0sIHsKICAgIHZhbHVlOiAzMCAqIDI0ICogNjAgKiA2MCwKICAgIGxhYmVsOiAnMeaciCcKICB9LCB7CiAgICB2YWx1ZTogMzY1ICogMjQgKiA2MCAqIDYwLAogICAgbGFiZWw6ICcx5bm0JwogIH0sIHsKICAgIHZhbHVlOiAxMCAqIDM2NSAqIDI0ICogNjAgKiA2MCwKICAgIGxhYmVsOiAn5rC45LmF5bCB56aBJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDmlK/ku5jnirbmgIEKCgpmdW5jdGlvbiBnZXRQYXlTdGF0dXMoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICflvoXmlK/ku5gnCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+W3suaUr+S7mCcKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn5bey5Y+W5raIJwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICflt7LpgIDmrL4nCiAgfSwgewogICAgdmFsdWU6IDUsCiAgICBsYWJlbDogJ+W3sui2heaXticKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0gLy8g6IGM5Lia57G75Z6LCgoKZnVuY3Rpb24gZ2V0T2NjdXBhdGlvblR5cGUoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAnSVQv5LqS6IGU572RL+mAmuS/oScKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5a2m55SfJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICfmlofljJYv6Im65pyvJwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICflvbHop4Yv5aix5LmQJwogIH0sIHsKICAgIHZhbHVlOiA1LAogICAgbGFiZWw6ICfph5Hono0nCiAgfSwgewogICAgdmFsdWU6IDYsCiAgICBsYWJlbDogJ+WMu+iNry/lgaXlurcnCiAgfSwgewogICAgdmFsdWU6IDcsCiAgICBsYWJlbDogJ+W3peS4mi/liLbpgKDkuJonCiAgfSwgewogICAgdmFsdWU6IDgsCiAgICBsYWJlbDogJ+WqkuS9ky/lhazlhbMnCiAgfSwgewogICAgdmFsdWU6IDksCiAgICBsYWJlbDogJ+mbtuWUricKICB9LCB7CiAgICB2YWx1ZTogMTAsCiAgICBsYWJlbDogJ+aVmeiCsi/np5HnoJQnCiAgfSwgewogICAgdmFsdWU6IDExLAogICAgbGFiZWw6ICflhbbku5YnCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKCiAgICBpZiAoa2V5ID09PSAwKSB7CiAgICAgIHJldHVybiBsYWJlbDsKICAgIH0KCiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDmtojmga/nsbvlnosKCgpmdW5jdGlvbiBnZXRNZXNzYWdlVHlwZShrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfmlofmnKwnCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+ekvOeJqScKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn5YWF5YC8JwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICflm77niYcnCiAgfSwgewogICAgdmFsdWU6IDUsCiAgICBsYWJlbDogJ+inhumikScKICB9LCB7CiAgICB2YWx1ZTogNiwKICAgIGxhYmVsOiAn6K+t6Z+zJwogIH0sIHsKICAgIHZhbHVlOiA3LAogICAgbGFiZWw6ICfkvY3nva4nCiAgfSwgewogICAgdmFsdWU6IDgsCiAgICBsYWJlbDogJ+iZmuaLn+inhumikScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0KCmZ1bmN0aW9uIGdldE1lc3NhZ2VUeXBlUmVqZWN0KGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+aWh+acrCcKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5Zu+54mHJwogIH0sIHsKICAgIHZhbHVlOiA1LAogICAgbGFiZWw6ICfop4bpopEnCiAgfSwgewogICAgdmFsdWU6IDYsCiAgICBsYWJlbDogJ+ivremfsycKICB9LCB7CiAgICB2YWx1ZTogOCwKICAgIGxhYmVsOiAn6Jma5ouf6KeG6aKRJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDliqjkvZznsbvlnosKCgpmdW5jdGlvbiBnZXRBY3Rpb25UeXBlKGlzU2hvd0FsbCwga2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn5ouS57ud5o6l5ZCsJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICfmnKrmjqXlkKwnCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+mAmuivnee7k+adnycKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5YWz5rOoJwogIH0sIHsKICAgIHZhbHVlOiA1LAogICAgbGFiZWw6ICflhYXlgLwnCiAgfSwgewogICAgdmFsdWU6IDYsCiAgICBsYWJlbDogJ+WPkemAgeekvOeJqScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIGlmIChpc1Nob3dBbGwpIHsKICAgICAgYXJyLnVuc2hpZnQoewogICAgICAgIHZhbHVlOiAwLAogICAgICAgIGxhYmVsOiAn5YWo6YOoJwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDov53op4TnsbvlnosKCgpmdW5jdGlvbiBnZXRWaW9sYXRpb25UeXBlKGlzU2hvd0FsbCwga2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn6K+I6aqXJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICfoibLmg4UnCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+WPjeWKqCcKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5YW25LuWJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CgogICAgaWYgKGtleSA9PT0gMCkgewogICAgICByZXR1cm4gbGFiZWw7CiAgICB9CgogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgaWYgKGlzU2hvd0FsbCkgewogICAgICBhcnIudW5zaGlmdCh7CiAgICAgICAgdmFsdWU6IDAsCiAgICAgICAgbGFiZWw6ICflhajpg6gnCiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOmAmuivneWPkei1t+exu+WeiwoKCmZ1bmN0aW9uIGdldENhbGxUeXBlKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDAsCiAgICBsYWJlbDogJ+WFqOmDqCcKICB9LCB7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn55So5oi35ZG85Y+rJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICfkuLvmkq3lkbzlj6snCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+eUqOaIt0Fp5ZG85Y+rJwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICfkuLvmkq1BaeWRvOWPqycKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0gLy8g57uT5p2f57G75Z6LCgoKZnVuY3Rpb24gZ2V0SGFuZ1R5cGUoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfnlKjmiLfmjILmlq0nCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+S4u+aSreaMguaWrScKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn5peg5Lq65o6l5ZCsJwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICflrqLmiLfnq6/nvZHnu5zkuI3lpb0nCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+S9memineS4jei2sycKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn57O757uf6ZSZ6K+vJwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICflo7DnvZHotoXml7YnCiAgfSwgewogICAgdmFsdWU6IDQsCiAgICBsYWJlbDogJ+WjsOe9kemUmeivrycKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOe7k+adn+exu+WeiwoKCmZ1bmN0aW9uIGdldENhbGxTdGF0dXMoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICfnrYnlvoXmjqXpgJonCiAgfSwgewogICAgdmFsdWU6IDIsCiAgICBsYWJlbDogJ+mAmuivneS4rScKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAn6YCa6K+d57uT5p2fJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDlrp7kvZPnsbvlnosKCgpmdW5jdGlvbiBnZXRFbnRpdHlUeXBlKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDAsCiAgICBsYWJlbDogJ+WFqOmDqCcKICB9LCB7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn5pmu6YCa55So5oi3JwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICfkuLvmkq0nCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+euoeeQhuWRmCcKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5YWs5LyaJwogIH0sIHsKICAgIHZhbHVlOiA1LAogICAgbGFiZWw6ICforqLpmIXorqLljZUnCiAgfSwgewogICAgdmFsdWU6IDYsCiAgICBsYWJlbDogJ+WFheWAvOiuouWNlScKICB9LCB7CiAgICB2YWx1ZTogNywKICAgIGxhYmVsOiAn56S854mp6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiA4LAogICAgbGFiZWw6ICdWSVDorrDlvZUnCiAgfSwgewogICAgdmFsdWU6IDksCiAgICBsYWJlbDogJ+mAmuivneiusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTAsCiAgICBsYWJlbDogJ+etvuWIsOiusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTEsCiAgICBsYWJlbDogJ+S4vuaKpeiusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTIsCiAgICBsYWJlbDogJ+WcqOe6v+iusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTMsCiAgICBsYWJlbDogJ+e7k+eul+iusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTQsCiAgICBsYWJlbDogJ+WlluaDqeiusOW9lScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0gLy8g55So5oi357G75Z6LCgoKZnVuY3Rpb24gZ2V0VHJhZGVyVHlwZShrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+eUqOaItycKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn5Li75pKtJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICfnrqHnkIblkZgnCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9IC8vIOWunuS9k+exu+WeiwoKCmZ1bmN0aW9uIGdldFNvdXJjZVR5cGUoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiA1LAogICAgbGFiZWw6ICforqLpmIXorqLljZUnCiAgfSwgewogICAgdmFsdWU6IDYsCiAgICBsYWJlbDogJ+WFheWAvOiuouWNlScKICB9LCB7CiAgICB2YWx1ZTogNywKICAgIGxhYmVsOiAn56S854mp6K6w5b2VJwogIH0sIHsKICAgIHZhbHVlOiA4LAogICAgbGFiZWw6ICdWSVDorrDlvZUnCiAgfSwgewogICAgdmFsdWU6IDksCiAgICBsYWJlbDogJ+mAmuivneiusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTAsCiAgICBsYWJlbDogJ+etvuWIsOiusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTEsCiAgICBsYWJlbDogJ+S4vuaKpeiusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTIsCiAgICBsYWJlbDogJ+WcqOe6v+iusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTMsCiAgICBsYWJlbDogJ+e7k+eul+iusOW9lScKICB9LCB7CiAgICB2YWx1ZTogMTQsCiAgICBsYWJlbDogJ+WlluaDqeiusOW9lScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwogICAgYXJyLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGlmIChrZXkudG9TdHJpbmcoKSA9PT0gaXRlbS52YWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBsYWJlbDsKICB9IGVsc2UgewogICAgcmV0dXJuIGFycjsKICB9Cn0gLy8g57uT566X54q25oCBCgoKZnVuY3Rpb24gZ2V0U2V0dGxlU3RhdHVzKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDAsCiAgICBsYWJlbDogJ+WFqOmDqCcKICB9LCB7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn6aKE57uT566XJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICflt7LliZTpmaQnCiAgfSwgewogICAgdmFsdWU6IDMsCiAgICBsYWJlbDogJ+e7k+eul+WujOaIkCcKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAn5pKk6ZSA57uT566XJwogIH1dOwoKICBpZiAodHlwZW9mIGtleSAhPSAidW5kZWZpbmVkIikgewogICAgbGV0IGxhYmVsID0gIiI7CiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDmlK/ku5jmlrnlvI8KCgpmdW5jdGlvbiBnZXRQYXlUeXBlKGlzU2hvd0FsbCwga2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAnR29vZ2xlJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICdBcHBsZScKICB9LCB7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAnWGVuZGl0JwogIH0sIHsKICAgIHZhbHVlOiA0LAogICAgbGFiZWw6ICdQYXllck1heCcKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIGlmIChpc1Nob3dBbGwpIHsKICAgICAgYXJyLnVuc2hpZnQoewogICAgICAgIHZhbHVlOiAwLAogICAgICAgIGxhYmVsOiAn5YWo6YOoJwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDns7vnu5/nsbvlnosKCgpmdW5jdGlvbiBnZXRPc1R5cGUoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMCwKICAgIGxhYmVsOiAn5YWo6YOoJwogIH0sIHsKICAgIHZhbHVlOiAxLAogICAgbGFiZWw6ICdBbmRyb2lkJwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICdJb3MnCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKCiAgICBpZiAoa2V5ID09PSAwKSB7CiAgICAgIHJldHVybiBsYWJlbDsKICAgIH0KCiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDmlofku7bnsbvlnosKCgpmdW5jdGlvbiBnZXRGaWxlVHlwZShrZXkpIHsKICBsZXQgYXJyID0gW3sKICAgIHZhbHVlOiAwLAogICAgbGFiZWw6ICflhajpg6gnCiAgfSwgewogICAgdmFsdWU6IDEsCiAgICBsYWJlbDogJ+WbvueJhycKICB9LCB7CiAgICB2YWx1ZTogMiwKICAgIGxhYmVsOiAn6KeG6aKRJwogIH0sIHsKICAgIHZhbHVlOiAzLAogICAgbGFiZWw6ICfpn7PpopEnCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKCiAgICBpZiAoa2V5ID09PSAwKSB7CiAgICAgIHJldHVybiBsYWJlbDsKICAgIH0KCiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDmgKfliKvnsbvlnosKCgpmdW5jdGlvbiBnZXRHZW5kZXJUeXBlKGtleSkgewogIGxldCBhcnIgPSBbewogICAgdmFsdWU6IDAsCiAgICBsYWJlbDogJ+WFqOmDqCcKICB9LCB7CiAgICB2YWx1ZTogMSwKICAgIGxhYmVsOiAn55S3JwogIH0sIHsKICAgIHZhbHVlOiAyLAogICAgbGFiZWw6ICflpbMnCiAgfV07CgogIGlmICh0eXBlb2Yga2V5ICE9ICJ1bmRlZmluZWQiKSB7CiAgICBsZXQgbGFiZWwgPSAiIjsKCiAgICBpZiAoa2V5ID09PSAwIHx8IGtleSA9PT0gJzAnKSB7CiAgICAgIHJldHVybiBsYWJlbDsKICAgIH0KCiAgICBhcnIuZm9yRWFjaChpdGVtID0+IHsKICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSBpdGVtLnZhbHVlLnRvU3RyaW5nKCkpIHsKICAgICAgICBsYWJlbCA9IGl0ZW0ubGFiZWw7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGxhYmVsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYXJyOwogIH0KfSAvLyDml7bpl7Tpl7TpmpQKCgpmdW5jdGlvbiBnZXRTdGF0SW50ZXJ2YWwoa2V5KSB7CiAgbGV0IGFyciA9IFt7CiAgICB2YWx1ZTogMywKICAgIGxhYmVsOiAnMeWwj+aXticKICB9LCB7CiAgICB2YWx1ZTogNCwKICAgIGxhYmVsOiAnMeWkqScKICB9XTsKCiAgaWYgKHR5cGVvZiBrZXkgIT0gInVuZGVmaW5lZCIpIHsKICAgIGxldCBsYWJlbCA9ICIiOwoKICAgIGlmIChrZXkgPT09IDApIHsKICAgICAgcmV0dXJuIGxhYmVsOwogICAgfQoKICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICBpZiAoa2V5LnRvU3RyaW5nKCkgPT09IGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIGxhYmVsID0gaXRlbS5sYWJlbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbGFiZWw7CiAgfSBlbHNlIHsKICAgIHJldHVybiBhcnI7CiAgfQp9"},null]}