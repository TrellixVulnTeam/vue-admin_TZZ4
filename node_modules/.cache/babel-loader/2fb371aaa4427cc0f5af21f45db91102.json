{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/develop/iwork/kafo/vue-admin/src/views/home/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/views/home/Home.vue","mtime":1634270408157},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":1634111096329},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":1634111095606},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":1634111096329},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js","mtime":1634111096162}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}