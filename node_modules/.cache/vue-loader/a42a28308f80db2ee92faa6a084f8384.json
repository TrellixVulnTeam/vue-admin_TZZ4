{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/develop/iwork/kafo/vue-admin/src/components/TextSetting/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/components/TextSetting/index.vue","mtime":1626074843906},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7YmFzZTY0dG9CbG9ifSBmcm9tICcuLi8uLi91dGlscycKaW1wb3J0IEltYWdlUmljaFRleHQgZnJvbSAnLi4vSW1hZ2VSaWNoVGV4dCcKCmNvbnN0IGZvbnRGYW1pbHlEYXRhID0gWwogICAge3ZhbHVlOiAn6buR5L2TJ30sCiAgICB7dmFsdWU6ICflrovkvZMnfSwKICAgIHt2YWx1ZTogJ+S7v+Wuiyd9LAogICAge3ZhbHVlOiAn5qW35L2TJ30sCiAgICB7dmFsdWU6ICfpmrbkuaYnfSwKICAgIHt2YWx1ZTogJ+W+rui9r+mbhem7kSd9LAogICAge3ZhbHVlOiAn5pa55q2j5aea5L2TJ30KXQpjb25zdCBmb250U2l6ZURhdGEgPSBbCiAgICB7dmFsdWU6ICcxMnB4J30sCiAgICB7dmFsdWU6ICcxNHB4J30sCiAgICB7dmFsdWU6ICcxNnB4J30sCiAgICB7dmFsdWU6ICcxOHB4J30sCiAgICB7dmFsdWU6ICcyNHB4J30sCiAgICB7dmFsdWU6ICczMnB4J30sCiAgICB7dmFsdWU6ICc0OHB4J30KXQoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ1RleHRTZXR0aW5nJywKICAgIGNvbXBvbmVudHM6IHtJbWFnZVJpY2hUZXh0fSwKICAgIHByb3BzOiB7CiAgICAgICAgYWN0aXZlRWxlVGV4dDogewogICAgICAgICAgICB0eXBlOiBPYmplY3QsCiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IHsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGZvbnRGYW1pbHlEYXRhLAogICAgICAgICAgICBmb250U2l6ZURhdGEKICAgICAgICB9CiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICAvLyDlrZfkvZPmmK/lkKbliqDnspcKICAgICAgICBmb250V2VpZ2h0KCkgewogICAgICAgICAgICBpZiAoK3RoaXMuYWN0aXZlRWxlVGV4dC5zdHlsZS5mb250V2VpZ2h0ID09PSA0MDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICB3YXRjaDogewogICAgICAgIC8vIOaWh+Wtl+Wkp+Wwj+WPmOWMluaXtuihjOmrmOS4gOi1t+WPmOWMlgogICAgICAgIGFjdGl2ZUVsZVRleHQ6IHsKICAgICAgICAgICAgaGFuZGxlcih2YWwpIHsKICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlRWxlVGV4dC5zdHlsZS5saW5lSGVpZ2h0ID0gdmFsLnN0eWxlLmZvbnRTaXplCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZXA6IHRydWUKICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIC8vIOiuvue9rueyl+S9kwogICAgICAgIHNldEZvbnRXZWlnaHQoKSB7CiAgICAgICAgICAgIGlmICgrdGhpcy5hY3RpdmVFbGVUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPT09IDQwMCkgewogICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVFbGVUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSA2MDAKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlRWxlVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gNDAwCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8vIOiuvue9ruWvuem9kAogICAgICAgIGhhbmRsZUNvbW1hbmQoY29tbWFuZCkgewogICAgICAgICAgICB0aGlzLmFjdGl2ZUVsZVRleHQuc3R5bGUudGV4dEFsaWduID0gY29tbWFuZAogICAgICAgIH0sCiAgICAgICAgLy8g5b2T5YmN5a+56b2Q5pa55byPCiAgICAgICAgc2V0QWxpZ25BY3RpdmUodHlwZSkgewogICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVFbGVUZXh0LnN0eWxlLnRleHRBbGlnbiA9PT0gdHlwZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjNDA5ZWZmJywKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmYnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJycsCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMzMzJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvLyDmlofmnKznlJ/miJDlm77niYcKICAgICAgICB0ZXh0QmVjb21lSW1nKG9iaikgewogICAgICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKQogICAgICAgICAgICBjYW52YXMud2lkdGggPSBvYmoudwogICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gb2JqLmgKICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpCiAgICAgICAgICAgIC8vIOe7mOWItuWtl+S9k+i3neemu2NhbnZhc+mhtumDqOWIneWni+eahOmrmOW6pgogICAgICAgICAgICBjb25zdCBpbml0VG9wID0gNAogICAgICAgICAgICBjb25zdCBpbml0TGVmdCA9IDgKICAgICAgICAgICAgLy8g6K6+572u6IOM5pmv6ImyCiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gb2JqLnN0eWxlLmJhY2tncm91bmRDb2xvciB8fCAndHJhbnNwYXJlbnQnCiAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KQogICAgICAgICAgICAvLyDorr7nva7mlofmnKzmoLflvI8KICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBvYmouc3R5bGUuY29sb3IKICAgICAgICAgICAgY29udGV4dC5mb250ID0gb2JqLnN0eWxlLmZvbnRXZWlnaHQgKyAnICcgKyBvYmouc3R5bGUuZm9udFNpemUgKyAnICcgKyBvYmouc3R5bGUuZm9udEZhbWlseQogICAgICAgICAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9ICd0b3AnCiAgICAgICAgICAgIC8vIOiuvue9ruaWh+acrOWvuem9kOaWueW8jwogICAgICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9IG9iai5zdHlsZS50ZXh0QWxpZ24KCiAgICAgICAgICAgIGNvbnN0IHRleHRBcnIgPSBvYmoudGV4dC5zcGxpdCgnJykKICAgICAgICAgICAgbGV0IHRlbXBTdHIgPSAnJwogICAgICAgICAgICBjb25zdCByb3dBcnIgPSBbXQogICAgICAgICAgICBjb25zdCBtYXhUZXh0V2lkdGggPSBjYW52YXMud2lkdGggLSAyICogaW5pdExlZnQKCiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dEFyci5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQubWVhc3VyZVRleHQodGVtcFN0cikud2lkdGggPCBtYXhUZXh0V2lkdGggJiYgY29udGV4dC5tZWFzdXJlVGV4dCh0ZW1wU3RyICsgKHRleHRBcnJbaV0pKS53aWR0aCA8PSBtYXhUZXh0V2lkdGgpIHsKICAgICAgICAgICAgICAgICAgICB0ZW1wU3RyICs9IHRleHRBcnJbaV0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcm93QXJyLnB1c2godGVtcFN0cikKICAgICAgICAgICAgICAgICAgICB0ZW1wU3RyID0gdGV4dEFycltpXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJvd0Fyci5wdXNoKHRlbXBTdHIpCgogICAgICAgICAgICBsZXQgZHJhd0xlZnQKICAgICAgICAgICAgaWYgKGNvbnRleHQudGV4dEFsaWduID09PSAnbGVmdCcpIHsKICAgICAgICAgICAgICAgIGRyYXdMZWZ0ID0gaW5pdExlZnQKICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0LnRleHRBbGlnbiA9PT0gJ2NlbnRlcicpIHsKICAgICAgICAgICAgICAgIGRyYXdMZWZ0ID0gbWF4VGV4dFdpZHRoIC8gMgogICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQudGV4dEFsaWduID09PSAncmlnaHQnKSB7CiAgICAgICAgICAgICAgICBkcmF3TGVmdCA9IG1heFRleHRXaWR0aAogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd0Fyci5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dChyb3dBcnJbaV0sIGRyYXdMZWZ0LCAocGFyc2VJbnQob2JqLnN0eWxlLmZvbnRTaXplKSAqIGkgKyBpbml0VG9wKSwgbWF4VGV4dFdpZHRoKQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJykKICAgICAgICB9LAogICAgICAgIC8vIOS4i+i9veeUn+aIkOeahOWbvueJhwogICAgICAgIGRvd25sb2FkSW1hZ2UoKSB7CiAgICAgICAgICAgIGNvbnN0IGltYWdlQmFzZTY0ID0gdGhpcy50ZXh0QmVjb21lSW1nKHRoaXMuYWN0aXZlRWxlVGV4dCkKICAgICAgICAgICAgY29uc3QgaW1hZ2VCbG9iID0gYmFzZTY0dG9CbG9iKGltYWdlQmFzZTY0KQogICAgICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpCiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKQogICAgICAgICAgICAvLyBpbml0RXZlbnQg5LiN5Yqg5ZCO5Lik5Liq5Y+C5pWw5Lya5Zyo54Gr54uQ5LiL5oql6ZSZIOS6i+S7tuexu+Wei++8jOaYr+WQpuWGkuazoe+8jOaYr+WQpumYu+atoua1j+iniOWZqOeahOm7mOiupOihjOS4ugogICAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2NsaWNrJywgdHJ1ZSwgdHJ1ZSkKICAgICAgICAgICAgbGluay5kb3dubG9hZCA9ICdpbWFnZS5wbmcnCiAgICAgICAgICAgIGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoaW1hZ2VCbG9iKQogICAgICAgICAgICAvLyDlhbzlrrnngavni5AKICAgICAgICAgICAgbGluay5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdjbGljaycsIHtidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlLCB2aWV3OiB3aW5kb3d9KSkKICAgICAgICB9CiAgICB9Cn0K"},null]}