{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/develop/iwork/kafo/vue-admin/src/views/home/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/views/home/Home.vue","mtime":1634644559019},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb3VudFRvIGZyb20gJ3Z1ZS1jb3VudC10bycKaW1wb3J0IENoYXJ0c0JhckxpbmUgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9DaGFydHMvQ2hhcnRzQmFyTGluZScKaW1wb3J0IENoYXJ0c0JhciBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NoYXJ0cy9DaGFydHNCYXInCmltcG9ydCBDaGFydHNMaW5lIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQ2hhcnRzL0NoYXJ0c0xpbmUnCmltcG9ydCB7Z2V0QXJlYUxpc3QsIGdldEFwcExpc3QsIGdldEFwcE5hbWUsIGdldEN1cnJlbnRVc2VyQXJlYUlkfSBmcm9tICJAL3V0aWxzL2Rpc3QiCmltcG9ydCB7Z2V0Q3VycmVudERhdGV9IGZyb20gIkAvdXRpbHMvZGF0ZSI7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAnSG9tZScsCiAgICBjb21wb25lbnRzOiB7Q291bnRUbywgQ2hhcnRzQmFyLCBDaGFydHNCYXJMaW5lLCBDaGFydHNMaW5lfSwKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbGlzdExvYWRpbmc6IGZhbHNlLAogICAgICAgICAgICBzZWFyY2g6IHsKICAgICAgICAgICAgICAgIGFyZWFJZDogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgZGF0ZTogZ2V0Q3VycmVudERhdGUoKSwKICAgICAgICAgICAgICAgIHN0YXJ0QXQ6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgIGVuZEF0OiB1bmRlZmluZWQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXV0aEFyZWFJZDogZ2V0Q3VycmVudFVzZXJBcmVhSWQoKSwKICAgICAgICAgICAgYXJlYUxpc3Q6IGdldEFyZWFMaXN0KGZhbHNlKSwKICAgICAgICAgICAgYXBwTGlzdDogZ2V0QXBwTGlzdCgpLAogICAgICAgICAgICBjYXJkSW5mb0RhdGE6IFtdLAogICAgICAgICAgICBuZXdVc2VyS2V5OiAxLAogICAgICAgICAgICBpbmNvbWVLZXk6IDIwLAogICAgICAgICAgICB0b3RhbEtleTogNDAsCiAgICAgICAgICAgIGFjdGl2ZUtleTogNjAsCiAgICAgICAgICAgIGNoYW5uZWxLZXk6IDgwLAogICAgICAgICAgICBpbmNvbWVEYXRhOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+aWsOWinuaUtuWFpScsCiAgICAgICAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgICAgICAgIGxlZ2VuZDogWyfmlrDlop7mlLblhaUnXSwKICAgICAgICAgICAgICAgIGRhdGE6IFtdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRvdGFsRGF0ZTogewogICAgICAgICAgICAgICAgdGl0bGU6ICflhajpg6jmlLblhaUnLAogICAgICAgICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5oC75pS25YWlJ10sCiAgICAgICAgICAgICAgICBkYXRhOiBbXQogICAgICAgICAgICB9LAogICAgICAgICAgICB1c2VyRGF0ZTogewogICAgICAgICAgICAgICAgdGl0bGU6ICfmlrDlop7nlKjmiLcnLAogICAgICAgICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5paw5aKe55So5oi3J10sCiAgICAgICAgICAgICAgICBkYXRhOiBbXQogICAgICAgICAgICB9LAogICAgICAgICAgICBhY3RpdmVEYXRhOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+a0u+i3g+eUqOaItycsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5rS76LeD55So5oi3J10sCiAgICAgICAgICAgICAgICBrZXlzOiBbXSwKICAgICAgICAgICAgICAgIHZhbHVlczogW10KICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2hhbm5lbERhdGE6IHsKICAgICAgICAgICAgICAgIHRpdGxlOiAn5YWF5YC85rig6YGTJywKICAgICAgICAgICAgICAgIGxlZ2VuZDogWydnb29nbGUnLCAnYXBwbGUnLCAn5YW25LuWJ10sCiAgICAgICAgICAgICAgICBkYXRhOiBbXQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgdGhpcy5zZWFyY2guYXJlYUlkID0gdGhpcy5hdXRoQXJlYUlkID09PSAwID8gdGhpcy5hcmVhTGlzdFswXS52YWx1ZSA6IHRoaXMuYXV0aEFyZWFJZAogICAgICAgIHRoaXMuaW5pdENhcmQoKQogICAgICAgIHRoaXMuaW5pdERhdGEoKQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBvblNlYXJjaCgpIHsKICAgICAgICAgICAgdGhpcy5saXN0TG9hZGluZyA9IHRydWUKICAgICAgICAgICAgdGhpcy5pbml0Q2FyZCgpCiAgICAgICAgICAgIHRoaXMuaW5pdERhdGEoKQogICAgICAgIH0sCiAgICAgICAgaW5pdENhcmQoKXsKICAgICAgICAgICAgY29uc3QgJHRoaXMgPSB0aGlzCiAgICAgICAgICAgIHRoaXMuY2FyZEluZm9EYXRhID0gW10KICAgICAgICAgICAgdGhpcy4kc2VydmljZS5ob21lLmdldE92ZXJ2aWV3KHRoaXMuaGFuZGxlU2VhcmNoKCksIGZ1bmN0aW9uIChyZXN1bHQpewogICAgICAgICAgICAgICAgbGV0IGluY29tZSA9IHJlc3VsdC5nZXRJbmNvbWUoKQogICAgICAgICAgICAgICAgbGV0IGluY29tZV9kZWNpbWFscyA9IDAKICAgICAgICAgICAgICAgIGlmKGluY29tZT4wKXsKICAgICAgICAgICAgICAgICAgICBpbmNvbWUgPSBpbmNvbWUgLyAxMDAKICAgICAgICAgICAgICAgICAgICBpbmNvbWVfZGVjaW1hbHMgPSAyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgaW5jID0gewogICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5aSn55uY5a6e5pe25pS25YWlL+iuouWNleaVsCcsIG51bTogMiwgY291bnQ6IGluY29tZSwgY291bnQyOiByZXN1bHQuZ2V0UGF5Q291bnQoKSwgZGVjaW1hbHM6IGluY29tZV9kZWNpbWFscwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IHVzZXIgPSB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfmlrDlop4v5rS76LeD55So5oi3JywgbnVtOiAyLCBjb3VudDogcmVzdWx0LmdldE5ld1VzZXIoKSwgY291bnQyOiByZXN1bHQuZ2V0QWN0aXZlVXNlcigpLCBkZWNpbWFsczogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IGFuY2hvciA9IHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mAmuivnS/lnKjnur/kuLvmkq0nLCBudW06IDIsIGNvdW50OiByZXN1bHQuZ2V0QnVzeUFuY2hvcigpLCBjb3VudDI6IHJlc3VsdC5nZXRPbmxpbmVBbmNob3IoKSwgZGVjaW1hbHM6IDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGxldCByZXZpZXcgPSB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICflvoXlrqHmoLjkuLvmkq0v6LWE5paZL+inhumikScsIG51bTogMywgY291bnQ6IHJlc3VsdC5nZXRSZXZpZXdBbmNob3IoKSwgY291bnQyOiByZXN1bHQuZ2V0UmV2aWV3UHJvZmlsZSgpLCBjb3VudDM6IHJlc3VsdC5nZXRSZXZpZXdWaWRlbygpLCBkZWNpbWFsczogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IG5ld0Ftb3VudCA9IHJlc3VsdC5nZXROZXdBbW91bnQoKSAvIDEwMDAKICAgICAgICAgICAgICAgIGxldCBleHBlbnNlQW1vdW50ID0gcmVzdWx0LmdldEV4cGVuc2VBbW91bnQoKSAvIDEwMDAKICAgICAgICAgICAgICAgIGxldCB0b3RhbEFtb3VudCA9IHJlc3VsdC5nZXRUb3RhbEFtb3VudCgpIC8gMTAwMAogICAgICAgICAgICAgICAgbGV0IGFtb3VudCA9IHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+aWsOWFheWAvC/mtojotLkv5oC75L2Z6aKdJywgbnVtOiAzLCBjb3VudDogbmV3QW1vdW50LCBjb3VudDI6IGV4cGVuc2VBbW91bnQsIGNvdW50MzogdG90YWxBbW91bnQsIGRlY2ltYWxzOiAwLCB1bml0OiAiSyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICR0aGlzLmNhcmRJbmZvRGF0YS5wdXNoKGluYykKICAgICAgICAgICAgICAgICR0aGlzLmNhcmRJbmZvRGF0YS5wdXNoKHVzZXIpCiAgICAgICAgICAgICAgICAkdGhpcy5jYXJkSW5mb0RhdGEucHVzaChhbmNob3IpCiAgICAgICAgICAgICAgICAkdGhpcy5jYXJkSW5mb0RhdGEucHVzaChyZXZpZXcpCiAgICAgICAgICAgICAgICAkdGhpcy5jYXJkSW5mb0RhdGEucHVzaChhbW91bnQpCiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgaW5pdERhdGEoKXsKICAgICAgICAgICAgY29uc3QgJHRoaXMgPSB0aGlzCiAgICAgICAgICAgIHRoaXMuJHNlcnZpY2UuaG9tZS5nZXRIb21lU3RhdCh0aGlzLmhhbmRsZVNlYXJjaCgpLCBmdW5jdGlvbiAocmVzdWx0KXsKICAgICAgICAgICAgICAgIGxldCBzdGF0TGlzdCA9IHJlc3VsdC5nZXRTdGF0c0xpc3QoKQoKICAgICAgICAgICAgICAgIGxldCBuZXdBcnIgPSBbXQogICAgICAgICAgICAgICAgbGV0IHRvdGFsQXJyID0gW10KICAgICAgICAgICAgICAgIGxldCB1c2VyQXJyID0gW10KICAgICAgICAgICAgICAgIGxldCBjaGFubmVsQXJyID0gW10KICAgICAgICAgICAgICAgIHN0YXRMaXN0LmZvckVhY2goaXRlbSA9PiB7CiAgICAgICAgICAgICAgICAgICAgbGV0IGFwcCA9IGdldEFwcE5hbWUoJHRoaXMuYXBwTGlzdCwgaXRlbS5nZXRBcHBJZCgpKQogICAgICAgICAgICAgICAgICAgIGxldCBvc1N0ciA9IGFwcC5vcyA9PT0gMSA/ICLwn6SWIiA6ICIiOwogICAgICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IGFwcC5sYWJlbCArIG9zU3RyCgogICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0uZ2V0TmV3SW5jb21lKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgbmV3QXJyLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsMTogaXRlbS5nZXROZXdJbmNvbWUoKSAvIDEwMAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5nZXRUb3RhbEluY29tZSgpPjApewogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEFyci5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDE6IGl0ZW0uZ2V0VG90YWxJbmNvbWUoKSAvIDEwMAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5nZXROZXdVc2VyKCk+MCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJBcnIucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwxOiBpdGVtLmdldE5ld1VzZXIoKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5nZXRHb29nbGVJbmNvbWUoKT4wIHx8IGl0ZW0uZ2V0QXBwbGVJbmNvbWUoKT4wIHx8IGl0ZW0uZ2V0T3RoZXJJbmNvbWUoKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdvb2dsZUluY29tZSA9IGl0ZW0uZ2V0R29vZ2xlSW5jb21lKCkgLyAxMDAKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFwcGxlSW5jb21lID0gaXRlbS5nZXRBcHBsZUluY29tZSgpIC8gMTAwCiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvdGhlckluY29tZSA9IGl0ZW0uZ2V0T3RoZXJJbmNvbWUoKSAvIDEwMAogICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsQXJyLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsMTogZ29vZ2xlSW5jb21lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsMjogYXBwbGVJbmNvbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwzOiBvdGhlckluY29tZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiBnb29nbGVJbmNvbWUgKyBhcHBsZUluY29tZSArIG90aGVySW5jb21lCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgICAvLyDmlrDlop7nlKjmiLcKICAgICAgICAgICAgICAgICR0aGlzLnVzZXJEYXRlLm5hbWUgPSAi5oC76K6hOiIgKyAkdGhpcy5jb3VudFRvdGFsKHVzZXJBcnIsICd2YWwxJykKICAgICAgICAgICAgICAgICR0aGlzLnVzZXJEYXRlLmRhdGEgPSB1c2VyQXJyLnNvcnQoZnVuY3Rpb24oeCx5KXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4geS52YWwxIC0geC52YWwxOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICsrJHRoaXMubmV3VXNlcktleQoKICAgICAgICAgICAgICAgIC8vIOaWsOWinuaUtuWFpQogICAgICAgICAgICAgICAgJHRoaXMuaW5jb21lRGF0YS5uYW1lID0gIuaAu+iuoToiICsgJHRoaXMuY291bnRUb3RhbChuZXdBcnIsICd2YWwxJykKICAgICAgICAgICAgICAgICR0aGlzLmluY29tZURhdGEuZGF0YSA9IG5ld0Fyci5zb3J0KGZ1bmN0aW9uKHgseSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkudmFsMSAtIHgudmFsMTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICArKyR0aGlzLmluY29tZUtleQoKICAgICAgICAgICAgICAgIC8vIOWFqOmDqOaUtuWFpQogICAgICAgICAgICAgICAgJHRoaXMudG90YWxEYXRlLm5hbWUgPSAi5oC76K6hOiIgKyAkdGhpcy5jb3VudFRvdGFsKHRvdGFsQXJyLCAndmFsMScpCiAgICAgICAgICAgICAgICAkdGhpcy50b3RhbERhdGUuZGF0YSA9IHRvdGFsQXJyLnNvcnQoZnVuY3Rpb24oeCx5KXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4geS52YWwxIC0geC52YWwxOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICsrJHRoaXMudG90YWxLZXkKCiAgICAgICAgICAgICAgICAvLyDlhYXlgLzmuKDpgZMKICAgICAgICAgICAgICAgICR0aGlzLmNoYW5uZWxEYXRhLm5hbWUgPSAi5oC76K6hOiIgKyAkdGhpcy5jb3VudFRvdGFsKGNoYW5uZWxBcnIsICd0b3RhbCcpCiAgICAgICAgICAgICAgICAgICAgKyAiICBnb29nbGU6IisgJHRoaXMuY291bnRUb3RhbChjaGFubmVsQXJyLCAndmFsMScpCiAgICAgICAgICAgICAgICAgICAgKyAiICBhcHBsZToiKyAkdGhpcy5jb3VudFRvdGFsKGNoYW5uZWxBcnIsICd2YWwyJykKICAgICAgICAgICAgICAgICAgICArICIgIOWFtuS7ljoiKyAkdGhpcy5jb3VudFRvdGFsKGNoYW5uZWxBcnIsICd2YWwzJykKICAgICAgICAgICAgICAgICR0aGlzLmNoYW5uZWxEYXRhLmRhdGEgPSBjaGFubmVsQXJyLnNvcnQoZnVuY3Rpb24oeCx5KXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4geS50b3RhbCAtIHgudG90YWw7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKyskdGhpcy5jaGFubmVsS2V5CgogICAgICAgICAgICAgICAgbGV0IGFjdGl2ZUxpc3QgPSByZXN1bHQuZ2V0SG91cmx5QWN0aXZlc0xpc3QoKQogICAgICAgICAgICAgICAgJHRoaXMuaGFuZGxlQWN0aXZlRGF0YShhY3RpdmVMaXN0KQogICAgICAgICAgICAgICAgKyskdGhpcy5hY3RpdmVLZXkKICAgICAgICAgICAgICAgICR0aGlzLmxpc3RMb2FkaW5nID0gZmFsc2UKICAgICAgICAgICAgfSk7CgogICAgICAgIH0sCiAgICAgICAgaGFuZGxlU2VhcmNoKCl7CiAgICAgICAgICAgIGxldCBkYXRlID0gdGhpcy5zZWFyY2guZGF0ZQogICAgICAgICAgICB0aGlzLnNlYXJjaC5zdGFydEF0ID0gdGhpcy5zdGFydFVuaXgoZGF0ZSkKICAgICAgICAgICAgdGhpcy5zZWFyY2guZW5kQXQgPSB0aGlzLmVuZFVuaXgoZGF0ZSkKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoCiAgICAgICAgfSwKICAgICAgICBoYW5kbGVBY3RpdmVEYXRhKHN0YXRMaXN0KXsKICAgICAgICAgICAgbGV0IGtleUFyciA9IFtdCiAgICAgICAgICAgIGxldCB2YWx1ZUFyciA9IFtdCiAgICAgICAgICAgIGxldCBkYXRhID0gW10KICAgICAgICAgICAgc3RhdExpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHsKICAgICAgICAgICAgICAgIGtleUFyci5wdXNoKGluZGV4ICsgIjowMCIpCiAgICAgICAgICAgICAgICBkYXRhLnB1c2goaXRlbSkKICAgICAgICAgICAgfSkKICAgICAgICAgICAgdmFsdWVBcnIucHVzaChkYXRhKQogICAgICAgICAgICB0aGlzLmFjdGl2ZURhdGEua2V5cyA9IGtleUFycgogICAgICAgICAgICB0aGlzLmFjdGl2ZURhdGEudmFsdWVzID0gdmFsdWVBcnIKICAgICAgICAgICAgKyt0aGlzLmFjdGl2ZUtleQogICAgICAgIH0sCiAgICAgICAgc3RhcnRVbml4KCRkYXRlKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgkZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKSkuZ2V0VGltZSgpIC8gMTAwMAogICAgICAgIH0sCiAgICAgICAgZW5kVW5peCgkZGF0ZSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydFVuaXgoJGRhdGUpICsgMjQgKiA2MCAqIDYwIC0gMQogICAgICAgIH0sCiAgICAgICAgY291bnRUb3RhbChhcnIsIGtleU5hbWUpIHsKICAgICAgICAgICAgbGV0ICR0b3RhbCA9IDA7CiAgICAgICAgICAgICR0b3RhbCA9IGFyci5yZWR1Y2UoZnVuY3Rpb24gKHRvdGFsLCBjdXJyZW50VmFsdWUsIGN1cnJlbnRJbmRleCwgYXJyKXsKICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VmFsdWVba2V5TmFtZV0gPyAodG90YWwgKyBjdXJyZW50VmFsdWVba2V5TmFtZV0pIDogdG90YWw7CiAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgICByZXR1cm4gJHRvdGFsLnRvRml4ZWQoMik7CiAgICAgICAgfQogICAgfQp9Cg=="},null]}