{"remainingRequest":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js??vue-loader-options!/home/mengy/Documents/iwork/kafo/vue-admin-design/src/components/TextSetting/index.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/src/components/TextSetting/index.vue","mtime":1624500048821},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/_css-loader@3.6.0@css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICIuLi8uLi9hc3NldHMvbGVzcy90ZXh0LXNldHRpbmciOwo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6NA","file":"index.vue","sourceRoot":"src/components/TextSetting","sourcesContent":["<template>\n  <div class=\"text-setting-wrapper\">\n    <el-form label-width=\"70px\">\n      <!--文本-->\n      <el-form-item label=\"文本\">\n        <ImageRichText v-model=\"activeEleText.text\" class=\"text-editable\" :active-ele-text=\"activeEleText\" />\n      </el-form-item>\n      <!--字体-->\n      <el-form-item label=\"字体\">\n        <el-select v-model=\"activeEleText.style.fontFamily\" size=\"small\">\n          <el-option\n            v-for=\"item in fontFamilyData\"\n            :key=\"item.value\"\n            :label=\"item.value\"\n            :value=\"item.value\"\n            :style=\"{'fontFamily': item.value}\"\n          />\n        </el-select>\n      </el-form-item>\n      <!--字号-->\n      <el-form-item label=\"字号\">\n        <el-select\n          v-model=\"activeEleText.style.fontSize\"\n          size=\"small\"\n        >\n          <el-option\n            v-for=\"item in fontSizeData\"\n            :key=\"item.value\"\n            :label=\"item.value\"\n            :value=\"item.value\"\n          />\n        </el-select>\n      </el-form-item>\n      <!--颜色-->\n      <el-form-item label=\"颜色\">\n        <!-- 字体颜色 -->\n        <div class=\"color-box\">\n          <i class=\"vue-dsn-icon-wenzise color-icon\" :style=\"{'color': activeEleText.style.color}\" />\n          <el-color-picker v-model=\"activeEleText.style.color\" />\n        </div>\n        <!-- 背景颜色 -->\n        <div class=\"color-box\">\n          <i class=\"vue-dsn-icon-beijingse color-icon icon-bg\" :style=\"{'color': activeEleText.style.backgroundColor}\" />\n          <el-color-picker v-model=\"activeEleText.style.backgroundColor\" />\n        </div>\n        <div class=\"style-box\">\n          <!-- 加粗 -->\n          <span :class=\"['style-item', fontWeight ? 'active' : '']\" @click=\"setFontWeight\">\n            <i class=\"vue-dsn-icon-jiacu style-icon\" />\n          </span>\n          <!-- 对齐 -->\n          <div class=\"style-item\">\n            <el-dropdown trigger=\"click\" @command=\"handleCommand\">\n              <i class=\"vue-dsn-icon-duiqi style-icon\" />\n              <el-dropdown-menu slot=\"dropdown\">\n                <el-dropdown-item command=\"left\" :style=\"setAlignActive('left')\">左对齐</el-dropdown-item>\n                <el-dropdown-item command=\"center\" :style=\"setAlignActive('center')\">居中</el-dropdown-item>\n                <el-dropdown-item command=\"right\" :style=\"setAlignActive('right')\">右对齐</el-dropdown-item>\n              </el-dropdown-menu>\n            </el-dropdown>\n          </div>\n        </div>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"downloadImage\">文本生成图片</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport { base64toBlob } from '../../utils'\nimport ImageRichText from '../ImageRichText'\n\nconst fontFamilyData = [\n  { value: '黑体' },\n  { value: '宋体' },\n  { value: '仿宋' },\n  { value: '楷体' },\n  { value: '隶书' },\n  { value: '微软雅黑' },\n  { value: '方正姚体' }\n]\nconst fontSizeData = [\n  { value: '12px' },\n  { value: '14px' },\n  { value: '16px' },\n  { value: '18px' },\n  { value: '24px' },\n  { value: '32px' },\n  { value: '48px' }\n]\n\nexport default {\n  name: 'TextSetting',\n  components: { ImageRichText },\n  props: {\n    activeEleText: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      fontFamilyData,\n      fontSizeData\n    }\n  },\n  computed: {\n    // 字体是否加粗\n    fontWeight() {\n      if (+this.activeEleText.style.fontWeight === 400) {\n        return false\n      } else {\n        return true\n      }\n    }\n  },\n  watch: {\n    // 文字大小变化时行高一起变化\n    activeEleText: {\n      handler(val) {\n        this.activeEleText.style.lineHeight = val.style.fontSize\n      },\n      deep: true\n    }\n  },\n  methods: {\n    // 设置粗体\n    setFontWeight() {\n      if (+this.activeEleText.style.fontWeight === 400) {\n        this.activeEleText.style.fontWeight = 600\n      } else {\n        this.activeEleText.style.fontWeight = 400\n      }\n    },\n    // 设置对齐\n    handleCommand(command) {\n      this.activeEleText.style.textAlign = command\n    },\n    // 当前对齐方式\n    setAlignActive(type) {\n      if (this.activeEleText.style.textAlign === type) {\n        return {\n          backgroundColor: '#409eff',\n          color: '#fff'\n        }\n      } else {\n        return {\n          backgroundColor: '',\n          color: '#333'\n        }\n      }\n    },\n    // 文本生成图片\n    textBecomeImg(obj) {\n      const canvas = document.createElement('canvas')\n      canvas.width = obj.w\n      canvas.height = obj.h\n      const context = canvas.getContext('2d')\n      // 绘制字体距离canvas顶部初始的高度\n      const initTop = 4\n      const initLeft = 8\n      // 设置背景色\n      context.fillStyle = obj.style.backgroundColor || 'transparent'\n      context.fillRect(0, 0, canvas.width, canvas.height)\n      // 设置文本样式\n      context.fillStyle = obj.style.color\n      context.font = obj.style.fontWeight + ' ' + obj.style.fontSize + ' ' + obj.style.fontFamily\n      context.textBaseline = 'top'\n      // 设置文本对齐方式\n      context.textAlign = obj.style.textAlign\n\n      const textArr = obj.text.split('')\n      let tempStr = ''\n      const rowArr = []\n      const maxTextWidth = canvas.width - 2 * initLeft\n\n      for (let i = 0; i < textArr.length; i++) {\n        if (context.measureText(tempStr).width < maxTextWidth && context.measureText(tempStr + (textArr[i])).width <= maxTextWidth) {\n          tempStr += textArr[i]\n        } else {\n          rowArr.push(tempStr)\n          tempStr = textArr[i]\n        }\n      }\n      rowArr.push(tempStr)\n\n      let drawLeft\n      if (context.textAlign === 'left') {\n        drawLeft = initLeft\n      } else if (context.textAlign === 'center') {\n        drawLeft = maxTextWidth / 2\n      } else if (context.textAlign === 'right') {\n        drawLeft = maxTextWidth\n      }\n\n      for (let i = 0; i < rowArr.length; i++) {\n        context.fillText(rowArr[i], drawLeft, (parseInt(obj.style.fontSize) * i + initTop), maxTextWidth)\n      }\n\n      return canvas.toDataURL('image/png')\n    },\n    // 下载生成的图片\n    downloadImage() {\n      const imageBase64 = this.textBecomeImg(this.activeEleText)\n      const imageBlob = base64toBlob(imageBase64)\n      const link = document.createElement('a')\n      const event = document.createEvent('HTMLEvents')\n      // initEvent 不加后两个参数会在火狐下报错 事件类型，是否冒泡，是否阻止浏览器的默认行为\n      event.initEvent('click', true, true)\n      link.download = 'image.png'\n      link.href = URL.createObjectURL(imageBlob)\n      // 兼容火狐\n      link.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }))\n    }\n  }\n}\n</script>\n\n<style lang=\"less\">\n@import \"../../assets/less/text-setting\";\n</style>\n"]}]}