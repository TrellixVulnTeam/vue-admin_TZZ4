{"remainingRequest":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/Documents/iwork/kafo/vue-admin-design/src/views/image/ImageSynthesizer.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/src/views/image/ImageSynthesizer.vue","mtime":1624500048824},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouaW1hZ2Utc3ludGhlc2l6ZXIgewogIC5ib3gtd3JhcHBlciB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgaGVpZ2h0OiA1NTBweDsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICAuZHJhZy1jb250YWluZXIgewogICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjsKICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOwogICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogICAgICAuei1kcnItY29udGFpbmVyIHsKICAgICAgICBib3JkZXI6IDFweCBkYXNoZWQgdHJhbnNwYXJlbnQ7CiAgICAgICAgJi56LWFjdGl2ZSB7CiAgICAgICAgICBib3JkZXI6IDFweCBkYXNoZWQgIzJlOTVmZjsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgLmJveC1jb250ZW50IHsKICAgIGhlaWdodDogNTUwcHg7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgLmZvcm0td3JhcHBlciB7CiAgICAgIHdpZHRoOiAzMDBweDsKICAgICAgbWFyZ2luOiAxNXB4IGF1dG8gMDsKICAgIH0KICAgIC5lbC1idXR0b24gewogICAgICB3aWR0aDogMjEwcHg7CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["ImageSynthesizer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ImageSynthesizer.vue","sourceRoot":"src/views/image","sourcesContent":["<template>\n  <div class=\"image-synthesizer\">\n    <Hints>\n      <template slot=\"hintName\">图片合成</template>\n      <template slot=\"hintInfo\">\n        <p>基于VueDRR拖拽功能，在其上通过叠加图片、文字等，实现图片的叠加伪合成功能</p>\n        <p>VueDRR：基于vue-draggable-resizable的vue组件，可以实现拖动、拉伸和旋转功能</p>\n      </template>\n    </Hints>\n    <el-row :gutter=\"20\">\n      <el-col :span=\"16\">\n        <el-card shadow=\"always\">\n          <div slot=\"header\" class=\"title\">合成区域</div>\n          <div class=\"box-wrapper\">\n            <div class=\"drag-container\" :style=\"containerStyle\">\n              <ElementDrr\n                v-for=\"(item, index) in elements\"\n                :key=\"index\"\n                :element=\"item\"\n                :handles=\"dragHandles(item.type)\"\n                :style=\"elementZIndex(item.type)\"\n                @updateActiveEle=\"updateActiveEle\"\n              >\n                <!-- 图片 -->\n                <img v-if=\"item.type==='image'\" :src=\"item.src\" draggable=\"false\">\n                <!-- 文字 -->\n                <ImageRichText v-if=\"item.type === 'text'\" v-model=\"item.text\" :element=\"item\" :active-ele-text=\"activeEleText\" />\n              </ElementDrr>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card shadow=\"always\">\n          <div slot=\"header\" class=\"title\">设置区域</div>\n          <div class=\"box-content\">\n            <el-form class=\"form-wrapper\" label-width=\"70px\">\n              <el-form-item label=\"选择底图\">\n                <UploadImage btn-name=\"选择底图\" @on-success=\"handleSuccess\" />\n              </el-form-item>\n              <el-form-item label=\"添加文本\">\n                <el-button @click=\"addText\">添加文本</el-button>\n              </el-form-item>\n              <el-form-item label=\"添加图片\">\n                <UploadImage @on-success=\"handleAddImage\" />\n              </el-form-item>\n              <el-form-item label=\"删除元素\">\n                <el-button type=\"danger\" @click=\"deleteActiveEle\">删除元素</el-button>\n              </el-form-item>\n            </el-form>\n            <TextSetting v-if=\"activeEle.type === 'text'\" :active-ele-text=\"activeEleText\" />\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport Hints from '../../components/Hints'\nimport ElementDrr from '../../components/ElementDrr'\nimport ImageRichText from '../../components/ImageRichText'\nimport TextSetting from '../../components/TextSetting'\nimport UploadImage from '../../components/UploadImage'\nimport { calcImageSize } from '../../utils'\n\nexport default {\n  name: 'ImageSynthesizer',\n  components: { Hints, ElementDrr, ImageRichText, TextSetting, UploadImage },\n  data() {\n    return {\n      container: { // 展示区（可拖拽区）样式\n        width: 0,\n        height: 0,\n        bgImageSrc: 'https://cdn.jsdelivr.net/gh/baimingxuan/media-store/images/img01.jpg' // 底图路径\n      },\n      elements: [], // 叠加组件数组\n      activeEle: {}, // 当前图片上聚焦的叠加组件\n      eleNum: 0\n    }\n  },\n  computed: {\n    // 展示区（可拖拽区）样式\n    containerStyle() {\n      return {\n        width: this.container.width + 'px',\n        height: this.container.height + 'px',\n        backgroundImage: 'url(\\'' + this.container.bgImageSrc + '\\')'\n      }\n    },\n    // 选择的文本\n    activeEleText() {\n      if (this.activeEle.type === 'text') {\n        return this.activeEle\n      }\n    }\n  },\n  created() {\n    this.getDragContainerSize(1920, 1200)\n    this.addText()\n    this.addImage({\n      active: false,\n      src: 'https://cdn.jsdelivr.net/gh/baimingxuan/media-store/images/img05.jpeg',\n      size: 53248,\n      width: 132,\n      height: 132\n    })\n  },\n  methods: {\n    // 拖动元素把柄\n    dragHandles(type) {\n      if (type === 'text') {\n        return ['e', 'w']\n      }\n    },\n    // 元素层级排序\n    elementZIndex(type) {\n      let zIndex = 1\n      switch (type) {\n        case 'text':\n          zIndex = 3\n          break\n        case 'image':\n          zIndex = 2\n          break\n      }\n      return {\n        zIndex: zIndex\n      }\n    },\n    // 底图上传成功\n    handleSuccess(data) {\n      this.container.bgImageSrc = data\n      const image = new Image()\n      image.src = data\n      image.onload = () => {\n        this.getDragContainerSize(image.width, image.height)\n      }\n    },\n    // 计算底图展示宽高\n    getDragContainerSize(imageW, imageH) {\n      const [showAreaW, showAreaH] = [850, 550]\n      const sizeObj = calcImageSize(imageW, imageH, showAreaW, showAreaH)\n      // 更新图片展示区宽高\n      this.container.width = sizeObj.width\n      this.container.height = sizeObj.height\n    },\n    // 添加文本\n    addText() {\n      const tagNum = ++this.eleNum\n      const text = {\n        active: true,\n        text: '请输入文本',\n        type: 'text',\n        tag: 'text_' + tagNum,\n        x: 300,\n        y: 100,\n        w: 180,\n        h: 36,\n        style: {\n          textAlign: 'left',\n          lineHeight: '24px',\n          fontSize: '24px',\n          fontFamily: '微软黑体',\n          fontWeight: 400,\n          color: '#f70707',\n          backgroundColor: '#05f8e8',\n          overflow: 'hidden'\n        }\n      }\n      if (this.elements.length > 4) {\n        this.$message.warning('图片上最多叠加5个元素！')\n      } else {\n        this.elements.push(text)\n        this.updateActiveEle(text)\n      }\n    },\n    // 添加图片\n    addImage(imgObj) {\n      const tagNum = ++this.eleNum\n      const image = {\n        active: imgObj.active,\n        type: 'image',\n        tag: 'image_' + tagNum,\n        x: 320,\n        y: 300,\n        w: parseInt(imgObj.width),\n        h: parseInt(imgObj.height),\n        src: imgObj.src,\n        size: imgObj.size\n      }\n      if (this.elements.length > 4) {\n        this.$message.warning('图片上最多叠加5个元素！')\n      } else {\n        this.elements.push(image)\n        if (imgObj.active) {\n          this.updateActiveEle(image)\n        }\n      }\n    },\n    // 上传图片成功\n    handleAddImage(data) {\n      const dataStrLen = data.replace('data:image/jpeg;base64,', '').length\n      const dataSize = parseInt(dataStrLen - (dataStrLen / 8) * 2)\n      const img = new Image()\n      img.src = data\n      img.onload = () => {\n        const imageSize = calcImageSize(img.width, img.height, parseInt(this.container.width / 4), parseInt(this.container.height / 4))\n        this.addImage({\n          active: true,\n          src: data,\n          size: dataSize,\n          width: imageSize.width,\n          height: imageSize.height\n        })\n      }\n    },\n    // 更新当前选中的元素\n    updateActiveEle(element) {\n      this.activeEle = element\n    },\n    // 删除图片上当前选择的元素\n    deleteActiveEle() {\n      const newElements = this.elements.filter(item => {\n        return item.tag !== this.activeEle.tag\n      })\n      this.$nextTick(() => {\n        this.elements = newElements\n      })\n      this.updateActiveEle({})\n    }\n  }\n}\n</script>\n\n<style lang=\"less\">\n.image-synthesizer {\n  .box-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 550px;\n    overflow: hidden;\n    .drag-container {\n      position: relative;\n      background-size: contain;\n      background-position: center;\n      background-repeat: no-repeat;\n      .z-drr-container {\n        border: 1px dashed transparent;\n        &.z-active {\n          border: 1px dashed #2e95ff;\n        }\n      }\n    }\n  }\n  .box-content {\n    height: 550px;\n    overflow: hidden;\n    .form-wrapper {\n      width: 300px;\n      margin: 15px auto 0;\n    }\n    .el-button {\n      width: 210px;\n    }\n  }\n}\n</style>\n"]}]}