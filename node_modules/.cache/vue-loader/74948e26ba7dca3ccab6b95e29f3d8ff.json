{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/develop/iwork/kafo/vue-admin/src/views/manage/aia/robot-dynamic.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/views/manage/aia/robot-dynamic.vue","mtime":1634814441099},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvUGFnaW5hdGlvbicKaW1wb3J0IGFkZFJvYm90RHluYW1pYyBmcm9tICcuL2RpYWxvZy9hZGQtcm9ib3QtZHluYW1pYycKaW1wb3J0IEhpbnRzIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvSGludHMnCmltcG9ydCB7Z2V0QXJyTmFtZSwgZ2V0QXJlYUxpc3QsIGdldFJldmlld1N0YXR1c30gZnJvbSAiQC91dGlscy9kaXN0IjsKaW1wb3J0IHt0b1RpbWV9IGZyb20gIkAvdXRpbHMvdXRpbCI7CmltcG9ydCBWdWVWaWRlb1BsYXllciBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL1Z1ZVZpZGVvUGxheWVyJwoKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICdUYWJsZScsCiAgICBjb21wb25lbnRzOiB7UGFnaW5hdGlvbiwgSGludHMsIGFkZFJvYm90RHluYW1pYywgVnVlVmlkZW9QbGF5ZXJ9LAogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAvLyDmlbDmja7liJfooajliqDovb3liqjnlLsKICAgICAgICAgICAgbGlzdExvYWRpbmc6IHRydWUsCiAgICAgICAgICAgIC8vIOafpeivouWIl+ihqOWPguaVsOWvueixoQogICAgICAgICAgICBzZWFyY2g6IHsKICAgICAgICAgICAgICAgIGVudGl0eVR5cGU6IDIsCiAgICAgICAgICAgICAgICBlbnRpdHlJZDogIiIsCiAgICAgICAgICAgICAgICBwYWdlOnsKICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogMSwKICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZTogMTAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG90YWw6IDAsCiAgICAgICAgICAgIHRhYmxlRGF0YTogW10sCiAgICAgICAgICAgIG11bHRpcGxlU2VsZWN0aW9uOiBbXSwKICAgICAgICAgICAgZm9ybVZpc2libGU6IGZhbHNlLAogICAgICAgICAgICBwbGF5VmlzaWJsZTogZmFsc2UsCiAgICAgICAgICAgIGFyZWFMaXN0OiBnZXRBcmVhTGlzdCh0cnVlKSwKICAgICAgICAgICAgYXBwTGlzdDogW10KICAgICAgICB9CiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgICB0aGlzLnNlYXJjaC5lbnRpdHlJZCA9IHRoaXMuJHJvdXRlLnF1ZXJ5LnJvYm90SWQKICAgICAgICB0aGlzLnNlYXJjaC5uaWNrbmFtZSA9IHRoaXMuJHJvdXRlLnF1ZXJ5Lm5pY2tuYW1lCiAgICAgICAgdGhpcy5mZXRjaERhdGEoKQogICAgfSwKICAgIHdhdGNoOiB7CiAgICAgICAgJHJvdXRlOiB7CiAgICAgICAgICAgIGhhbmRsZXIobmV3TmFtZSwgb2xkTmFtZSkgewogICAgICAgICAgICAgICAgdGhpcy5zZWFyY2guZW50aXR5SWQgPSB0aGlzLiRyb3V0ZS5xdWVyeS5yb2JvdElkCiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaC5uaWNrbmFtZSA9IHRoaXMuJHJvdXRlLnF1ZXJ5Lm5pY2tuYW1lCiAgICAgICAgICAgICAgICB0aGlzLmZldGNoRGF0YSgpCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZXA6IHRydWUKICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIC8vIOiOt+WPluaVsOaNruWIl+ihqAogICAgICAgIGZldGNoRGF0YSgpIHsKICAgICAgICAgICAgY29uc3QgJHRoaXMgPSB0aGlzCiAgICAgICAgICAgIHRoaXMubGlzdExvYWRpbmcgPSB0cnVlCiAgICAgICAgICAgIHRoaXMuJHNlcnZpY2Uucm9ib3QuZ2V0TW9tZW50TGlzdCh0aGlzLnNlYXJjaCwgZnVuY3Rpb24gKHJlc3VsdCl7CiAgICAgICAgICAgICAgICBjb25zdCBsaXN0ID0gcmVzdWx0LmdldE1vbWVudHNMaXN0KCkKICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBbXQogICAgICAgICAgICAgICAgbGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCk9PnsKICAgICAgICAgICAgICAgICAgICBjb25zdCBqc29uID0gewogICAgICAgICAgICAgICAgICAgICAgICAiaWQiIDogaXRlbS5nZXRJZCgpLAogICAgICAgICAgICAgICAgICAgICAgICAiYXBwSWQiIDogaXRlbS5nZXRBcHBJZCgpLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJlYUlkIiA6IGl0ZW0uZ2V0QXJlYUlkKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmVhU3RyIiA6IGdldEFyck5hbWUoJHRoaXMuYXJlYUxpc3QsIGl0ZW0uZ2V0QXJlYUlkKCkpLAogICAgICAgICAgICAgICAgICAgICAgICAiZW50aXR5VHlwZSIgOiBpdGVtLmdldEVudGl0eVR5cGUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImVudGl0eUlkIiA6IGl0ZW0uZ2V0RW50aXR5SWQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyIgOiBnZXRSZXZpZXdTdGF0dXMoaXRlbS5nZXRTdGF0dXMoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IiA6IGl0ZW0uZ2V0Q29udGVudCgpLAogICAgICAgICAgICAgICAgICAgICAgICAiaW1hZ2VzIjogaXRlbS5nZXRJbWFnZXNMaXN0KCksCiAgICAgICAgICAgICAgICAgICAgICAgICJ2aWRlbyI6IGl0ZW0uZ2V0VmlkZW8oKSwKICAgICAgICAgICAgICAgICAgICAgICAgInRodW1iIjogaXRlbS5nZXRUaHVtYigpLAogICAgICAgICAgICAgICAgICAgICAgICAibGlrZXMiOiBpdGVtLmdldExpa2VzKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJwdWJsaXNoQXQiOiB0b1RpbWUoaXRlbS5nZXRQdWJsaXNoQXQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICJuaWNrbmFtZSI6IGl0ZW0uZ2V0Tmlja25hbWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImF2YXRhciI6IGl0ZW0uZ2V0QXZhdGFyKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJzdHJ1Y3QiOiBpdGVtCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaChqc29uKQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC8vICR0aGlzLnRvdGFsID0gcmVzdWx0LmdldFRvdGFsQ291bnQoKQogICAgICAgICAgICAgICAgJHRoaXMudGFibGVEYXRhID0gZGF0YQogICAgICAgICAgICAgICAgJHRoaXMubGlzdExvYWRpbmcgPSBmYWxzZQogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIG9uU3VibWl0KCkgewogICAgICAgICAgICB0aGlzLnNlYXJjaC5wYWdlLmN1cnJlbnRQYWdlID0gMQogICAgICAgICAgICB0aGlzLmZldGNoRGF0YSgpCiAgICAgICAgfSwKICAgICAgICB0b0RpYWxvZyhjb21wb25lbnQsIHJvdywgZW50aXR5SWQpewogICAgICAgICAgICB0aGlzLiRyZWZzW2NvbXBvbmVudF0uZGlhbG9nVmlzaWJsZSA9IHRydWUKICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCk9PnsKICAgICAgICAgICAgICAgIHRoaXMuJHJlZnNbY29tcG9uZW50XS5pbml0KHJvdywgZW50aXR5SWQpCiAgICAgICAgICAgIH0pCiAgICAgICAgfSwKICAgICAgICBwbGF5KHJvdykgewogICAgICAgICAgICB0aGlzLnBsYXlWaXNpYmxlID0gdHJ1ZTsKICAgICAgICAgICAgbGV0IHNyYyA9IHJvdy52aWRlbwogICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKT0+ewogICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5teVZpZGVvUGxheWVyLmluaXRTcmMoc3JjKTsKICAgICAgICAgICAgfSkKICAgICAgICB9LAogICAgICAgIGNsb3NlVmlkZW8oKXsKICAgICAgICAgICAgdGhpcy5wbGF5VmlzaWJsZSA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKT0+ewogICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5teVZpZGVvUGxheWVyLmVtcHR5U3JjKCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgfSwKICAgICAgICBoYW5kbGVEZWxldGUoaW5kZXgsIHJvdykgewogICAgICAgICAgICBjb25zb2xlLmxvZyhpbmRleCwgcm93KQogICAgICAgICAgICB0aGlzLiRjb25maXJtKCfmraTmk43kvZzlsIbliKDpmaTpgInkuK3mlbDmja4sIOaYr+WQpue7p+e7rT8nLCAn5o+Q56S6JywgewogICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsCiAgICAgICAgICAgICAgICB0eXBlOiAnd2FybmluZycKICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAvLyDmraTlpITlj6/mt7vliqAtLeWIoOmZpOaOpeWPowogICAgICAgICAgICAgICAgLy8g5Yig6Zmk5oiQ5Yqf6LCD55SoZmV0Y2hEYXRh5pa55rOV5pu05paw5YiX6KGoCiAgICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ+WIoOmZpOaIkOWKnyEnCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KS5jYXRjaCgoKSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5mbycsCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ+W3suWPlua2iOWIoOmZpCcKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pCiAgICAgICAgfSwKICAgICAgICAvLyDmibnph4/liKDpmaQKICAgICAgICBiYXRjaERlbGV0ZSgpIHsKICAgICAgICAgICAgaWYgKHRoaXMubXVsdGlwbGVTZWxlY3Rpb24ubGVuZ3RoIDwgMSkgewogICAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ+ivt+WFiOmAieaLqeimgeWIoOmZpOeahOaVsOaNru+8gScsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVEZWxldGUoKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg=="},null]}