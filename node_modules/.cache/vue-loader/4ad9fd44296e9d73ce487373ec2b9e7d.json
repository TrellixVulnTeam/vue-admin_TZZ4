{"remainingRequest":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/Documents/iwork/kafo/vue-admin-design/src/components/Editor/index.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/src/components/Editor/index.vue","mtime":1624500048818},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/Documents/iwork/kafo/vue-admin-design/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZWRpdG9yLXdyYXBwZXJ7CiAgLmVkaXRvci1jb250YWluZXJ7CiAgICB0ZXh0LWFsaWduOmxlZnQ7CiAgICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMSkgMCAycHggMTJweCAwOwogICAgLnctZS10b29sYmFyewogICAgICBwYWRkaW5nOiA1cHg7CiAgICAgIGJvcmRlcjogbm9uZSFpbXBvcnRhbnQ7CiAgICB9CiAgICAudy1lLXRleHQtY29udGFpbmVyewogICAgICBtaW4taGVpZ2h0OiA0NTBweCAhaW1wb3J0YW50OwogICAgICBib3JkZXI6IG5vbmUhaW1wb3J0YW50OwogICAgICAudy1lLXRleHR7CiAgICAgICAgcGFkZGluZzogMTBweDsKICAgICAgICBvdmVyZmxvdy15OiBhdXRvOwogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/Editor","sourcesContent":["<template>\r\n  <div class=\"editor-wrapper\">\r\n    <div ref=\"editorEle\" class=\"editor-container\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport E from 'wangeditor'\r\n\r\nexport default {\r\n  name: 'Editor',\r\n  props: {\r\n    value: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      editor: null\r\n    }\r\n  },\r\n  watch: {\r\n    value(val) {\r\n      this.editor.txt.html(val)\r\n    }\r\n  },\r\n  mounted() {\r\n    this.editor = new E(this.$refs.editorEle)\r\n    this.editor.customConfig.onchange = (html) => {\r\n      this.$emit('input', html)\r\n    }\r\n    this.editor.customConfig.uploadImgServer = '你的上传图片的接口'\r\n    this.editor.customConfig.uploadFileName = '你自定义的文件名'\r\n    // 下面是最重要的的方法\r\n    this.editor.customConfig.uploadImgHooks = {\r\n      before: function(xhr, editor, files) {\r\n        // 图片上传之前触发\r\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，files 是选择的图片文件\r\n\r\n        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\r\n        // return {\r\n        //     prevent: true,\r\n        //     msg: '放弃上传'\r\n        // }\r\n      },\r\n      success: function(xhr, editor, result) {\r\n        // 图片上传并返回结果，图片插入成功之后触发\r\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果\r\n        this.imgUrl = Object.values(result.data).toString()\r\n      },\r\n      fail: function(xhr, editor, result) {\r\n        // 图片上传并返回结果，但图片插入错误时触发\r\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果\r\n      },\r\n      error: function(xhr, editor) {\r\n        // 图片上传出错时触发\r\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象\r\n      },\r\n      timeout: function(xhr, editor) {\r\n        // 图片上传超时时触发\r\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象\r\n      },\r\n\r\n      // 如果服务器端返回的不是 {errno:0, data: [...]} 这种格式，可使用该配置\r\n      // （但是，服务器端返回的必须是一个 JSON 格式字符串！！！否则会报错）\r\n      customInsert: function(insertImg, result, editor) {\r\n        // 图片上传并返回结果，自定义插入图片的事件（而不是编辑器自动插入图片！！！）\r\n        // insertImg 是插入图片的函数，editor 是编辑器对象，result 是服务器端返回的结果\r\n\r\n        // 举例：假如上传图片成功后，服务器端返回的是 {url:'....'} 这种格式，即可这样插入图片：\r\n        // result.data就是服务器返回的图片名字和链接\r\n        const url = Object.values(result.data)\r\n        // 在这里转成JSON格式\r\n        JSON.stringify(url)\r\n        insertImg(url)\r\n        // result 必须是一个 JSON 格式字符串！！！否则报错\r\n      }\r\n    }\r\n\r\n    // 创建富文本实例\r\n    this.editor.create()\r\n    this.editor.txt.html(this.placeholder)\r\n  },\r\n  beforeDestroy() {\r\n    this.editor.destroy()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n  .editor-wrapper{\r\n    .editor-container{\r\n      text-align:left;\r\n      box-shadow: rgba(0, 0, 0, 0.1) 0 2px 12px 0;\r\n      .w-e-toolbar{\r\n        padding: 5px;\r\n        border: none!important;\r\n      }\r\n      .w-e-text-container{\r\n        min-height: 450px !important;\r\n        border: none!important;\r\n        .w-e-text{\r\n          padding: 10px;\r\n          overflow-y: auto;\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>\r\n"]}]}