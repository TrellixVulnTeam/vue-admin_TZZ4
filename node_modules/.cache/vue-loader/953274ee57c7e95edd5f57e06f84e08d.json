{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/develop/iwork/kafo/vue-admin/src/views/home/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/views/home/Home.vue","mtime":1635234209571},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb3VudFRvIGZyb20gJ3Z1ZS1jb3VudC10bycKaW1wb3J0IENoYXJ0c0JhckxpbmUgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9DaGFydHMvQ2hhcnRzQmFyTGluZScKaW1wb3J0IENoYXJ0c0JhciBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NoYXJ0cy9DaGFydHNCYXInCmltcG9ydCBDaGFydHNMaW5lIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQ2hhcnRzL0NoYXJ0c0xpbmUnCmltcG9ydCB7Z2V0QXJlYUxpc3QsIGdldEFwcExpc3QsIGdldEFwcE5hbWUsIGdldEN1cnJlbnRVc2VyQXJlYUlkfSBmcm9tICJAL3V0aWxzL2Rpc3QiCmltcG9ydCB7ZW5kVW5peCwgZ2V0Q3VycmVudERhdGUsIHN0YXJ0VW5peCwgdG9Eb2xsYXJ9IGZyb20gIkAvdXRpbHMvdXRpbCI7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAnSG9tZScsCiAgICBjb21wb25lbnRzOiB7Q291bnRUbywgQ2hhcnRzQmFyLCBDaGFydHNCYXJMaW5lLCBDaGFydHNMaW5lfSwKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbGlzdExvYWRpbmc6IGZhbHNlLAogICAgICAgICAgICBzZWFyY2g6IHsKICAgICAgICAgICAgICAgIGFyZWFJZDogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgZGF0ZTogZ2V0Q3VycmVudERhdGUoKSwKICAgICAgICAgICAgICAgIHN0YXJ0QXQ6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgIGVuZEF0OiB1bmRlZmluZWQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXV0aEFyZWFJZDogZ2V0Q3VycmVudFVzZXJBcmVhSWQoKSwKICAgICAgICAgICAgYXJlYUxpc3Q6IGdldEFyZWFMaXN0KGZhbHNlKSwKICAgICAgICAgICAgYXBwTGlzdDogZ2V0QXBwTGlzdCgpLAogICAgICAgICAgICBjYXJkSW5mb0RhdGE6IFtdLAogICAgICAgICAgICBuZXdVc2VyS2V5OiAxLAogICAgICAgICAgICBpbmNvbWVLZXk6IDIwLAogICAgICAgICAgICB0b3RhbEtleTogNDAsCiAgICAgICAgICAgIGFjdGl2ZUtleTogNjAsCiAgICAgICAgICAgIGNoYW5uZWxLZXk6IDgwLAogICAgICAgICAgICBzdWJLZXk6IDEwMCwKICAgICAgICAgICAgaW5jb21lRGF0YTogewogICAgICAgICAgICAgICAgdGl0bGU6ICfmlrDlop7mlLblhaUnLAogICAgICAgICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5paw5aKe5pS25YWlJ10sCiAgICAgICAgICAgICAgICBkYXRhOiBbXQogICAgICAgICAgICB9LAogICAgICAgICAgICBzdWJEYXRhOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+iuoumYheaUtuWFpScsCiAgICAgICAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgICAgICAgIGxlZ2VuZDogWyforqLpmIXmlLblhaUnXSwKICAgICAgICAgICAgICAgIGRhdGE6IFtdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRvdGFsRGF0ZTogewogICAgICAgICAgICAgICAgdGl0bGU6ICflhajpg6jmlLblhaUnLAogICAgICAgICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5oC75pS25YWlJ10sCiAgICAgICAgICAgICAgICBkYXRhOiBbXQogICAgICAgICAgICB9LAogICAgICAgICAgICB1c2VyRGF0ZTogewogICAgICAgICAgICAgICAgdGl0bGU6ICfmlrDlop7nlKjmiLcnLAogICAgICAgICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5paw5aKe55So5oi3J10sCiAgICAgICAgICAgICAgICBkYXRhOiBbXQogICAgICAgICAgICB9LAogICAgICAgICAgICBhY3RpdmVEYXRhOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+a0u+i3g+eUqOaItycsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5rS76LeD55So5oi3J10sCiAgICAgICAgICAgICAgICBrZXlzOiBbXSwKICAgICAgICAgICAgICAgIHZhbHVlczogW10KICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2hhbm5lbERhdGE6IHsKICAgICAgICAgICAgICAgIHRpdGxlOiAn5YWF5YC85rig6YGTJywKICAgICAgICAgICAgICAgIGxlZ2VuZDogWydnb29nbGUnLCAnYXBwbGUnLCAn5YW25LuWJ10sCiAgICAgICAgICAgICAgICBkYXRhOiBbXQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgdGhpcy5zZWFyY2guYXJlYUlkID0gdGhpcy5hdXRoQXJlYUlkID09PSAwID8gdGhpcy5hcmVhTGlzdFswXS52YWx1ZSA6IHRoaXMuYXV0aEFyZWFJZAogICAgICAgIHRoaXMuaW5pdENhcmQoKQogICAgICAgIHRoaXMuaW5pdERhdGEoKQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBvblNlYXJjaCgpIHsKICAgICAgICAgICAgdGhpcy5saXN0TG9hZGluZyA9IHRydWUKICAgICAgICAgICAgdGhpcy5pbml0Q2FyZCgpCiAgICAgICAgICAgIHRoaXMuaW5pdERhdGEoKQogICAgICAgIH0sCiAgICAgICAgaW5pdENhcmQoKXsKICAgICAgICAgICAgY29uc3QgJHRoaXMgPSB0aGlzCiAgICAgICAgICAgIHRoaXMuY2FyZEluZm9EYXRhID0gW10KICAgICAgICAgICAgdGhpcy4kc2VydmljZS5ob21lLmdldE92ZXJ2aWV3KHRoaXMuaGFuZGxlU2VhcmNoKCksIGZ1bmN0aW9uIChyZXN1bHQpewogICAgICAgICAgICAgICAgbGV0IGluY29tZSA9IHJlc3VsdC5nZXRJbmNvbWUoKQogICAgICAgICAgICAgICAgbGV0IGluY29tZV9kZWNpbWFscyA9IDAKICAgICAgICAgICAgICAgIGlmKGluY29tZT4wKXsKICAgICAgICAgICAgICAgICAgICBpbmNvbWUgPSB0b0RvbGxhcihpbmNvbWUpCiAgICAgICAgICAgICAgICAgICAgaW5jb21lX2RlY2ltYWxzID0gMgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IGluYyA9IHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+aAu+aUtuWFpS/orqLpmIXmlLblhaUv6K6i5Y2V5pWwJywgbnVtOiAzLCBjb3VudDogaW5jb21lLCBjb3VudDI6IHJlc3VsdC5nZXRTdWJJbmNvbWUoKSwgY291bnQzOiByZXN1bHQuZ2V0UGF5Q291bnQoKSwgZGVjaW1hbHM6IGluY29tZV9kZWNpbWFscwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IHVzZXIgPSB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfmlrDlop4v5Y+v6YCa6K+dL+a0u+i3g+eUqOaItycsIG51bTogMywgY291bnQ6IHJlc3VsdC5nZXROZXdVc2VyKCksIGNvdW50MjogcmVzdWx0LmdldFZhbGlkVXNlcigpLCBjb3VudDM6IHJlc3VsdC5nZXRBY3RpdmVVc2VyKCksIGRlY2ltYWxzOiAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgYW5jaG9yID0gewogICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6YCa6K+dL+WcqOe6v+S4u+aSrScsIG51bTogMiwgY291bnQ6IHJlc3VsdC5nZXRCdXN5QW5jaG9yKCksIGNvdW50MjogcmVzdWx0LmdldE9ubGluZUFuY2hvcigpLCBkZWNpbWFsczogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IHJldmlldyA9IHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+W+heWuoeaguOS4u+aSrS/otYTmlpkv6KeG6aKRJywgbnVtOiAzLCBjb3VudDogcmVzdWx0LmdldFJldmlld0FuY2hvcigpLCBjb3VudDI6IHJlc3VsdC5nZXRSZXZpZXdQcm9maWxlKCksIGNvdW50MzogcmVzdWx0LmdldFJldmlld1ZpZGVvKCksIGRlY2ltYWxzOiAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgbmV3QW1vdW50ID0gcmVzdWx0LmdldE5ld0Ftb3VudCgpIC8gMTAwMAogICAgICAgICAgICAgICAgbGV0IGV4cGVuc2VBbW91bnQgPSByZXN1bHQuZ2V0RXhwZW5zZUFtb3VudCgpIC8gMTAwMAogICAgICAgICAgICAgICAgbGV0IHRvdGFsQW1vdW50ID0gcmVzdWx0LmdldFRvdGFsQW1vdW50KCkgLyAxMDAwCiAgICAgICAgICAgICAgICBsZXQgYW1vdW50ID0gewogICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5paw5YWF5YC8L+a2iOi0uS/mgLvkvZnpop0nLCBudW06IDMsIGNvdW50OiBuZXdBbW91bnQsIGNvdW50MjogZXhwZW5zZUFtb3VudCwgY291bnQzOiB0b3RhbEFtb3VudCwgZGVjaW1hbHM6IDAsIHVuaXQ6ICJLIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJHRoaXMuY2FyZEluZm9EYXRhLnB1c2goaW5jKQogICAgICAgICAgICAgICAgJHRoaXMuY2FyZEluZm9EYXRhLnB1c2godXNlcikKICAgICAgICAgICAgICAgICR0aGlzLmNhcmRJbmZvRGF0YS5wdXNoKGFuY2hvcikKICAgICAgICAgICAgICAgICR0aGlzLmNhcmRJbmZvRGF0YS5wdXNoKHJldmlldykKICAgICAgICAgICAgICAgICR0aGlzLmNhcmRJbmZvRGF0YS5wdXNoKGFtb3VudCkKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBpbml0RGF0YSgpewogICAgICAgICAgICBjb25zdCAkdGhpcyA9IHRoaXMKICAgICAgICAgICAgdGhpcy4kc2VydmljZS5ob21lLmdldEhvbWVTdGF0KHRoaXMuaGFuZGxlU2VhcmNoKCksIGZ1bmN0aW9uIChyZXN1bHQpewogICAgICAgICAgICAgICAgbGV0IHN0YXRMaXN0ID0gcmVzdWx0LmdldFN0YXRzTGlzdCgpCgogICAgICAgICAgICAgICAgbGV0IG5ld0FyciA9IFtdCiAgICAgICAgICAgICAgICBsZXQgc3ViQXJyID0gW10KICAgICAgICAgICAgICAgIGxldCB0b3RhbEFyciA9IFtdCiAgICAgICAgICAgICAgICBsZXQgdXNlckFyciA9IFtdCiAgICAgICAgICAgICAgICBsZXQgY2hhbm5lbEFyciA9IFtdCiAgICAgICAgICAgICAgICBzdGF0TGlzdC5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgICAgIGxldCBhcHAgPSBnZXRBcHBOYW1lKCR0aGlzLmFwcExpc3QsIGl0ZW0uZ2V0QXBwSWQoKSkKICAgICAgICAgICAgICAgICAgICBsZXQgb3NTdHIgPSBhcHAub3MgPT09IDEgPyAi8J+kliIgOiAiIjsKICAgICAgICAgICAgICAgICAgICBsZXQgdGl0bGUgPSBhcHAubGFiZWwgKyBvc1N0cgoKICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmdldE5ld0luY29tZSgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Fyci5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDE6IHRvRG9sbGFyKGl0ZW0uZ2V0TmV3SW5jb21lKCkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmdldFN1YkluY29tZSgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkFyci5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDE6IHRvRG9sbGFyKGl0ZW0uZ2V0U3ViSW5jb21lKCkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmdldFRvdGFsSW5jb21lKCk+MCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXJyLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsMTogdG9Eb2xsYXIoaXRlbS5nZXRUb3RhbEluY29tZSgpKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5nZXROZXdVc2VyKCk+MCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJBcnIucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwxOiBpdGVtLmdldE5ld1VzZXIoKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5nZXRHb29nbGVJbmNvbWUoKT4wIHx8IGl0ZW0uZ2V0QXBwbGVJbmNvbWUoKT4wIHx8IGl0ZW0uZ2V0T3RoZXJJbmNvbWUoKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdvb2dsZUluY29tZSA9IHRvRG9sbGFyKGl0ZW0uZ2V0R29vZ2xlSW5jb21lKCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcHBsZUluY29tZSA9IHRvRG9sbGFyKGl0ZW0uZ2V0QXBwbGVJbmNvbWUoKSkKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG90aGVySW5jb21lID0gdG9Eb2xsYXIoaXRlbS5nZXRPdGhlckluY29tZSgpKQogICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsQXJyLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsMTogZ29vZ2xlSW5jb21lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsMjogYXBwbGVJbmNvbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwzOiBvdGhlckluY29tZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiBnb29nbGVJbmNvbWUgKyBhcHBsZUluY29tZSArIG90aGVySW5jb21lCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgICAvLyDmlrDlop7nlKjmiLcKICAgICAgICAgICAgICAgICR0aGlzLnVzZXJEYXRlLm5hbWUgPSAi5oC76K6hOiIgKyAkdGhpcy5jb3VudFRvdGFsKHVzZXJBcnIsICd2YWwxJykKICAgICAgICAgICAgICAgICR0aGlzLnVzZXJEYXRlLmRhdGEgPSB1c2VyQXJyLnNvcnQoZnVuY3Rpb24oeCx5KXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4geS52YWwxIC0geC52YWwxOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICsrJHRoaXMubmV3VXNlcktleQoKCiAgICAgICAgICAgICAgICAvLyDorqLpmIXmlLblhaUKICAgICAgICAgICAgICAgICR0aGlzLnN1YkRhdGEubmFtZSA9ICLmgLvorqE6IiArICR0aGlzLmNvdW50VG90YWwoc3ViQXJyLCAndmFsMScpCiAgICAgICAgICAgICAgICAkdGhpcy5zdWJEYXRhLmRhdGEgPSBzdWJBcnIuc29ydChmdW5jdGlvbih4LHkpewogICAgICAgICAgICAgICAgICAgIHJldHVybiB5LnZhbDEgLSB4LnZhbDE7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKyskdGhpcy5zdWJLZXkKCiAgICAgICAgICAgICAgICAvLyDmlrDlop7mlLblhaUKICAgICAgICAgICAgICAgICR0aGlzLmluY29tZURhdGEubmFtZSA9ICLmgLvorqE6IiArICR0aGlzLmNvdW50VG90YWwobmV3QXJyLCAndmFsMScpCiAgICAgICAgICAgICAgICAkdGhpcy5pbmNvbWVEYXRhLmRhdGEgPSBuZXdBcnIuc29ydChmdW5jdGlvbih4LHkpewogICAgICAgICAgICAgICAgICAgIHJldHVybiB5LnZhbDEgLSB4LnZhbDE7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKyskdGhpcy5pbmNvbWVLZXkKCiAgICAgICAgICAgICAgICAvLyDlhajpg6jmlLblhaUKICAgICAgICAgICAgICAgICR0aGlzLnRvdGFsRGF0ZS5uYW1lID0gIuaAu+iuoToiICsgJHRoaXMuY291bnRUb3RhbCh0b3RhbEFyciwgJ3ZhbDEnKQogICAgICAgICAgICAgICAgJHRoaXMudG90YWxEYXRlLmRhdGEgPSB0b3RhbEFyci5zb3J0KGZ1bmN0aW9uKHgseSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkudmFsMSAtIHgudmFsMTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICArKyR0aGlzLnRvdGFsS2V5CgogICAgICAgICAgICAgICAgLy8g5YWF5YC85rig6YGTCiAgICAgICAgICAgICAgICAkdGhpcy5jaGFubmVsRGF0YS5uYW1lID0gIuaAu+iuoToiICsgJHRoaXMuY291bnRUb3RhbChjaGFubmVsQXJyLCAndG90YWwnKQogICAgICAgICAgICAgICAgICAgICsgIiAgZ29vZ2xlOiIrICR0aGlzLmNvdW50VG90YWwoY2hhbm5lbEFyciwgJ3ZhbDEnKQogICAgICAgICAgICAgICAgICAgICsgIiAgYXBwbGU6IisgJHRoaXMuY291bnRUb3RhbChjaGFubmVsQXJyLCAndmFsMicpCiAgICAgICAgICAgICAgICAgICAgKyAiICDlhbbku5Y6IisgJHRoaXMuY291bnRUb3RhbChjaGFubmVsQXJyLCAndmFsMycpCiAgICAgICAgICAgICAgICAkdGhpcy5jaGFubmVsRGF0YS5kYXRhID0gY2hhbm5lbEFyci5zb3J0KGZ1bmN0aW9uKHgseSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkudG90YWwgLSB4LnRvdGFsOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICsrJHRoaXMuY2hhbm5lbEtleQoKICAgICAgICAgICAgICAgIGxldCBhY3RpdmVMaXN0ID0gcmVzdWx0LmdldEhvdXJseUFjdGl2ZXNMaXN0KCkKICAgICAgICAgICAgICAgICR0aGlzLmhhbmRsZUFjdGl2ZURhdGEoYWN0aXZlTGlzdCkKICAgICAgICAgICAgICAgICsrJHRoaXMuYWN0aXZlS2V5CiAgICAgICAgICAgICAgICAkdGhpcy5saXN0TG9hZGluZyA9IGZhbHNlCiAgICAgICAgICAgIH0pOwoKICAgICAgICB9LAogICAgICAgIGhhbmRsZVNlYXJjaCgpewogICAgICAgICAgICBsZXQgZGF0ZSA9IHRoaXMuc2VhcmNoLmRhdGUKICAgICAgICAgICAgdGhpcy5zZWFyY2guc3RhcnRBdCA9IHN0YXJ0VW5peChkYXRlKQogICAgICAgICAgICB0aGlzLnNlYXJjaC5lbmRBdCA9IGVuZFVuaXgoZGF0ZSkKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoCiAgICAgICAgfSwKICAgICAgICBoYW5kbGVBY3RpdmVEYXRhKHN0YXRMaXN0KXsKICAgICAgICAgICAgbGV0IGtleUFyciA9IFtdCiAgICAgICAgICAgIGxldCB2YWx1ZUFyciA9IFtdCiAgICAgICAgICAgIGxldCBkYXRhID0gW10KICAgICAgICAgICAgc3RhdExpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHsKICAgICAgICAgICAgICAgIGtleUFyci5wdXNoKGluZGV4ICsgIjowMCIpCiAgICAgICAgICAgICAgICBkYXRhLnB1c2goaXRlbSkKICAgICAgICAgICAgfSkKICAgICAgICAgICAgdmFsdWVBcnIucHVzaChkYXRhKQogICAgICAgICAgICB0aGlzLmFjdGl2ZURhdGEua2V5cyA9IGtleUFycgogICAgICAgICAgICB0aGlzLmFjdGl2ZURhdGEudmFsdWVzID0gdmFsdWVBcnIKICAgICAgICAgICAgKyt0aGlzLmFjdGl2ZUtleQogICAgICAgIH0sCiAgICAgICAgY291bnRUb3RhbChhcnIsIGtleU5hbWUpIHsKICAgICAgICAgICAgbGV0ICR0b3RhbCA9IDA7CiAgICAgICAgICAgICR0b3RhbCA9IGFyci5yZWR1Y2UoZnVuY3Rpb24gKHRvdGFsLCBjdXJyZW50VmFsdWUsIGN1cnJlbnRJbmRleCwgYXJyKXsKICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VmFsdWVba2V5TmFtZV0gPyAodG90YWwgKyBjdXJyZW50VmFsdWVba2V5TmFtZV0pIDogdG90YWw7CiAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgICByZXR1cm4gJHRvdGFsLnRvRml4ZWQoMik7CiAgICAgICAgfQogICAgfQp9Cg=="},null]}