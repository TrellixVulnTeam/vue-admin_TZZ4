{"remainingRequest":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mengy/develop/iwork/kafo/vue-admin/src/views/manage/count/data-report.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mengy/develop/iwork/kafo/vue-admin/src/views/manage/count/data-report.vue","mtime":1635307338977},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mengy/develop/iwork/kafo/vue-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb3VudFRvIGZyb20gJ3Z1ZS1jb3VudC10bycKaW1wb3J0IENoYXJ0c0xpbmUgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9DaGFydHMvQ2hhcnRzTGluZScKaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9QYWdpbmF0aW9uJwppbXBvcnQgewogICAgZ2V0QXBwTGlzdEJ5QXJlYUlkLAogICAgZ2V0QXBwTmFtZSwKICAgIGdldEFyZWFMaXN0LAogICAgZ2V0QXJyTmFtZSwKICAgIGdldEN1cnJlbnRVc2VyQXJlYUlkLAogICAgZ2V0U3RhdEludGVydmFsCn0gZnJvbSAiQC91dGlscy9kaXN0IjsKaW1wb3J0IHtlbmRVbml4LCBnZXRDdXJyZW50RGF0ZSwgc3RhcnRVbml4LCB0b0RvbGxhcn0gZnJvbSAiQC91dGlscy91dGlsIjsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICdIb21lJywKICAgIGNvbXBvbmVudHM6IHtDb3VudFRvLCBDaGFydHNMaW5lLCBQYWdpbmF0aW9ufSwKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgLy8g5pWw5o2u5YiX6KGo5Yqg6L295Yqo55S7CiAgICAgICAgICAgIGxpc3RMb2FkaW5nOiB0cnVlLAogICAgICAgICAgICAvLyDmn6Xor6LliJfooajlj4LmlbDlr7nosaEKICAgICAgICAgICAgc2VhcmNoOiB7CiAgICAgICAgICAgICAgICBhcmVhSWQ6IDAsCiAgICAgICAgICAgICAgICBhcHBJZDogMCwKICAgICAgICAgICAgICAgIGRhdGU6IFsKICAgICAgICAgICAgICAgICAgICBnZXRDdXJyZW50RGF0ZSgtNiksCiAgICAgICAgICAgICAgICAgICAgZ2V0Q3VycmVudERhdGUoKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIGludGVydmFsOiA0LAogICAgICAgICAgICAgICAgcGFnZTogewogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLAogICAgICAgICAgICAgICAgICAgIHBhZ2VTaXplOiAxMDAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRvdGFsOiAwLAogICAgICAgICAgICBhY3RpdmVJbmRleDogJzEnLAogICAgICAgICAgICBjdXJyZW50RGF0ZToge30sCiAgICAgICAgICAgIGF1dGhBcmVhSWQ6IGdldEN1cnJlbnRVc2VyQXJlYUlkKCksCiAgICAgICAgICAgIGFwcExpc3Q6IHVuZGVmaW5lZCwKICAgICAgICAgICAgYXJlYUxpc3Q6IGdldEFyZWFMaXN0KHRydWUpLAogICAgICAgICAgICBhcmVhTGlzdEFsbDogZ2V0QXJlYUxpc3QoZmFsc2UpLAogICAgICAgICAgICBpbnRlcnZhbExpc3Q6IGdldFN0YXRJbnRlcnZhbCgpLAogICAgICAgICAgICBpbmNvbWVEYXRhOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+aVtOS9k+aUtuWFpScsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5pW05L2T5pS25YWlJ10sCiAgICAgICAgICAgICAgICB2YWx1ZXM6IFtdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5ld0luY29tZURhdGE6IHsKICAgICAgICAgICAgICAgIHRpdGxlOiAn5paw5aKe5pS25YWlJywKICAgICAgICAgICAgICAgIGxlZ2VuZDogWyfmlrDlop7mlLblhaUnXQogICAgICAgICAgICB9LAogICAgICAgICAgICBwYXlQYWlkUmF0aW9EYXRhOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+aVtOS9k+S7mOi0ueeOhycsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5pW05L2T5LuY6LS5546HJ10sCiAgICAgICAgICAgICAgICB2YWx1ZXM6IFtdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5ld1BheVBhaWRSYXRpb0RhdGE6IHsKICAgICAgICAgICAgICAgIHRpdGxlOiAn5paw5aKe5LuY6LS5546HJywKICAgICAgICAgICAgICAgIGxlZ2VuZDogWyfmlrDlop7ku5jotLnnjocnXSwKICAgICAgICAgICAgICAgIGtleXM6IFtdLAogICAgICAgICAgICAgICAgdmFsdWVzOiBbXQogICAgICAgICAgICB9LAogICAgICAgICAgICBuZXdVc2VyRGF0YTogewogICAgICAgICAgICAgICAgdGl0bGU6ICfmlrDlop7nlKjmiLfmlbAnLAogICAgICAgICAgICAgICAgbGVnZW5kOiBbJ+aWsOWinueUqOaItyddLAogICAgICAgICAgICAgICAga2V5czogW10sCiAgICAgICAgICAgICAgICB2YWx1ZXM6IFtdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBheVVzZXJEYXRhOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+a0u+i3g+eahOS7mOi0ueeUqOaIt+aVsCcsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5LuY6LS5546H55So5oi3J10sCiAgICAgICAgICAgICAgICBrZXlzOiBbXSwKICAgICAgICAgICAgICAgIHZhbHVlczogW10KICAgICAgICAgICAgfSwKICAgICAgICAgICAgYW5zd2VyUmF0aW9EYXRhOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+eUteivneaOpemAmueOhycsCiAgICAgICAgICAgICAgICBsZWdlbmQ6IFsn5o6l6YCa546HJ10sCiAgICAgICAgICAgICAgICBrZXlzOiBbXSwKICAgICAgICAgICAgICAgIHZhbHVlczogW10KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZHVyYXRpb25BdmVyYWdlRGF0YTogewogICAgICAgICAgICAgICAgdGl0bGU6ICflubPlnYfpgJror53ml7bplb8nLAogICAgICAgICAgICAgICAgbGVnZW5kOiBbJ+mAmuivneaXtumVvyddLAogICAgICAgICAgICAgICAga2V5czogW10sCiAgICAgICAgICAgICAgICB2YWx1ZXM6IFtdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFycHVEYXRhOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogJ0FSUFUnLAogICAgICAgICAgICAgICAgbGVnZW5kOiBbJ0FSUFUnXSwKICAgICAgICAgICAgICAgIGtleXM6IFtdLAogICAgICAgICAgICAgICAgdmFsdWVzOiBbXQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgIG1vdW50ZWQoKSB7CiAgICAgICAgdGhpcy5pbml0KCkKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgaW5pdCgpewogICAgICAgICAgICB0aGlzLnNlYXJjaC5hcmVhSWQgPSB0aGlzLmF1dGhBcmVhSWQgPT09IDAgPyB0aGlzLmFyZWFMaXN0WzBdLnZhbHVlIDogdGhpcy5hdXRoQXJlYUlkCiAgICAgICAgICAgIHRoaXMuY2hhbmdlQXJlYSh0aGlzLnNlYXJjaC5hcmVhSWQpCiAgICAgICAgICAgIHRoaXMuZmV0Y2hEYXRhKCkKICAgICAgICB9LAogICAgICAgIGZldGNoRGF0YSgpIHsKICAgICAgICAgICAgY29uc3QgJHRoaXMgPSB0aGlzCiAgICAgICAgICAgIHRoaXMuY2FyZEluZm9EYXRhID0gW10KICAgICAgICAgICAgbGV0IHBhcmFtID0gdGhpcy5oYW5kbGVTZWFyY2goKQogICAgICAgICAgICB0aGlzLiRzZXJ2aWNlLmhvbWUuZ2V0VXNlclN0YXQocGFyYW0sIGZ1bmN0aW9uIChyZXN1bHQpewogICAgICAgICAgICAgICAgY29uc3QgbGlzdCA9IHJlc3VsdC5nZXRTdGF0c0xpc3QoKQogICAgICAgICAgICAgICAgbGV0IGtleXMgPSBbXQogICAgICAgICAgICAgICAgbGV0IHRhYmxlRGF0YSA9IFtdCgogICAgICAgICAgICAgICAgbGV0IGZtdCA9ICR0aGlzLnRvRm10KHBhcmFtKQoKICAgICAgICAgICAgICAgIGxldCBpbmNvbWVzID0gW10KICAgICAgICAgICAgICAgIGxldCBuZXdJbmNvbWVzID0gW10KICAgICAgICAgICAgICAgIGxldCBwYXlQYWlkUmF0aW9zID0gW10KICAgICAgICAgICAgICAgIGxldCBuZXdQYXlQYWlkUmF0aW9zID0gW10KICAgICAgICAgICAgICAgIGxldCBuZXdVc2VyID0gW10KICAgICAgICAgICAgICAgIGxldCBwYXlVc2VyID0gW10KICAgICAgICAgICAgICAgIGxldCBhbnN3ZXJSYXRpb3MgPSBbXQogICAgICAgICAgICAgICAgbGV0IGR1cmF0aW9uQXZlcmFnZXMgPSBbXQogICAgICAgICAgICAgICAgbGV0IGFycHVzID0gW10KICAgICAgICAgICAgICAgIGxpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpPT57CiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0QXQgPSBpdGVtLmdldFN0YXJ0QXQoKQogICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChuZXcgRGF0ZShzdGFydEF0ICogMTAwMCkuZm9ybWF0KGZtdCkpCiAgICAgICAgICAgICAgICAgICAgaW5jb21lcy5wdXNoKHRvRG9sbGFyKGl0ZW0uZ2V0SW5jb21lKCkpKQogICAgICAgICAgICAgICAgICAgIG5ld0luY29tZXMucHVzaCh0b0RvbGxhcihpdGVtLmdldE5ld0luY29tZSgpKSkKCiAgICAgICAgICAgICAgICAgICAgbGV0IHBheVBhaWRSYXRpbyA9ICR0aGlzLnRvUmF0aW8oaXRlbS5nZXRQYXlVc2VyKCksIGl0ZW0uZ2V0QWN0aXZlVXNlcigpKQogICAgICAgICAgICAgICAgICAgIHBheVBhaWRSYXRpb3MucHVzaChwYXlQYWlkUmF0aW8pCgogICAgICAgICAgICAgICAgICAgIGxldCBuZXdQYXlQYWlkUmF0aW8gPSAkdGhpcy50b1JhdGlvKGl0ZW0uZ2V0TmV3UGF5VXNlcigpLCBpdGVtLmdldE5ld1VzZXIoKSkKICAgICAgICAgICAgICAgICAgICBuZXdQYXlQYWlkUmF0aW9zLnB1c2gobmV3UGF5UGFpZFJhdGlvKQoKICAgICAgICAgICAgICAgICAgICBuZXdVc2VyLnB1c2goaXRlbS5nZXROZXdVc2VyKCkpCgogICAgICAgICAgICAgICAgICAgIHBheVVzZXIucHVzaChpdGVtLmdldFBheVVzZXIoKSkKCiAgICAgICAgICAgICAgICAgICAgbGV0IGFuc3dlclJhdGlvID0gJHRoaXMudG9SYXRpbyhpdGVtLmdldEFuc3dlcigpLCBpdGVtLmdldENhbGwoKSkKICAgICAgICAgICAgICAgICAgICBhbnN3ZXJSYXRpb3MucHVzaChhbnN3ZXJSYXRpbykKCiAgICAgICAgICAgICAgICAgICAgbGV0IGR1cmF0aW9uQXZlcmFnZSA9ICR0aGlzLnRvQXZlKGl0ZW0uZ2V0RHVyYXRpb24oKSwgaXRlbS5nZXRBbnN3ZXIoKSkKICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbkF2ZXJhZ2VzLnB1c2goZHVyYXRpb25BdmVyYWdlKQoKICAgICAgICAgICAgICAgICAgICBsZXQgYXJwdSA9ICR0aGlzLnRvQXZlKGl0ZW0uZ2V0SW5jb21lKCksIGl0ZW0uZ2V0QWN0aXZlVXNlcigpKQogICAgICAgICAgICAgICAgICAgIGFycHVzLnB1c2godG9Eb2xsYXIoYXJwdSkpCgogICAgICAgICAgICAgICAgICAgIC8vIOWIl+ihqOaVsOaNrgogICAgICAgICAgICAgICAgICAgIGNvbnN0IGpzb24gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJpZCIgOiBpdGVtLmdldElkKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJkYXRlIiA6IG5ldyBEYXRlKHN0YXJ0QXQgKiAxMDAwKS5mb3JtYXQoInl5eXktTU0tZGQgaGg6bW0iKSwKICAgICAgICAgICAgICAgICAgICAgICAgImFwcElkIiA6IGl0ZW0uZ2V0QXBwSWQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImFwcCIgOiBnZXRBcHBOYW1lKCR0aGlzLmFwcExpc3QsIGl0ZW0uZ2V0QXBwSWQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmVhSWQiIDogaXRlbS5nZXRBcmVhSWQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZWFOYW1lIiA6IGdldEFyck5hbWUoJHRoaXMuYXJlYUxpc3RBbGwsIGl0ZW0uZ2V0QXJlYUlkKCkpLAogICAgICAgICAgICAgICAgICAgICAgICAiaW5jb21lIiA6IHRvRG9sbGFyKGl0ZW0uZ2V0SW5jb21lKCkpLAogICAgICAgICAgICAgICAgICAgICAgICAibmV3SW5jb21lIiA6IHRvRG9sbGFyKGl0ZW0uZ2V0TmV3SW5jb21lKCkpLAogICAgICAgICAgICAgICAgICAgICAgICAicGF5UGFpZFJhdGlvIiA6IHBheVBhaWRSYXRpbywKICAgICAgICAgICAgICAgICAgICAgICAgIm5ld1BheVBhaWRSYXRpbyIgOiBuZXdQYXlQYWlkUmF0aW8sCiAgICAgICAgICAgICAgICAgICAgICAgICJuZXdVc2VyIiA6IGl0ZW0uZ2V0TmV3VXNlcigpLAogICAgICAgICAgICAgICAgICAgICAgICAicGF5VXNlciIgOiBpdGVtLmdldFBheVVzZXIoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImFuc3dlclJhdGlvIiA6IGFuc3dlclJhdGlvLAogICAgICAgICAgICAgICAgICAgICAgICAiZHVyYXRpb25SYXRpbyIgOiBkdXJhdGlvbkF2ZXJhZ2UsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcnB1IiA6IGFycHUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhLnB1c2goanNvbikKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAvL+aVtOS9k+aUtuWFpQogICAgICAgICAgICAgICAgJHRoaXMuaW5jb21lRGF0YS5rZXlzID0ga2V5cwogICAgICAgICAgICAgICAgJHRoaXMuaW5jb21lRGF0YS52YWx1ZXMgPSBbXQogICAgICAgICAgICAgICAgJHRoaXMuaW5jb21lRGF0YS52YWx1ZXMucHVzaChpbmNvbWVzKQoKICAgICAgICAgICAgICAgIC8v5paw5aKe5pS25YWlCiAgICAgICAgICAgICAgICAkdGhpcy5uZXdJbmNvbWVEYXRhLmtleXMgPSBrZXlzCiAgICAgICAgICAgICAgICAkdGhpcy5uZXdJbmNvbWVEYXRhLnZhbHVlcyA9IFtdCiAgICAgICAgICAgICAgICAkdGhpcy5uZXdJbmNvbWVEYXRhLnZhbHVlcy5wdXNoKG5ld0luY29tZXMpCgogICAgICAgICAgICAgICAgLy/mlbTkvZPku5jotLnnjocKICAgICAgICAgICAgICAgICR0aGlzLnBheVBhaWRSYXRpb0RhdGEua2V5cyA9IGtleXMKICAgICAgICAgICAgICAgICR0aGlzLnBheVBhaWRSYXRpb0RhdGEudmFsdWVzID0gW10KICAgICAgICAgICAgICAgICR0aGlzLnBheVBhaWRSYXRpb0RhdGEudmFsdWVzLnB1c2gocGF5UGFpZFJhdGlvcykKCiAgICAgICAgICAgICAgICAvL+aWsOWinuS7mOi0ueeOhwogICAgICAgICAgICAgICAgJHRoaXMubmV3UGF5UGFpZFJhdGlvRGF0YS5rZXlzID0ga2V5cwogICAgICAgICAgICAgICAgJHRoaXMubmV3UGF5UGFpZFJhdGlvRGF0YS52YWx1ZXMgPSBbXQogICAgICAgICAgICAgICAgJHRoaXMubmV3UGF5UGFpZFJhdGlvRGF0YS52YWx1ZXMucHVzaChuZXdQYXlQYWlkUmF0aW9zKQoKICAgICAgICAgICAgICAgIC8v5paw5aKe55So5oi35pWwCiAgICAgICAgICAgICAgICAkdGhpcy5uZXdVc2VyRGF0YS5rZXlzID0ga2V5cwogICAgICAgICAgICAgICAgJHRoaXMubmV3VXNlckRhdGEudmFsdWVzID0gW10KICAgICAgICAgICAgICAgICR0aGlzLm5ld1VzZXJEYXRhLnZhbHVlcy5wdXNoKG5ld1VzZXIpCgogICAgICAgICAgICAgICAgLy/mtLvot4PnmoTku5jotLnnlKjmiLfmlbAKICAgICAgICAgICAgICAgICR0aGlzLnBheVVzZXJEYXRhLmtleXMgPSBrZXlzCiAgICAgICAgICAgICAgICAkdGhpcy5wYXlVc2VyRGF0YS52YWx1ZXMgPSBbXQogICAgICAgICAgICAgICAgJHRoaXMucGF5VXNlckRhdGEudmFsdWVzLnB1c2gocGF5VXNlcikKCiAgICAgICAgICAgICAgICAvL+eUteivneaOpemAmueOhwogICAgICAgICAgICAgICAgJHRoaXMuYW5zd2VyUmF0aW9EYXRhLmtleXMgPSBrZXlzCiAgICAgICAgICAgICAgICAkdGhpcy5hbnN3ZXJSYXRpb0RhdGEudmFsdWVzID0gW10KICAgICAgICAgICAgICAgICR0aGlzLmFuc3dlclJhdGlvRGF0YS52YWx1ZXMucHVzaChhbnN3ZXJSYXRpb3MpCgogICAgICAgICAgICAgICAgLy/lubPlnYfpgJror53ml7bplb8KICAgICAgICAgICAgICAgICR0aGlzLmR1cmF0aW9uQXZlcmFnZURhdGEua2V5cyA9IGtleXMKICAgICAgICAgICAgICAgICR0aGlzLmR1cmF0aW9uQXZlcmFnZURhdGEudmFsdWVzID0gW10KICAgICAgICAgICAgICAgICR0aGlzLmR1cmF0aW9uQXZlcmFnZURhdGEudmFsdWVzLnB1c2goZHVyYXRpb25BdmVyYWdlcykKCiAgICAgICAgICAgICAgICAvLyBBUlBVCiAgICAgICAgICAgICAgICAkdGhpcy5hcnB1RGF0YS5rZXlzID0ga2V5cwogICAgICAgICAgICAgICAgJHRoaXMuYXJwdURhdGEudmFsdWVzID0gW10KICAgICAgICAgICAgICAgICR0aGlzLmFycHVEYXRhLnZhbHVlcy5wdXNoKGFycHVzKQoKICAgICAgICAgICAgICAgICR0aGlzLnRvdGFsID0gdGFibGVEYXRhLmxlbmd0aAogICAgICAgICAgICAgICAgJHRoaXMudGFibGVEYXRhID0gdGFibGVEYXRhCiAgICAgICAgICAgICAgICAkdGhpcy5saXN0TG9hZGluZyA9IGZhbHNlCgogICAgICAgICAgICAgICAgJHRoaXMuc2VsSXRlbSgkdGhpcy5hY3RpdmVJbmRleCkKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICB0b0ZtdChwYXJhbSl7CiAgICAgICAgICAgIGxldCBmbXQgPSAiTU0tZGQgaGg6bW0iOwogICAgICAgICAgICBsZXQgaW50ZXJ2YWwgPSBwYXJhbS5pbnRlcnZhbAogICAgICAgICAgICBpZihpbnRlcnZhbCA9PT0gMyl7CiAgICAgICAgICAgICAgICBsZXQgc3RhcnREYXRlID0gcGFyYW0uZGF0ZVswXQogICAgICAgICAgICAgICAgbGV0IGVuZERhdGUgPSBwYXJhbS5kYXRlWzFdCiAgICAgICAgICAgICAgICBmbXQgPSBzdGFydERhdGUuZ2V0VGltZSgpID09PSBlbmREYXRlLmdldFRpbWUoKSA/ICJoaDptbSIgOiAiTU0tZGQgaGg6bW0iCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZtdAogICAgICAgIH0sCiAgICAgICAgdG9SYXRpbyhudW0sIHRvdGFsKXsKICAgICAgICAgICAgbnVtID0gcGFyc2VGbG9hdChudW0pOwogICAgICAgICAgICB0b3RhbCA9IHBhcnNlRmxvYXQodG90YWwpOwogICAgICAgICAgICBpZiAoaXNOYU4obnVtKSB8fCBpc05hTih0b3RhbCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0b3RhbCA8PSAwID8gMCA6IChNYXRoLnJvdW5kKG51bSAvIHRvdGFsICogMTAwMDApIC8gMTAwLjAwKTsKICAgICAgICB9LAogICAgICAgIHRvQXZlKG51bSwgdG90YWwpewogICAgICAgICAgICBpZiAodG90YWwgPT09IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBudW0KICAgICAgICAgICAgfWVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtIC8gdG90YWwpCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGhhbmRsZVNlYXJjaCgpewogICAgICAgICAgICBsZXQgcGFyYW0gPSB0aGlzLnNlYXJjaDsKICAgICAgICAgICAgcGFyYW0uc3RhcnRBdCA9IHN0YXJ0VW5peCh0aGlzLnNlYXJjaC5kYXRlWzBdKQogICAgICAgICAgICBwYXJhbS5lbmRBdCA9IGVuZFVuaXgodGhpcy5zZWFyY2guZGF0ZVsxXSkKICAgICAgICAgICAgcmV0dXJuIHBhcmFtCiAgICAgICAgfSwKICAgICAgICBvblNlYXJjaCgpIHsKICAgICAgICAgICAgdGhpcy5zZWFyY2gucGFnZS5jdXJyZW50UGFnZSA9IDEKICAgICAgICAgICAgdGhpcy5mZXRjaERhdGEoKQogICAgICAgIH0sCiAgICAgICAgc2VsSXRlbShrZXkpIHsKICAgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IHt9CiAgICAgICAgICAgIHN3aXRjaCAoa2V5KXsKICAgICAgICAgICAgICAgIGNhc2UgJzEnOgogICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLmluY29tZURhdGEKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgJzInOgogICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLm5ld0luY29tZURhdGEKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgJzMnOgogICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLnBheVBhaWRSYXRpb0RhdGEKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgJzQnOgogICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLm5ld1BheVBhaWRSYXRpb0RhdGEKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgJzUnOgogICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLm5ld1VzZXJEYXRhCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICc2JzoKICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gdGhpcy5wYXlVc2VyRGF0YQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAnNyc6CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IHRoaXMuYW5zd2VyUmF0aW9EYXRhCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICc4JzoKICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gdGhpcy5kdXJhdGlvbkF2ZXJhZ2VEYXRhCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICc5JzoKICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gdGhpcy5hcnB1RGF0YQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBrZXkKICAgICAgICAgICAgdGhpcy4kcmVmcy5jaGFydHNMaW5lLmluaXQodGhpcy5jdXJyZW50RGF0ZSk7CiAgICAgICAgfSwKICAgICAgICBjaGFuZ2VBcmVhKHZhbCl7CiAgICAgICAgICAgIHRoaXMuYXBwTGlzdCA9IGdldEFwcExpc3RCeUFyZWFJZCh2YWwsIHRydWUsIHRydWUpCiAgICAgICAgfQogICAgfQp9Cg=="},null]}